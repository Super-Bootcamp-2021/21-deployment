(()=>{"use strict";var e={904:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(15),o=n.n(r),i=n(645),u=n.n(i)()(o());u.push([e.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/worker/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const a=u},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],u=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),f="/*# ".concat(c," */"),l=u.sources.map((function(e){return"/*# sourceURL=".concat(u.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([f]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function u(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],f=n[c]||0,l="".concat(c," ").concat(f);n[c]=f+1;var s=u(l),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==s?(i[s].references++,i[s].updater(d)):i.push({identifier:l,updater:y(d,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var u=o(e.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(t)}return t}var f,l=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function s(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),u=e.childNodes;u[t]&&e.removeChild(u[t]),u.length?e.insertBefore(i,u[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function y(e,t){var n,r,o;if(t.singleton){var i=h++;n=p||(p=c(t)),r=s.bind(null,n,i,!1),o=s.bind(null,n,i,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);i[o].references--}for(var c=a(e,t),f=0;f<n.length;f++){var l=u(n[f]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=c}}}},121:(e,t,n)=>{n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function t(e){return!!e&&!!e[K]}function r(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[W]||!!e.constructor[W]||f(e)||l(e))}function o(e,t,n){void 0===n&&(n=!1),0===i(e)?(n?Object.keys:$)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function i(e){var t=e[K];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:f(e)?2:l(e)?3:0}function u(e,t){return 2===i(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function a(e,t,n){var r=i(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function c(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function f(e){return L&&e instanceof Map}function l(e){return U&&e instanceof Set}function s(e){return e.o||e.t}function d(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=z(e);delete t[K];for(var n=$(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function p(e,n){return void 0===n&&(n=!1),y(e)||t(e)||!r(e)||(i(e)>1&&(e.set=e.add=e.clear=e.delete=h),Object.freeze(e),n&&o(e,(function(e,t){return p(t,!0)}),!0)),e}function h(){e(2)}function y(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function v(t){var n=G[t];return n||e(18,t),n}function b(){return N}function m(e,t){t&&(v("Patches"),e.u=[],e.s=[],e.v=t)}function g(e){w(e),e.p.forEach(E),e.p=null}function w(e){e===N&&(N=e.l)}function O(e){return N={p:[],l:N,h:e,m:!0,_:0}}function E(e){var t=e[K];0===t.i||1===t.i?t.j():t.g=!0}function j(t,n){n._=n.p.length;var o=n.p[0],i=void 0!==t&&t!==o;return n.h.O||v("ES5").S(n,t,i),i?(o[K].P&&(g(n),e(4)),r(t)&&(t=P(n,t),n.l||S(n,t)),n.u&&v("Patches").M(o[K],t,n.u,n.s)):t=P(n,o,[]),g(n),n.u&&n.v(n.u,n.s),t!==F?t:void 0}function P(e,t,n){if(y(t))return t;var r=t[K];if(!r)return o(t,(function(o,i){return A(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return S(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=d(r.k):r.o;o(3===r.i?new Set(i):i,(function(t,o){return A(e,r,i,t,o,n)})),S(e,i,!1),n&&e.u&&v("Patches").R(r,n,e.u,e.s)}return r.o}function A(e,n,o,i,c,f){if(t(c)){var l=P(e,c,f&&n&&3!==n.i&&!u(n.D,i)?f.concat(i):void 0);if(a(o,i,l),!t(l))return;e.m=!1}if(r(c)&&!y(c)){if(!e.h.N&&e._<1)return;P(e,c),n&&n.A.l||S(e,c)}}function S(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&p(t,n)}function x(e,t){var n=e[K];return(n?s(n):e)[t]}function R(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function I(e){e.P||(e.P=!0,e.l&&I(e.l))}function D(e){e.o||(e.o=d(e.t))}function _(e,t,n){var r=f(t)?v("MapSet").T(t,n):l(t)?v("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:b(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=Z;n&&(o=[r],i=H);var u=Proxy.revocable(o,i),a=u.revoke,c=u.proxy;return r.k=c,r.j=a,c}(t,n):v("ES5").J(t,n);return(n?n.A:b()).p.push(r),r}function k(n){return t(n)||e(22,n),function e(t){if(!r(t))return t;var n,u=t[K],c=i(t);if(u){if(!u.P&&(u.i<4||!v("ES5").K(u)))return u.t;u.I=!0,n=T(t,c),u.I=!1}else n=T(t,c);return o(n,(function(t,r){u&&function(e,t){return 2===i(e)?e.get(t):e[t]}(u.t,t)===r||a(n,t,e(r))})),3===c?new Set(n):n}(n)}function T(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return d(e)}var C,N,M="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),L="undefined"!=typeof Map,U="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,F=M?Symbol.for("immer-nothing"):((C={})["immer-nothing"]=!0,C),W=M?Symbol.for("immer-draftable"):"__$immer_draftable",K=M?Symbol.for("immer-state"):"__$immer_state",$=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),z=Object.getOwnPropertyDescriptors||function(e){var t={};return $(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},G={},Z={get:function(e,t){if(t===K)return e;var n=s(e);if(!u(n,t))return function(e,t,n){var r,o=R(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var o=n[t];return e.I||!r(o)?o:o===x(e.t,t)?(D(e),e.o[t]=_(e.A.h,o,e)):o},has:function(e,t){return t in s(e)},ownKeys:function(e){return Reflect.ownKeys(s(e))},set:function(e,t,n){var r=R(s(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=x(s(e),t),i=null==o?void 0:o[K];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(c(n,o)&&(void 0!==n||u(e.t,t)))return!0;D(e),I(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==x(e.t,t)||t in e.t?(e.D[t]=!1,D(e),I(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=s(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){e(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){e(12)}},H={};o(Z,(function(e,t){H[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),H.deleteProperty=function(e,t){return Z.deleteProperty.call(this,e[0],t)},H.set=function(e,t,n){return Z.set.call(this,e[0],t,n,e[0])};var J=new(function(){function n(e){this.O=B,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=n.prototype;return o.produce=function(t,n,o){if("function"==typeof t&&"function"!=typeof n){var i=n;n=t;var u=this;return function(e){var t=this;void 0===e&&(e=i);for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return u.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var a;if("function"!=typeof n&&e(6),void 0!==o&&"function"!=typeof o&&e(7),r(t)){var c=O(this),f=_(this,t,void 0),l=!0;try{a=n(f),l=!1}finally{l?g(c):w(c)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return m(c,o),j(e,c)}),(function(e){throw g(c),e})):(m(c,o),j(a,c))}if(!t||"object"!=typeof t){if((a=n(t))===F)return;return void 0===a&&(a=t),this.N&&p(a,!0),a}e(21,t)},o.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},o.createDraft=function(n){r(n)||e(8),t(n)&&(n=k(n));var o=O(this),i=_(this,n,void 0);return i[K].C=!0,w(o),i},o.finishDraft=function(e,t){var n=(e&&e[K]).A;return m(n,t),j(void 0,n)},o.setAutoFreeze=function(e){this.N=e},o.setUseProxies=function(t){t&&!B&&e(20),this.O=t},o.applyPatches=function(e,n){var r;for(r=n.length-1;r>=0;r--){var o=n[r];if(0===o.path.length&&"replace"===o.op){e=o.value;break}}var i=v("Patches").$;return t(e)?i(e,n):this.produce(e,(function(e){return i(e,n.slice(r+1))}))},n}()),V=J.produce;J.produceWithPatches.bind(J),J.setAutoFreeze.bind(J),J.setUseProxies.bind(J),J.applyPatches.bind(J),J.createDraft.bind(J),J.finishDraft.bind(J);const X=V;var Y=n(121),q=function(){return Math.random().toString(36).substring(7).split("").join(".")},Q={INIT:"@@redux/INIT"+q(),REPLACE:"@@redux/REPLACE"+q(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+q()}};function ee(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function te(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(te)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,u=[],a=u,c=!1;function f(){a===u&&(a=u.slice())}function l(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function s(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return f(),a.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,f();var n=a.indexOf(e);a.splice(n,1),u=null}}}function d(e){if(!ee(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,e)}finally{c=!1}for(var t=u=a,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:Q.REPLACE})}function h(){var e,t=s;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(l())}return n(),{unsubscribe:t(n)}}})[Y.Z]=function(){return this},e}return d({type:Q.INIT}),(r={dispatch:d,subscribe:s,getState:l,replaceReducer:p})[Y.Z]=h,r}function ne(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function re(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function oe(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oe(n,!0).forEach((function(t){re(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oe(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ue(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function ae(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return ie({},n,{dispatch:r=ue.apply(void 0,i)(n.dispatch)})}}}function ce(e,t){return e===t}function fe(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function le(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ce,n=null,r=null;return function(){return fe(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));var se=le();se.withExtraArgument=le;const de=se;function pe(){return(pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function be(e,t,n){return(be=ve()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&ye(o,n.prototype),o}).apply(null,arguments)}function me(e){var t="function"==typeof Map?new Map:void 0;return(me=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return be(e,arguments,he(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),ye(r,e)})(e)}var ge="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ue:ue.apply(null,arguments)};var we,Oe=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return be(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?be(r,t[0].concat(this)):be(r,t.concat(this))},r}(me(Array));function Ee(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return pe({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator"))),function(){function e(e,t){var n=a[e];return n?n.enumerable=t:a[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[K];return Z.get(t,e)},set:function(t){var n=this[K];Z.set(n,e,t)}},n}function n(e){for(var t=e.length-1;t>=0;t--){var n=e[t][K];if(!n.P)switch(n.i){case 5:i(n)&&I(n);break;case 4:r(n)&&I(n)}}}function r(e){for(var t=e.t,n=e.k,r=$(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==K){var a=t[i];if(void 0===a&&!u(t,i))return!0;var f=n[i],l=f&&f[K];if(l?l.t!==a:!c(f,a))return!0}}var s=!!t[K];return r.length!==$(t).length+(s?0:1)}function i(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var a={};!function(e,t){G[e]||(G[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=z(n);delete i[K];for(var u=$(i),a=0;a<u.length;a++){var c=u[a];i[c]=e(c,t||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:b(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,K,{value:i,writable:!0}),o},S:function(e,r,a){a?t(r)&&r[K].A===e&&n(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[K];if(n){var r=n.t,a=n.k,c=n.D,f=n.i;if(4===f)o(a,(function(t){t!==K&&(void 0!==r[t]||u(r,t)?c[t]||e(a[t]):(c[t]=!0,I(n)))})),o(r,(function(e){void 0!==a[e]||u(a,e)||(c[e]=!1,I(n))}));else if(5===f){if(i(n)&&(I(n),c.length=!0),a.length<r.length)for(var l=a.length;l<r.length;l++)c[l]=!1;else for(var s=r.length;s<a.length;s++)c[s]=!0;for(var d=Math.min(a.length,r.length),p=0;p<d;p++)void 0===c[p]&&e(a[p])}}}}(e.p[0]),n(e.p))},K:function(e){return 4===e.i?r(e):i(e)}})}(),function(e){e.ERROR="error",e.LOADING="loading",e.LOADED="workersLoaded",e.REGISTERED="registered",e.REMOVED="removed",e.CLEAR_ERROR="clearError"}(we||(we={}));const je=Ee(we.ERROR),Pe=Ee(we.LOADING),Ae=Ee(we.REGISTERED),Se=Ee(we.REMOVED),xe=Ee(we.LOADED),Re=Ee(we.CLEAR_ERROR),Ie=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new Oe);return r&&(function(e){return"boolean"==typeof e}(r)?o.push(de):o.push(de.withExtraArgument(r.extraArgument))),o}(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,u=r.middleware,a=void 0===u?n():u,c=r.devTools,f=void 0===c||c,l=r.preloadedState,s=void 0===l?void 0:l,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Q.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Q.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+Q.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var c=u[a],f=n[c],l=e[c],s=f(l,t);if(void 0===s){var d=ne(c,t);throw new Error(d)}o[c]=s,r=r||s!==l}return(r=r||u.length!==Object.keys(e).length)?o:e}}(i)}var h=ae.apply(void 0,"function"==typeof a?a(n):a),y=ue;f&&(y=ge(pe({trace:!1},"object"==typeof f&&f)));var v=[h];return Array.isArray(p)?v=[h].concat(p):"function"==typeof p&&(v=p(v)),te(t,s,y.apply(void 0,v))}({reducer:function(e,n,o,i){void 0===o&&(o=[]);var u="function"==typeof n?function(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}(n):[n,o,i],a=u[0],c=u[1],f=u[2];return function(n,o){void 0===n&&(n=e);var i=[a[o.type]].concat(c.filter((function(e){return(0,e.matcher)(o)})).map((function(e){return e.reducer})));return 0===i.filter((function(e){return!!e})).length&&(i=[f]),i.reduce((function(e,n){if(n){if(t(e)){var i=n(e,o);return void 0===i?e:i}if(r(e))return X(e,(function(e){return n(e,o)}));var u=n(e,o);if(void 0===u){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return u}return e}),n)}}({loading:!1,error:null,workers:[]},{[we.ERROR]:function(e,t){e.loading=!1,e.error=t.payload},[we.CLEAR_ERROR]:function(e){e.error=null},[we.LOADING]:function(e){e.loading=!0,e.error=null},[we.REGISTERED]:function(e,t){const n=t.payload;return e.workers.push({id:n.id,name:n.name,photo:`http://localhost:7001/photo/${n.photo}`,bio:n.bio,age:n.age,address:n.address}),e.loading=!1,e.error=null,e},[we.REMOVED]:function(e,t){const n=e.workers.findIndex((e=>e.id===t.payload));return e.workers.splice(n,1),e.loading=!1,e.error=null,e},[we.LOADED]:function(e,t){return e.workers=t.payload.map((e=>({id:e.id,name:e.name,photo:`http://localhost:7001/photo/${e.photo}`,bio:e.bio,age:e.age,address:e.address}))),e.loading=!1,e.error=null,e}}),middleware:[de]});function De(e,t,n){var r,o;return function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))}(this,void 0,void 0,(function*(){let i;n&&(i={"Content-Type":"application/json"});const u=Object.assign(Object.assign({method:null!==(r=null==t?void 0:t.method)&&void 0!==r?r:"GET"},null==t?void 0:t.customConf),{headers:Object.assign(Object.assign({},i),null===(o=null==t?void 0:t.customConf)||void 0===o?void 0:o.headers)});if(null==t?void 0:t.body)if(n)u.body=JSON.stringify(null==t?void 0:t.body);else{const e=new FormData;for(const n in null==t?void 0:t.body)e.append(n,null==t?void 0:t.body[n]);u.body=e}let a;try{const t=yield window.fetch(e,u);if(a=yield t.json(),!t.ok)throw new Error(a.statusText);return a}catch(e){return Promise.reject(e.message||a)}}))}De.get=(e,t={})=>De(e,Object.assign({method:"GET"},t)),De.post=(e,t,n={})=>De(e,Object.assign({method:"POST",body:t},n)),De.put=(e,t,n={})=>De(e,Object.assign({method:"PUT",body:t},n)),De.del=(e,t,n={})=>De(e,Object.assign({method:"DELETE",body:t},n));var _e=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))};var ke=n(379),Te=n.n(ke),Ce=n(904);Te()(Ce.Z,{insert:"head",singleton:!1}),Ce.Z.locals;const Ne=document.getElementById("form"),Me=document.getElementById("name"),Le=document.getElementById("age"),Ue=document.getElementById("photo"),Be=document.getElementById("bio"),Fe=document.getElementById("address"),We=document.getElementById("list"),Ke=document.getElementById("error-text"),$e=document.getElementById("loading-text");function ze(e){if(Ke&&(e.error?Ke.textContent=e.error.toString():Ke.textContent=""),$e&&(e.loading?$e.style.display="":$e.style.display="none"),We){We.innerHTML="";for(let t=0;t<e.workers.length;t++){const n=e.workers[t],r=document.createElement("div"),o=document.createElement("button");o.innerText="hapus",o.onclick=function(){var e;Ie.dispatch((e=n.id,t=>_e(void 0,void 0,void 0,(function*(){t(Pe());try{yield function(e){return De.del(`http://localhost:7001/remove?id=${e}`)}(e),t(Se(e))}catch(e){t(je("gagal menghapus pekerja"))}}))))},r.innerHTML=`\n        <img src="${n.photo}" alt="" width="30px" height="30px" />\n        <span>${n.name}</span>\n      `,r.append(o),We.append(r)}}}Ne&&Me&&Ue&&Be&&Fe&&Le&&(Ne.onsubmit=e=>{var t;e.preventDefault(),Ie.dispatch(Re()),Me.value&&Le.value&&(null==Ue?void 0:Ue.files)&&(null==Ue?void 0:Ue.files[0])&&Be.value&&Fe.value?(Ie.dispatch((t={name:Me.value,photo:null==Ue?void 0:Ue.files[0],age:Le.value,bio:Be.value,address:Fe.value},e=>_e(void 0,void 0,void 0,(function*(){e(Pe());try{const n=yield function(e){return De.post("http://localhost:7001/register",e)}(t);e(Ae(n))}catch(n){e(je(`gagal mendaftarkan ${t.name}`))}})))),Ne.reset()):Ie.dispatch(je("form isian tidak lengkap!"))}),Ie.subscribe((()=>{ze(Ie.getState())})),ze(Ie.getState()),Ie.dispatch((e=>_e(void 0,void 0,void 0,(function*(){e(Pe());try{const t=yield De.get("http://localhost:7001/list");e(xe(t))}catch(t){e(je("gagal memuat daftar pekerja"))}}))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9tYWluLmNzcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9zdG9yZS50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9yZWR1Y2VyLnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvbGliL2h0dHAtY2xpZW50LnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL21haW4uY3NzPzU3YTYiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvbWFpbi50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9hc3luYy1hY3Rpb24udHMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvd29ya2VyLmNsaWVudC50cyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsInJvb3QiLCJvYnNlcnZhYmxlIiwic2VsZiIsImciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImhtZCIsImNyZWF0ZSIsImNoaWxkcmVuIiwic2V0IiwicHJvcCIsImhhc093blByb3BlcnR5IiwidCIsImFyZ3VtZW50cyIsInIiLCJRIiwiZ2V0UHJvdG90eXBlT2YiLCJMIiwicyIsInYiLCJaIiwidSIsImhhcyIsImYiLCJkZWxldGUiLCJhZGQiLCJjIiwiWCIsIk1hcCIsInEiLCJTZXQiLCJwIiwibCIsInR0Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJ5IiwiY2xlYXIiLCJoIiwiZnJlZXplIiwiaXNGcm96ZW4iLCJiIiwibnQiLCJfIiwiVSIsImoiLCJ3IiwiUyIsIk8iLCJtIiwiUCIsIk0iLCJ4IiwiSCIsIkEiLCJJIiwiayIsIlIiLCJEIiwiTiIsInoiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFIiwiVCIsIkYiLCJDIiwicnQiLCJldCIsIlByb3h5IiwicmV2b2NhYmxlIiwicmV2b2tlIiwicHJveHkiLCJKIiwiSyIsIkciLCJXIiwiQiIsIlJlZmxlY3QiLCJmb3IiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWxldGVQcm9wZXJ0eSIsInNldFByb3RvdHlwZU9mIiwiYXBwbHkiLCJvdCIsInVzZVByb3hpZXMiLCJzZXRVc2VQcm94aWVzIiwiYXV0b0ZyZWV6ZSIsInNldEF1dG9GcmVlemUiLCJwcm9kdWNlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwiUHJvbWlzZSIsInRoZW4iLCJjcmVhdGVEcmFmdCIsImZpbmlzaERyYWZ0IiwiYXBwbHlQYXRjaGVzIiwicGF0aCIsIm9wIiwiJCIsInV0IiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsInNwbGl0IiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImluZGV4T2YiLCJkaXNwYXRjaCIsImFjdGlvbiIsInR5cGUiLCJsaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJ1bnN1YnNjcmliZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsIl9rZXkiLCJhcmciLCJyZWR1Y2UiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsImRlZmF1bHRFcXVhbGl0eUNoZWNrIiwiYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwiLCJlcXVhbGl0eUNoZWNrIiwicHJldiIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJtZW1vaXplIiwibWVtb2l6ZU9wdGlvbnMiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJmdW5jIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsIl9leHRlbmRzIiwiYXNzaWduIiwiX2dldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX3NldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIkRhdGUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiYXJncyIsIkNsYXNzIiwiaW5zdGFuY2UiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiZm4iLCJXcmFwcGVyIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIkFjdGlvblR5cGUiLCJNaWRkbGV3YXJlQXJyYXkiLCJfQXJyYXkiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfcHJvdG8iLCJfQXJyYXkkcHJvdG90eXBlJGNvbmMiLCJwcmVwZW5kIiwiX2xlbjIiLCJfa2V5MiIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJwYXlsb2FkIiwibWV0YSIsImVycm9yIiwibWF0Y2giLCJhc3luY0l0ZXJhdG9yIiwibWluIiwiZXJyb3JBY3Rpb24iLCJFUlJPUiIsImxvYWRpbmdBY3Rpb24iLCJMT0FESU5HIiwicmVnaXN0ZXJlZEFjdGlvbiIsIlJFR0lTVEVSRUQiLCJyZW1vdmVkQWN0aW9uIiwiUkVNT1ZFRCIsIndvcmtlcnNMb2FkZWRBY3Rpb24iLCJMT0FERUQiLCJjbGVhckVycm9yQWN0aW9uIiwiQ0xFQVJfRVJST1IiLCJzdG9yZSQiLCJyb290UmVkdWNlciIsImN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSIsIl9vcHRpb25zIiwiX29wdGlvbnMkdGh1bmsiLCJtaWRkbGV3YXJlQXJyYXkiLCJpbW11dGFibGVDaGVjayIsInNlcmlhbGl6YWJsZUNoZWNrIiwiaXNCb29sZWFuIiwiZ2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJfcmVmJHJlZHVjZXIiLCJfcmVmJG1pZGRsZXdhcmUiLCJfcmVmJGRldlRvb2xzIiwiZGV2VG9vbHMiLCJfcmVmJHByZWxvYWRlZFN0YXRlIiwiX3JlZiRlbmhhbmNlcnMiLCJlbmhhbmNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwic3RhdGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImNvbWJpbmVSZWR1Y2VycyIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImZpbmFsQ29tcG9zZSIsInRyYWNlIiwic3RvcmVFbmhhbmNlcnMiLCJjb25maWd1cmVTdG9yZSIsImluaXRpYWxTdGF0ZSIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiYWN0aW9uTWF0Y2hlcnMiLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJidWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25zTWFwIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwiY2FzZVJlZHVjZXJzIiwiX3JlZjMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImRyYWZ0IiwiX3Jlc3VsdCIsImNyZWF0ZVJlZHVjZXIiLCJsb2FkaW5nIiwid29ya2VycyIsIndvcmtlciIsInBob3RvIiwiYmlvIiwiYWdlIiwiYWRkcmVzcyIsImlkeCIsImZpbmRJbmRleCIsImVuZHBvaW50IiwianNvbiIsImhlYWRlcnMiLCJjb25maWciLCJtZXRob2QiLCJjdXN0b21Db25mIiwiYm9keSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJzdGF0dXNUZXh0IiwicmVqZWN0IiwibWVzc2FnZSIsInBvc3QiLCJwdXQiLCJkZWwiLCJnZXRFbGVtZW50QnlJZCIsImVycm9yVHh0IiwibG9hZGluZ1R4dCIsInJlbmRlciIsInRleHRDb250ZW50IiwiZGlzcGxheSIsImlubmVySFRNTCIsImxpIiwicm12QnRuIiwiaW5uZXJUZXh0Iiwib25jbGljayIsIm9uc3VibWl0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZpbGVzIiwicmVzZXQiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEs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M0IsQ0FBbUJBLEdBQ3hDNk4sRUFBUzJGLEdBQWlCb0UsSUFDMUIsTUFBT2xaLEdBQ1BtUCxFQUFTdUYsR0FBWSxzQkFBc0JwVCxFQUFLYixlRHdCaEQsR0FBS2tiLFNBaEJIckcsR0FBT25HLFNBQVN1RixHQUFZLGdDQXFCbENZLEdBQU92RyxXQUFVLEtBRWZnTSxHQURjekYsR0FBT3hHLGVBSXZCaU0sR0FEY3pGLEdBQU94RyxZQUdyQndHLEdBQU9uRyxVQ3RCdUJBLEdBQWEscUNBQ3pDQSxFQUFTeUYsTUFDVCxJQUNFLE1BQU1xRSxRQzFCRCxPQUFXLDhCRDJCaEI5SixFQUFTK0YsR0FBb0IrRCxJQUM3QixNQUFPalosR0FDUG1QLEVBQVN1RixHQUFZLHVDIiwiZmlsZSI6Indvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZWQ7XFxyXFxufVxcclxcbi5wcmltYXJ5IHtcXHJcXG4gIGNvbG9yOiBibHVlO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi93ZWJhcHAvc3JjL3dvcmtlci9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7QUFDWjtBQUNBO0VBQ0UsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5lcnJvciB7XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG4ucHJpbWFyeSB7XFxyXFxuICBjb2xvcjogYmx1ZTtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJmdW5jdGlvbiB0KHQpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkobj4xP24tMTowKSxlPTE7ZTxuO2UrKylyW2UtMV09YXJndW1lbnRzW2VdO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBpPVlbdF0sbz1pP1wiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShudWxsLHIpOmk6XCJ1bmtub3duIGVycm9yIG5yOiBcIit0O3Rocm93IEVycm9yKFwiW0ltbWVyXSBcIitvKX10aHJvdyBFcnJvcihcIltJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6IFwiK3QrKHIubGVuZ3RoP1wiIFwiK3IubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cIidcIit0K1wiJ1wifSkpLmpvaW4oXCIsXCIpOlwiXCIpK1wiLiBGaW5kIHRoZSBmdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmXCIpfWZ1bmN0aW9uIG4odCl7cmV0dXJuISF0JiYhIXRbUV19ZnVuY3Rpb24gcih0KXtyZXR1cm4hIXQmJihmdW5jdGlvbih0KXtpZighdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQpcmV0dXJuITE7dmFyIG49T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiFufHxuPT09T2JqZWN0LnByb3RvdHlwZX0odCl8fEFycmF5LmlzQXJyYXkodCl8fCEhdFtMXXx8ISF0LmNvbnN0cnVjdG9yW0xdfHxzKHQpfHx2KHQpKX1mdW5jdGlvbiBlKHIpe3JldHVybiBuKHIpfHx0KDIzLHIpLHJbUV0udH1mdW5jdGlvbiBpKHQsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksMD09PW8odCk/KHI/T2JqZWN0LmtleXM6WikodCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ciYmXCJzeW1ib2xcIj09dHlwZW9mIGV8fG4oZSx0W2VdLHQpfSkpOnQuZm9yRWFjaCgoZnVuY3Rpb24ocixlKXtyZXR1cm4gbihlLHIsdCl9KSl9ZnVuY3Rpb24gbyh0KXt2YXIgbj10W1FdO3JldHVybiBuP24uaT4zP24uaS00Om4uaTpBcnJheS5pc0FycmF5KHQpPzE6cyh0KT8yOnYodCk/MzowfWZ1bmN0aW9uIHUodCxuKXtyZXR1cm4gMj09PW8odCk/dC5oYXMobik6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbil9ZnVuY3Rpb24gYSh0LG4pe3JldHVybiAyPT09byh0KT90LmdldChuKTp0W25dfWZ1bmN0aW9uIGYodCxuLHIpe3ZhciBlPW8odCk7Mj09PWU/dC5zZXQobixyKTozPT09ZT8odC5kZWxldGUobiksdC5hZGQocikpOnRbbl09cn1mdW5jdGlvbiBjKHQsbil7cmV0dXJuIHQ9PT1uPzAhPT10fHwxL3Q9PTEvbjp0IT10JiZuIT1ufWZ1bmN0aW9uIHModCl7cmV0dXJuIFgmJnQgaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdih0KXtyZXR1cm4gcSYmdCBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKHQpe3JldHVybiB0Lm98fHQudH1mdW5jdGlvbiBsKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpO3ZhciBuPXR0KHQpO2RlbGV0ZSBuW1FdO2Zvcih2YXIgcj1aKG4pLGU9MDtlPHIubGVuZ3RoO2UrKyl7dmFyIGk9cltlXSxvPW5baV07ITE9PT1vLndyaXRhYmxlJiYoby53cml0YWJsZT0hMCxvLmNvbmZpZ3VyYWJsZT0hMCksKG8uZ2V0fHxvLnNldCkmJihuW2ldPXtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsZW51bWVyYWJsZTpvLmVudW1lcmFibGUsdmFsdWU6dFtpXX0pfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSxuKX1mdW5jdGlvbiBkKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx5KHQpfHxuKHQpfHwhcih0KT90OihvKHQpPjEmJih0LnNldD10LmFkZD10LmNsZWFyPXQuZGVsZXRlPWgpLE9iamVjdC5mcmVlemUodCksZSYmaSh0LChmdW5jdGlvbih0LG4pe3JldHVybiBkKG4sITApfSksITApLHQpfWZ1bmN0aW9uIGgoKXt0KDIpfWZ1bmN0aW9uIHkodCl7cmV0dXJuIG51bGw9PXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0fHxPYmplY3QuaXNGcm96ZW4odCl9ZnVuY3Rpb24gYihuKXt2YXIgcj1udFtuXTtyZXR1cm4gcnx8dCgxOCxuKSxyfWZ1bmN0aW9uIG0odCxuKXtudFt0XXx8KG50W3RdPW4pfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHx0KDApLFV9ZnVuY3Rpb24gaih0LG4pe24mJihiKFwiUGF0Y2hlc1wiKSx0LnU9W10sdC5zPVtdLHQudj1uKX1mdW5jdGlvbiBnKHQpe3codCksdC5wLmZvckVhY2goUyksdC5wPW51bGx9ZnVuY3Rpb24gdyh0KXt0PT09VSYmKFU9dC5sKX1mdW5jdGlvbiBPKHQpe3JldHVybiBVPXtwOltdLGw6VSxoOnQsbTohMCxfOjB9fWZ1bmN0aW9uIFModCl7dmFyIG49dFtRXTswPT09bi5pfHwxPT09bi5pP24uaigpOm4uZz0hMH1mdW5jdGlvbiBQKG4sZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09biYmbiE9PWk7cmV0dXJuIGUuaC5PfHxiKFwiRVM1XCIpLlMoZSxuLG8pLG8/KGlbUV0uUCYmKGcoZSksdCg0KSkscihuKSYmKG49TShlLG4pLGUubHx8eChlLG4pKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXSxuLGUudSxlLnMpKTpuPU0oZSxpLFtdKSxnKGUpLGUudSYmZS52KGUudSxlLnMpLG4hPT1IP246dm9pZCAwfWZ1bmN0aW9uIE0odCxuLHIpe2lmKHkobikpcmV0dXJuIG47dmFyIGU9bltRXTtpZighZSlyZXR1cm4gaShuLChmdW5jdGlvbihpLG8pe3JldHVybiBBKHQsZSxuLGksbyxyKX0pLCEwKSxuO2lmKGUuQSE9PXQpcmV0dXJuIG47aWYoIWUuUClyZXR1cm4geCh0LGUudCwhMCksZS50O2lmKCFlLkkpe2UuST0hMCxlLkEuXy0tO3ZhciBvPTQ9PT1lLml8fDU9PT1lLmk/ZS5vPWwoZS5rKTplLm87aSgzPT09ZS5pP25ldyBTZXQobyk6bywoZnVuY3Rpb24obixpKXtyZXR1cm4gQSh0LGUsbyxuLGkscil9KSkseCh0LG8sITEpLHImJnQudSYmYihcIlBhdGNoZXNcIikuUihlLHIsdC51LHQucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjPT09byYmdCg1KSxuKGMpKXt2YXIgdj1NKGUsYyxzJiZpJiYzIT09aS5pJiYhdShpLkQsYSk/cy5jb25jYXQoYSk6dm9pZCAwKTtpZihmKG8sYSx2KSwhbih2KSlyZXR1cm47ZS5tPSExfWlmKHIoYykmJiF5KGMpKXtpZighZS5oLk4mJmUuXzwxKXJldHVybjtNKGUsYyksaSYmaS5BLmx8fHgoZSxjKX19ZnVuY3Rpb24geCh0LG4scil7dm9pZCAwPT09ciYmKHI9ITEpLHQuaC5OJiZ0Lm0mJmQobixyKX1mdW5jdGlvbiB6KHQsbil7dmFyIHI9dFtRXTtyZXR1cm4ocj9wKHIpOnQpW25dfWZ1bmN0aW9uIEkodCxuKXtpZihuIGluIHQpZm9yKHZhciByPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyOyl7dmFyIGU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLG4pO2lmKGUpcmV0dXJuIGU7cj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yocil9fWZ1bmN0aW9uIGsodCl7dC5QfHwodC5QPSEwLHQubCYmayh0LmwpKX1mdW5jdGlvbiBFKHQpe3Qub3x8KHQubz1sKHQudCkpfWZ1bmN0aW9uIFIodCxuLHIpe3ZhciBlPXMobik/YihcIk1hcFNldFwiKS5UKG4scik6dihuKT9iKFwiTWFwU2V0XCIpLkYobixyKTp0Lk8/ZnVuY3Rpb24odCxuKXt2YXIgcj1BcnJheS5pc0FycmF5KHQpLGU9e2k6cj8xOjAsQTpuP24uQTpfKCksUDohMSxJOiExLEQ6e30sbDpuLHQ6dCxrOm51bGwsbzpudWxsLGo6bnVsbCxDOiExfSxpPWUsbz1ydDtyJiYoaT1bZV0sbz1ldCk7dmFyIHU9UHJveHkucmV2b2NhYmxlKGksbyksYT11LnJldm9rZSxmPXUucHJveHk7cmV0dXJuIGUuaz1mLGUuaj1hLGZ9KG4scik6YihcIkVTNVwiKS5KKG4scik7cmV0dXJuKHI/ci5BOl8oKSkucC5wdXNoKGUpLGV9ZnVuY3Rpb24gRChlKXtyZXR1cm4gbihlKXx8dCgyMixlKSxmdW5jdGlvbiB0KG4pe2lmKCFyKG4pKXJldHVybiBuO3ZhciBlLHU9bltRXSxjPW8obik7aWYodSl7aWYoIXUuUCYmKHUuaTw0fHwhYihcIkVTNVwiKS5LKHUpKSlyZXR1cm4gdS50O3UuST0hMCxlPU4obixjKSx1Lkk9ITF9ZWxzZSBlPU4obixjKTtyZXR1cm4gaShlLChmdW5jdGlvbihuLHIpe3UmJmEodS50LG4pPT09cnx8ZihlLG4sdChyKSl9KSksMz09PWM/bmV3IFNldChlKTplfShlKX1mdW5jdGlvbiBOKHQsbil7c3dpdGNoKG4pe2Nhc2UgMjpyZXR1cm4gbmV3IE1hcCh0KTtjYXNlIDM6cmV0dXJuIEFycmF5LmZyb20odCl9cmV0dXJuIGwodCl9ZnVuY3Rpb24gVCgpe2Z1bmN0aW9uIHIodCxuKXt2YXIgcj1zW3RdO3JldHVybiByP3IuZW51bWVyYWJsZT1uOnNbdF09cj17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6bixnZXQ6ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmYobikscnQuZ2V0KG4sdCl9LHNldDpmdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmYocikscnQuc2V0KHIsdCxuKX19LHJ9ZnVuY3Rpb24gZSh0KXtmb3IodmFyIG49dC5sZW5ndGgtMTtuPj0wO24tLSl7dmFyIHI9dFtuXVtRXTtpZighci5QKXN3aXRjaChyLmkpe2Nhc2UgNTphKHIpJiZrKHIpO2JyZWFrO2Nhc2UgNDpvKHIpJiZrKHIpfX19ZnVuY3Rpb24gbyh0KXtmb3IodmFyIG49dC50LHI9dC5rLGU9WihyKSxpPWUubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPWVbaV07aWYobyE9PVEpe3ZhciBhPW5bb107aWYodm9pZCAwPT09YSYmIXUobixvKSlyZXR1cm4hMDt2YXIgZj1yW29dLHM9ZiYmZltRXTtpZihzP3MudCE9PWE6IWMoZixhKSlyZXR1cm4hMH19dmFyIHY9ISFuW1FdO3JldHVybiBlLmxlbmd0aCE9PVoobikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYSh0KXt2YXIgbj10Lms7aWYobi5sZW5ndGghPT10LnQubGVuZ3RoKXJldHVybiEwO3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobixuLmxlbmd0aC0xKTtyZXR1cm4hKCFyfHxyLmdldCl9ZnVuY3Rpb24gZihuKXtuLmcmJnQoMyxKU09OLnN0cmluZ2lmeShwKG4pKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKHQsbil7dmFyIGU9QXJyYXkuaXNBcnJheSh0KSxpPWZ1bmN0aW9uKHQsbil7aWYodCl7Zm9yKHZhciBlPUFycmF5KG4ubGVuZ3RoKSxpPTA7aTxuLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHIoaSwhMCkpO3JldHVybiBlfXZhciBvPXR0KG4pO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1aKG8pLGE9MDthPHUubGVuZ3RoO2ErKyl7dmFyIGY9dVthXTtvW2ZdPXIoZix0fHwhIW9bZl0uZW51bWVyYWJsZSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLG8pfShlLHQpLG89e2k6ZT81OjQsQTpuP24uQTpfKCksUDohMSxJOiExLEQ6e30sbDpuLHQ6dCxrOmksbzpudWxsLGc6ITEsQzohMX07cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLFEse3ZhbHVlOm8sd3JpdGFibGU6ITB9KSxpfSxTOmZ1bmN0aW9uKHQscixvKXtvP24ocikmJnJbUV0uQT09PXQmJmUodC5wKToodC51JiZmdW5jdGlvbiB0KG4pe2lmKG4mJlwib2JqZWN0XCI9PXR5cGVvZiBuKXt2YXIgcj1uW1FdO2lmKHIpe3ZhciBlPXIudCxvPXIuayxmPXIuRCxjPXIuaTtpZig0PT09YylpKG8sKGZ1bmN0aW9uKG4pe24hPT1RJiYodm9pZCAwIT09ZVtuXXx8dShlLG4pP2Zbbl18fHQob1tuXSk6KGZbbl09ITAsayhyKSkpfSkpLGkoZSwoZnVuY3Rpb24odCl7dm9pZCAwIT09b1t0XXx8dShvLHQpfHwoZlt0XT0hMSxrKHIpKX0pKTtlbHNlIGlmKDU9PT1jKXtpZihhKHIpJiYoayhyKSxmLmxlbmd0aD0hMCksby5sZW5ndGg8ZS5sZW5ndGgpZm9yKHZhciBzPW8ubGVuZ3RoO3M8ZS5sZW5ndGg7cysrKWZbc109ITE7ZWxzZSBmb3IodmFyIHY9ZS5sZW5ndGg7djxvLmxlbmd0aDt2KyspZlt2XT0hMDtmb3IodmFyIHA9TWF0aC5taW4oby5sZW5ndGgsZS5sZW5ndGgpLGw9MDtsPHA7bCsrKXZvaWQgMD09PWZbbF0mJnQob1tsXSl9fX19KHQucFswXSksZSh0LnApKX0sSzpmdW5jdGlvbih0KXtyZXR1cm4gND09PXQuaT9vKHQpOmEodCl9fSl9ZnVuY3Rpb24gRigpe2Z1bmN0aW9uIGUodCl7aWYoIXIodCkpcmV0dXJuIHQ7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdC5tYXAoZSk7aWYocyh0KSlyZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKHQuZW50cmllcygpKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblt0WzBdLGUodFsxXSldfSkpKTtpZih2KHQpKXJldHVybiBuZXcgU2V0KEFycmF5LmZyb20odCkubWFwKGUpKTt2YXIgbj1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSk7Zm9yKHZhciBpIGluIHQpbltpXT1lKHRbaV0pO3JldHVybiBufWZ1bmN0aW9uIGYodCl7cmV0dXJuIG4odCk/ZSh0KTp0fXZhciBjPVwiYWRkXCI7bShcIlBhdGNoZXNcIix7JDpmdW5jdGlvbihuLHIpe3JldHVybiByLmZvckVhY2goKGZ1bmN0aW9uKHIpe2Zvcih2YXIgaT1yLnBhdGgsdT1yLm9wLGY9bixzPTA7czxpLmxlbmd0aC0xO3MrKyl7dmFyIHY9byhmKSxwPWlbc107MCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8dCgyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJnQoMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJnQoMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUoci52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6dCgxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHIudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6dCgxNyx1KX19KSksbn0sUjpmdW5jdGlvbih0LG4scixlKXtzd2l0Y2godC5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCxuLHIsZSl7dmFyIG89dC50LHM9dC5vO2kodC5ELChmdW5jdGlvbih0LGkpe3ZhciB2PWEobyx0KSxwPWEocyx0KSxsPWk/dShvLHQpP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1uLmNvbmNhdCh0KTtyLnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KHQsbixyLGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsbixyLGUpe3ZhciBpPXQudCxvPXQuRCx1PXQubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSxyXTtyPXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1uLmNvbmNhdChbdl0pO3IucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1uLmNvbmNhdChbbF0pO3IucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6bi5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfSh0LG4scixlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHQsbixyLGUpe3ZhciBpPXQudCxvPXQubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbih0KXtpZighby5oYXModCkpe3ZhciBpPW4uY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTp0fSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTp0fSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKCFpLmhhcyh0KSl7dmFyIG89bi5jb25jYXQoW3VdKTtyLnB1c2goe29wOmMscGF0aDpvLHZhbHVlOnR9KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOnR9KX11Kyt9KSl9KHQsbixyLGUpfX0sTTpmdW5jdGlvbih0LG4scixlKXtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pLGUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpbXSx2YWx1ZTp0LnR9KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gbih0LG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPXR9YSh0LG4pLHQucHJvdG90eXBlPShyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9ZnVuY3Rpb24gZSh0KXt0Lm98fCh0LkQ9bmV3IE1hcCx0Lm89bmV3IE1hcCh0LnQpKX1mdW5jdGlvbiBvKHQpe3Qub3x8KHQubz1uZXcgU2V0LHQudC5mb3JFYWNoKChmdW5jdGlvbihuKXtpZihyKG4pKXt2YXIgZT1SKHQuQS5oLG4sdCk7dC5wLnNldChuLGUpLHQuby5hZGQoZSl9ZWxzZSB0Lm8uYWRkKG4pfSkpKX1mdW5jdGlvbiB1KG4pe24uZyYmdCgzLEpTT04uc3RyaW5naWZ5KHAobikpKX12YXIgYT1mdW5jdGlvbih0LG4pe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LG4pe3QuX19wcm90b19fPW59fHxmdW5jdGlvbih0LG4pe2Zvcih2YXIgciBpbiBuKW4uaGFzT3duUHJvcGVydHkocikmJih0W3JdPW5bcl0pfSkodCxuKX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gdGhpc1tRXT17aToyLGw6bixBOm4/bi5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsRDp2b2lkIDAsdDp0LGs6dGhpcyxDOiExLGc6ITF9LHRoaXN9bih0LE1hcCk7dmFyIG89dC5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKHQpe3JldHVybiBwKHRoaXNbUV0pLmhhcyh0KX0sby5zZXQ9ZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLHAocikuaGFzKHQpJiZwKHIpLmdldCh0KT09PW58fChlKHIpLGsociksci5ELnNldCh0LCEwKSxyLm8uc2V0KHQsbiksci5ELnNldCh0LCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24odCl7aWYoIXRoaXMuaGFzKHQpKXJldHVybiExO3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksZShuKSxrKG4pLG4uRC5zZXQodCwhMSksbi5vLmRlbGV0ZSh0KSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07dSh0KSxwKHQpLnNpemUmJihlKHQpLGsodCksdC5EPW5ldyBNYXAsaSh0LnQsKGZ1bmN0aW9uKG4pe3QuRC5zZXQobiwhMSl9KSksdC5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXt0LmNhbGwobixyLmdldChpKSxpLHIpfSkpfSxvLmdldD1mdW5jdGlvbih0KXt2YXIgbj10aGlzW1FdO3Uobik7dmFyIGk9cChuKS5nZXQodCk7aWYobi5JfHwhcihpKSlyZXR1cm4gaTtpZihpIT09bi50LmdldCh0KSlyZXR1cm4gaTt2YXIgbz1SKG4uQS5oLGksbik7cmV0dXJuIGUobiksbi5vLnNldCh0LG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgdCxuPXRoaXMscj10aGlzLmtleXMoKTtyZXR1cm4odD17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gbi52YWx1ZXMoKX0sdC5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ci5uZXh0KCk7cmV0dXJuIHQuZG9uZT90Ontkb25lOiExLHZhbHVlOm4uZ2V0KHQudmFsdWUpfX0sdH0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKHQ9e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIG4uZW50cmllcygpfSx0Lm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1yLm5leHQoKTtpZih0LmRvbmUpcmV0dXJuIHQ7dmFyIGU9bi5nZXQodC52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W3QudmFsdWUsZV19fSx0fSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSx0fSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOm4sQTpuP24uQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6dCxrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc31uKHQsU2V0KTt2YXIgcj10LnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksci5oYXM9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxuLm8/ISFuLm8uaGFzKHQpfHwhKCFuLnAuaGFzKHQpfHwhbi5vLmhhcyhuLnAuZ2V0KHQpKSk6bi50Lmhhcyh0KX0sci5hZGQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSx0aGlzLmhhcyh0KXx8KG8obiksayhuKSxuLm8uYWRkKHQpKSx0aGlzfSxyLmRlbGV0ZT1mdW5jdGlvbih0KXtpZighdGhpcy5oYXModCkpcmV0dXJuITE7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLGsobiksbi5vLmRlbGV0ZSh0KXx8ISFuLnAuaGFzKHQpJiZuLm8uZGVsZXRlKG4ucC5nZXQodCkpfSxyLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tRXTt1KHQpLHAodCkuc2l6ZSYmKG8odCksayh0KSx0Lm8uY2xlYXIoKSl9LHIudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSxvKHQpLHQuby52YWx1ZXMoKX0sci5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSxvKHQpLHQuby5lbnRyaWVzKCl9LHIua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHIuZm9yRWFjaD1mdW5jdGlvbih0LG4pe2Zvcih2YXIgcj10aGlzLnZhbHVlcygpLGU9ci5uZXh0KCk7IWUuZG9uZTspdC5jYWxsKG4sZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9ci5uZXh0KCl9LHR9KCk7bShcIk1hcFNldFwiLHtUOmZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBmKHQsbil9LEY6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGModCxuKX19KX1mdW5jdGlvbiBKKCl7VCgpLEMoKSxGKCl9ZnVuY3Rpb24gSyh0KXtyZXR1cm4gdH1mdW5jdGlvbiAkKHQpe3JldHVybiB0fXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24odCl7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK3R9LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbih0KXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK3R9LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbih0KXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrdH0sMTg6ZnVuY3Rpb24odCl7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrdCtcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIit0K1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKHQpe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrdCtcIidcIn0sMjI6ZnVuY3Rpb24odCl7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK3R9LDIzOmZ1bmN0aW9uKHQpe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrdH0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3Qub3duS2V5cz9SZWZsZWN0Lm93bktleXM6dm9pZCAwIT09T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCkpfTpPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyx0dD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc3x8ZnVuY3Rpb24odCl7dmFyIG49e307cmV0dXJuIFoodCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7bltyXT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscil9KSksbn0sbnQ9e30scnQ9e2dldDpmdW5jdGlvbih0LG4pe2lmKG49PT1RKXJldHVybiB0O3ZhciBlPXAodCk7aWYoIXUoZSxuKSlyZXR1cm4gZnVuY3Rpb24odCxuLHIpe3ZhciBlLGk9SShuLHIpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwodC5rKTp2b2lkIDB9KHQsZSxuKTt2YXIgaT1lW25dO3JldHVybiB0Lkl8fCFyKGkpP2k6aT09PXoodC50LG4pPyhFKHQpLHQub1tuXT1SKHQuQS5oLGksdCkpOml9LGhhczpmdW5jdGlvbih0LG4pe3JldHVybiBuIGluIHAodCl9LG93bktleXM6ZnVuY3Rpb24odCl7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKHQpKX0sc2V0OmZ1bmN0aW9uKHQsbixyKXt2YXIgZT1JKHAodCksbik7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwodC5rLHIpLCEwO2lmKCF0LlApe3ZhciBpPXoocCh0KSxuKSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09cilyZXR1cm4gdC5vW25dPXIsdC5EW25dPSExLCEwO2lmKGMocixpKSYmKHZvaWQgMCE9PXJ8fHUodC50LG4pKSlyZXR1cm4hMDtFKHQpLGsodCl9cmV0dXJuIHQub1tuXT1yLHQuRFtuXT0hMCwhMH0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24odCxuKXtyZXR1cm4gdm9pZCAwIT09eih0LnQsbil8fG4gaW4gdC50Pyh0LkRbbl09ITEsRSh0KSxrKHQpKTpkZWxldGUgdC5EW25dLHQubyYmZGVsZXRlIHQub1tuXSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKHQsbil7dmFyIHI9cCh0KSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsbik7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09dC5pfHxcImxlbmd0aFwiIT09bixlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTpyW25dfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe3QoMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHQudCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7dCgxMil9fSxldD17fTtpKHJ0LChmdW5jdGlvbih0LG4pe2V0W3RdPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLGV0LmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKG4scil7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQocikpJiZ0KDEzKSxydC5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsblswXSxyKX0sZXQuc2V0PWZ1bmN0aW9uKG4scixlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09ciYmaXNOYU4ocGFyc2VJbnQocikpJiZ0KDE0KSxydC5zZXQuY2FsbCh0aGlzLG5bMF0scixlLG5bMF0pfTt2YXIgaXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3RoaXMuTz1CLHRoaXMuTj0hMCxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnQudXNlUHJveGllcykmJnRoaXMuc2V0VXNlUHJveGllcyh0LnVzZVByb3hpZXMpLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dC5hdXRvRnJlZXplKSYmdGhpcy5zZXRBdXRvRnJlZXplKHQuYXV0b0ZyZWV6ZSksdGhpcy5wcm9kdWNlPXRoaXMucHJvZHVjZS5iaW5kKHRoaXMpLHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPXRoaXMucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQodGhpcyl9dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkucHJvZHVjZT1mdW5jdGlvbihuLGUsaSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSl7dmFyIG89ZTtlPW47dmFyIHU9dGhpcztyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dGhpczt2b2lkIDA9PT10JiYodD1vKTtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHI+MT9yLTE6MCksYT0xO2E8cjthKyspaVthLTFdPWFyZ3VtZW50c1thXTtyZXR1cm4gdS5wcm9kdWNlKHQsKGZ1bmN0aW9uKHQpe3ZhciByO3JldHVybihyPWUpLmNhbGwuYXBwbHkocixbbix0XS5jb25jYXQoaSkpfSkpfX12YXIgYTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZ0KDYpLHZvaWQgMCE9PWkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJnQoNykscihuKSl7dmFyIGY9Tyh0aGlzKSxjPVIodGhpcyxuLHZvaWQgMCkscz0hMDt0cnl7YT1lKGMpLHM9ITF9ZmluYWxseXtzP2coZik6dyhmKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmYSBpbnN0YW5jZW9mIFByb21pc2U/YS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gaihmLGkpLFAodCxmKX0pLChmdW5jdGlvbih0KXt0aHJvdyBnKGYpLHR9KSk6KGooZixpKSxQKGEsZikpfWlmKCFufHxcIm9iamVjdFwiIT10eXBlb2Ygbil7aWYoKGE9ZShuKSk9PT1IKXJldHVybjtyZXR1cm4gdm9pZCAwPT09YSYmKGE9biksdGhpcy5OJiZkKGEsITApLGF9dCgyMSxuKX0saS5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24odCxuKXt2YXIgcixlLGk9dGhpcztyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2Z1bmN0aW9uKG4pe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLGU9QXJyYXkocj4xP3ItMTowKSxvPTE7bzxyO28rKyllW28tMV09YXJndW1lbnRzW29dO3JldHVybiBpLnByb2R1Y2VXaXRoUGF0Y2hlcyhuLChmdW5jdGlvbihuKXtyZXR1cm4gdC5hcHBseSh2b2lkIDAsW25dLmNvbmNhdChlKSl9KSl9Olt0aGlzLnByb2R1Y2UodCxuLChmdW5jdGlvbih0LG4pe3I9dCxlPW59KSkscixlXX0saS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXtyKGUpfHx0KDgpLG4oZSkmJihlPUQoZSkpO3ZhciBpPU8odGhpcyksbz1SKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsdyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKG4scil7dmFyIGU9biYmbltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHx0KDkpLGUuSSYmdCgxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHIpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24odCl7dGhpcy5OPXR9LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihuKXtuJiYhQiYmdCgyMCksdGhpcy5PPW59LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKHQscil7dmFyIGU7Zm9yKGU9ci5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9cltlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXt0PWkudmFsdWU7YnJlYWt9fXZhciBvPWIoXCJQYXRjaGVzXCIpLiQ7cmV0dXJuIG4odCk/byh0LHIpOnRoaXMucHJvZHVjZSh0LChmdW5jdGlvbih0KXtyZXR1cm4gbyh0LHIuc2xpY2UoZSsxKSl9KSl9LGV9KCksb3Q9bmV3IGl0LHV0PW90LnByb2R1Y2UsYXQ9b3QucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQob3QpLGZ0PW90LnNldEF1dG9GcmVlemUuYmluZChvdCksY3Q9b3Quc2V0VXNlUHJveGllcy5iaW5kKG90KSxzdD1vdC5hcHBseVBhdGNoZXMuYmluZChvdCksdnQ9b3QuY3JlYXRlRHJhZnQuYmluZChvdCkscHQ9b3QuZmluaXNoRHJhZnQuYmluZChvdCk7ZXhwb3J0IGRlZmF1bHQgdXQ7ZXhwb3J0e2l0IGFzIEltbWVyLHN0IGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsdnQgYXMgY3JlYXRlRHJhZnQsRCBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxUIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxGIGFzIGVuYWJsZVBhdGNoZXMscHQgYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsbiBhcyBpc0RyYWZ0LHIgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsdXQgYXMgcHJvZHVjZSxhdCBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsZnQgYXMgc2V0QXV0b0ZyZWV6ZSxjdCBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBwcmV2LCBuZXh0KSB7XG4gIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRG8gdGhpcyBpbiBhIGZvciBsb29wIChhbmQgbm90IGEgYGZvckVhY2hgIG9yIGFuIGBldmVyeWApIHNvIHdlIGNhbiBkZXRlcm1pbmUgZXF1YWxpdHkgYXMgZmFzdCBhcyBwb3NzaWJsZS5cbiAgdmFyIGxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbGl0eUNoZWNrKHByZXZbaV0sIG5leHRbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jKSB7XG4gIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RXF1YWxpdHlDaGVjaztcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgbGFzdEFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICB2YXIgbGVuZ3RoID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgYW5kIG11dGF0ZSBhIGxvY2FsIGxpc3Qgb2YgcGFyYW1zIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IucmVzdWx0RnVuYyA9IHJlc3VsdEZ1bmM7XG4gICAgc2VsZWN0b3IuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycykge1xuICB2YXIgc2VsZWN0b3JDcmVhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjcmVhdGVTZWxlY3RvcjtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKCd3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAnICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIHZhbHVlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufSIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0LCBjdXJyZW50LCBpc0RyYWZ0YWJsZSwgZW5hYmxlRVM1IH0gZnJvbSAnaW1tZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVOZXh0U3RhdGUsIGN1cnJlbnQsIGZyZWV6ZSB9IGZyb20gJ2ltbWVyJztcbmltcG9ydCB7IGNvbXBvc2UsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcbmV4cG9ydCAqIGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuZXhwb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCc7XG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJztcblxuLyoqXHJcbiAqIFwiRHJhZnQtU2FmZVwiIHZlcnNpb24gb2YgYHJlc2VsZWN0YCdzIGBjcmVhdGVTZWxlY3RvcmA6XHJcbiAqIElmIGFuIGBpbW1lcmAtZHJhZnRlZCBvYmplY3QgaXMgcGFzc2VkIGludG8gdGhlIHJlc3VsdGluZyBzZWxlY3RvcidzIGZpcnN0IGFyZ3VtZW50LFxyXG4gKiB0aGUgc2VsZWN0b3Igd2lsbCBhY3Qgb24gdGhlIGN1cnJlbnQgZHJhZnQgdmFsdWUsIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgY2FjaGVkIHZhbHVlXHJcbiAqIHRoYXQgbWlnaHQgYmUgcG9zc2libHkgb3V0ZGF0ZWQgaWYgdGhlIGRyYWZ0IGhhcyBiZWVuIG1vZGlmaWVkIHNpbmNlLlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcigpIHtcbiAgdmFyIHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gIHZhciB3cmFwcGVkU2VsZWN0b3IgPSBmdW5jdGlvbiB3cmFwcGVkU2VsZWN0b3IodmFsdWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXS5jb25jYXQocmVzdCkpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XG59O1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0JykgcmV0dXJuIGNvbXBvc2U7XG4gIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgXCJwbGFpblwiIG9iamVjdCwgaS5lLiBhbiBvYmplY3Qgd2hvc2VcclxuICogcHJvdG95cGUgaXMgdGhlIHJvb3QgYE9iamVjdC5wcm90b3R5cGVgLiBUaGlzIGluY2x1ZGVzIG9iamVjdHMgY3JlYXRlZFxyXG4gKiB1c2luZyBvYmplY3QgbGl0ZXJhbHMsIGJ1dCBub3QgZm9yIGluc3RhbmNlIGZvciBjbGFzcyBpbnN0YW5jZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IHZhbHVlO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IHByb3RvO1xufVxuXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcbiAgdmFyIGVsYXBzZWQgPSAwO1xuICByZXR1cm4ge1xuICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiBtZWFzdXJlVGltZShmbikge1xuICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XG4gICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uIHdhcm5JZkV4Y2VlZGVkKCkge1xuICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xuICAgICAgICBjb25zb2xlLndhcm4oZm5OYW1lICsgXCIgdG9vayBcIiArIGVsYXBzZWQgKyBcIm1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mIFwiICsgbWF4RGVsYXkgKyBcIm1zLiBcXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXFxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG52YXIgTWlkZGxld2FyZUFycmF5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQXJyYXkpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWlkZGxld2FyZUFycmF5LCBfQXJyYXkpO1xuXG4gIGZ1bmN0aW9uIE1pZGRsZXdhcmVBcnJheSgpIHtcbiAgICByZXR1cm4gX0FycmF5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIF9BcnJheSRwcm90b3R5cGUkY29uYztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnIgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcnJbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCAoX0FycmF5JHByb3RvdHlwZSRjb25jID0gX0FycmF5LnByb3RvdHlwZS5jb25jYXQpLmNhbGwuYXBwbHkoX0FycmF5JHByb3RvdHlwZSRjb25jLCBbdGhpc10uY29uY2F0KGFycikpKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcnIgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFycltfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCBhcnJbMF0uY29uY2F0KHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdChNaWRkbGV3YXJlQXJyYXksIGFyci5jb25jYXQodGhpcykpO1xuICB9O1xuXG4gIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XG59KFxuLyojX19QVVJFX18qL1xuX3dyYXBOYXRpdmVTdXBlcihBcnJheSkpO1xuXG52YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7IC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBjb25kaXRpb24gZmFpbHNcbi8vIFN0cmlwIG91dCBlcnJvciBtZXNzYWdlcyBmb3IgcHJvZHVjdGlvblxuLy8gPiBOb3QgcHJvdmlkaW5nIGFuIGlubGluZSBkZWZhdWx0IGFyZ3VtZW50IGZvciBtZXNzYWdlIGFzIHRoZSByZXN1bHQgaXMgc21hbGxlclxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ29uZGl0aW9uIG5vdCBwYXNzZWRcbiAgLy8gSW4gcHJvZHVjdGlvbiB3ZSBzdHJpcCB0aGUgbWVzc2FnZSBidXQgc3RpbGwgdGhyb3dcblxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSAvLyBXaGVuIG5vdCBpbiBwcm9kdWN0aW9uIHdlIGFsbG93IHRoZSBtZXNzYWdlIHRvIHBhc3MgdGhyb3VnaFxuICAvLyAqVGhpcyBibG9jayB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMqXG5cblxuICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcbiAgdmFyIHN0YWNrID0gW10sXG4gICAgICBrZXlzID0gW107XG4gIGlmICghZGVjeWNsZXIpIGRlY3ljbGVyID0gZnVuY3Rpb24gZGVjeWNsZXIoXywgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gJ1tDaXJjdWxhciB+XSc7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXIgfi4nICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbignLicpICsgJ10nO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xuICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcbiAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcbiAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Ugc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gIH07XG59XG4vKipcclxuICogVGhlIGRlZmF1bHQgYGlzSW1tdXRhYmxlYCBmdW5jdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XG4gIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XG4gIHJldHVybiB7XG4gICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoKSB7XG4gICAgICByZXR1cm4gX2RldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqLCBwYXRoKSB7XG4gIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlUGF0aHMgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICB2YXIgdHJhY2tlZCA9IHtcbiAgICB2YWx1ZTogb2JqXG4gIH07XG5cbiAgaWYgKCFpc0ltbXV0YWJsZShvYmopKSB7XG4gICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguY29uY2F0KGtleSk7XG5cbiAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGguam9pbignLicpKSAhPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cmFja2VkO1xufVxuXG5mdW5jdGlvbiBfZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LCBvYmosIHNhbWVQYXJlbnRSZWYsIHBhdGgpIHtcbiAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVQYXRocyA9IFtdO1xuICB9XG5cbiAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkge1xuICAgIHNhbWVQYXJlbnRSZWYgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICB2YXIgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XG5cbiAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IHRydWUsXG4gICAgICBwYXRoOiBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBHYXRoZXIgYWxsIGtleXMgZnJvbSBwcmV2ICh0cmFja2VkKSBhbmQgYWZ0ZXIgb2Jqc1xuXG5cbiAgdmFyIGtleXNUb0RldGVjdCA9IHt9O1xuICBPYmplY3Qua2V5cyh0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xuICB9KTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhrZXlzVG9EZXRlY3QpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLmNvbmNhdChrZXkpO1xuXG4gICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aC5qb2luKCcuJykpICE9PSAtMSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IF9kZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIGNoaWxkUGF0aCk7XG5cbiAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICB9O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtaWRkbGV3YXJlIHRoYXQgY2hlY2tzIHdoZXRoZXIgYW55IHN0YXRlIHdhcyBtdXRhdGVkIGluIGJldHdlZW5cclxuICogZGlzcGF0Y2hlcyBvciBkdXJpbmcgYSBkaXNwYXRjaC4gSWYgYW55IG11dGF0aW9ucyBhcmUgZGV0ZWN0ZWQsIGFuIGVycm9yIGlzXHJcbiAqIHRocm93bi5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgTWlkZGxld2FyZSBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGlzSW1tdXRhYmxlID0gX29wdGlvbnMuaXNJbW11dGFibGUsXG4gICAgICBpc0ltbXV0YWJsZSA9IF9vcHRpb25zJGlzSW1tdXRhYmxlID09PSB2b2lkIDAgPyBpc0ltbXV0YWJsZURlZmF1bHQgOiBfb3B0aW9ucyRpc0ltbXV0YWJsZSxcbiAgICAgIGlnbm9yZWRQYXRocyA9IF9vcHRpb25zLmlnbm9yZWRQYXRocyxcbiAgICAgIF9vcHRpb25zJHdhcm5BZnRlciA9IF9vcHRpb25zLndhcm5BZnRlcixcbiAgICAgIHdhcm5BZnRlciA9IF9vcHRpb25zJHdhcm5BZnRlciA9PT0gdm9pZCAwID8gMzIgOiBfb3B0aW9ucyR3YXJuQWZ0ZXIsXG4gICAgICBpZ25vcmUgPSBfb3B0aW9ucy5pZ25vcmU7IC8vIEFsaWFzIGlnbm9yZS0+aWdub3JlZFBhdGhzLCBidXQgcHJlZmVyIGlnbm9yZWRQYXRocyBpZiBwcmVzZW50XG5cbiAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcbiAgdmFyIHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgIHZhciB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsICdJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTsgLy8gVHJhY2sgYmVmb3JlIHBvdGVudGlhbGx5IG5vdCBtZWV0aW5nIHRoZSBpbnZhcmlhbnRcblxuICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICAgICAgISFyZXN1bHQud2FzTXV0YXRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICdcIiArIChyZXN1bHQucGF0aCB8fCBbXSkuam9pbignLicpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHJvdWJsZXNob290aW5nI25ldmVyLW11dGF0ZS1yZWR1Y2VyLWFyZ3VtZW50cylcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7IC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XG5cbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgIHJlc3VsdC53YXNNdXRhdGVkICYmICghIXJlc3VsdC53YXNNdXRhdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogXCIgKyAocmVzdWx0LnBhdGggfHwgW10pLmpvaW4oJy4nKSArIFwiLiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uIFwiICsgc3RyaW5naWZ5KGFjdGlvbikgKyBcIi4gKGh0dHBzOi8vcmVkdXguanMub3JnL3Ryb3VibGVzaG9vdGluZyNuZXZlci1tdXRhdGUtcmVkdWNlci1hcmd1bWVudHMpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyBcInBsYWluXCIsIGkuZS4gYSB2YWx1ZSB0aGF0IGlzIGVpdGhlclxyXG4gKiBkaXJlY3RseSBKU09OLXNlcmlhbGl6YWJsZSAoYm9vbGVhbiwgbnVtYmVyLCBzdHJpbmcsIGFycmF5LCBwbGFpbiBvYmplY3QpXHJcbiAqIG9yIGB1bmRlZmluZWRgLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZSB0byBjaGVjay5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnIHx8IHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcbn1cbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBbXTtcbiAgfVxuXG4gIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluO1xuICB9XG5cbiAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlZFBhdGhzID0gW107XG4gIH1cblxuICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XG5cbiAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5UGF0aDogcGF0aC5qb2luKCcuJykgfHwgJzxyb290PicsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xuICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZW50cmllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgIH1cblxuICAgIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICAgIHByb3BlcnR5ID0gX3JlZjJbMF0sXG4gICAgICAgIG5lc3RlZFZhbHVlID0gX3JlZjJbMV07XG4gICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoLmNvbmNhdChwcm9wZXJ0eSk7XG5cbiAgICBpZiAoaGFzSWdub3JlZFBhdGhzICYmIGlnbm9yZWRQYXRocy5pbmRleE9mKG5lc3RlZFBhdGguam9pbignLicpKSA+PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aC5qb2luKCcuJyksXG4gICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xuXG4gICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWlkZGxld2FyZSB0aGF0LCBhZnRlciBldmVyeSBzdGF0ZSBjaGFuZ2UsIGNoZWNrcyBpZiB0aGUgbmV3XHJcbiAqIHN0YXRlIGlzIHNlcmlhbGl6YWJsZS4gSWYgYSBub24tc2VyaWFsaXphYmxlIHZhbHVlIGlzIGZvdW5kIHdpdGhpbiB0aGVcclxuICogc3RhdGUsIGFuIGVycm9yIGlzIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE1pZGRsZXdhcmUgb3B0aW9ucy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaXNTZXJpYWxpemFiID0gX29wdGlvbnMuaXNTZXJpYWxpemFibGUsXG4gICAgICBpc1NlcmlhbGl6YWJsZSA9IF9vcHRpb25zJGlzU2VyaWFsaXphYiA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9vcHRpb25zJGlzU2VyaWFsaXphYixcbiAgICAgIGdldEVudHJpZXMgPSBfb3B0aW9ucy5nZXRFbnRyaWVzLFxuICAgICAgX29wdGlvbnMkaWdub3JlZEFjdGlvID0gX29wdGlvbnMuaWdub3JlZEFjdGlvbnMsXG4gICAgICBpZ25vcmVkQWN0aW9ucyA9IF9vcHRpb25zJGlnbm9yZWRBY3RpbyA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRpZ25vcmVkQWN0aW8sXG4gICAgICBfb3B0aW9ucyRpZ25vcmVkQWN0aW8yID0gX29wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLFxuICAgICAgaWdub3JlZEFjdGlvblBhdGhzID0gX29wdGlvbnMkaWdub3JlZEFjdGlvMiA9PT0gdm9pZCAwID8gWydtZXRhLmFyZyddIDogX29wdGlvbnMkaWdub3JlZEFjdGlvMixcbiAgICAgIF9vcHRpb25zJGlnbm9yZWRQYXRocyA9IF9vcHRpb25zLmlnbm9yZWRQYXRocyxcbiAgICAgIGlnbm9yZWRQYXRocyA9IF9vcHRpb25zJGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRpZ25vcmVkUGF0aHMsXG4gICAgICBfb3B0aW9ucyR3YXJuQWZ0ZXIgPSBfb3B0aW9ucy53YXJuQWZ0ZXIsXG4gICAgICB3YXJuQWZ0ZXIgPSBfb3B0aW9ucyR3YXJuQWZ0ZXIgPT09IHZvaWQgMCA/IDMyIDogX29wdGlvbnMkd2FybkFmdGVyO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsICdTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShhY3Rpb24sIFtdLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcblxuICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsICdcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiAnLCBhY3Rpb24sICdcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKScsICdcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoc3RhdGUsIFtdLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcblxuICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xuICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGFueSBhcnJheSBjb250YWluaW5nIHRoZSBkZWZhdWx0IG1pZGRsZXdhcmUgaW5zdGFsbGVkIGJ5XHJcbiAqIGBjb25maWd1cmVTdG9yZSgpYC4gVXNlZnVsIGlmIHlvdSB3YW50IHRvIGNvbmZpZ3VyZSB5b3VyIHN0b3JlIHdpdGggYSBjdXN0b21cclxuICogYG1pZGRsZXdhcmVgIGFycmF5IGJ1dCBzdGlsbCBrZWVwIHRoZSBkZWZhdWx0IHNldC5cclxuICpcclxuICogQHJldHVybiBUaGUgZGVmYXVsdCBtaWRkbGV3YXJlIHVzZWQgYnkgYGNvbmZpZ3VyZVN0b3JlKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkdGh1bmsgPSBfb3B0aW9ucy50aHVuayxcbiAgICAgIHRodW5rID0gX29wdGlvbnMkdGh1bmsgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0aHVuayxcbiAgICAgIF9vcHRpb25zJGltbXV0YWJsZUNoZSA9IF9vcHRpb25zLmltbXV0YWJsZUNoZWNrLFxuICAgICAgaW1tdXRhYmxlQ2hlY2sgPSBfb3B0aW9ucyRpbW11dGFibGVDaGUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRpbW11dGFibGVDaGUsXG4gICAgICBfb3B0aW9ucyRzZXJpYWxpemFibGUgPSBfb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjayxcbiAgICAgIHNlcmlhbGl6YWJsZUNoZWNrID0gX29wdGlvbnMkc2VyaWFsaXphYmxlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2VyaWFsaXphYmxlO1xuICB2YXIgbWlkZGxld2FyZUFycmF5ID0gbmV3IE1pZGRsZXdhcmVBcnJheSgpO1xuXG4gIGlmICh0aHVuaykge1xuICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XG4gICAgICAvKiBQUk9EX1NUQVJUX1JFTU9WRV9VTUQgKi9cbiAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XG5cbiAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xuICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XG4gICAgICB9XG5cbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XG4gICAgICAvKiBQUk9EX1NUT1BfUkVNT1ZFX1VNRCAqL1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xuICAgICAgdmFyIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSB7fTtcblxuICAgICAgaWYgKCFpc0Jvb2xlYW4oc2VyaWFsaXphYmxlQ2hlY2spKSB7XG4gICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcbiAgICAgIH1cblxuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2goY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKHNlcmlhbGl6YWJsZU9wdGlvbnMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWlkZGxld2FyZUFycmF5O1xufVxuXG52YXIgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG4vKipcclxuICogQSBmcmllbmRseSBhYnN0cmFjdGlvbiBvdmVyIHRoZSBzdGFuZGFyZCBSZWR1eCBgY3JlYXRlU3RvcmUoKWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBjb25maWcgVGhlIHN0b3JlIGNvbmZpZ3VyYXRpb24uXHJcbiAqIEByZXR1cm5zIEEgY29uZmlndXJlZCBSZWR1eCBzdG9yZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xuICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xuXG4gIHZhciBfcmVmID0gb3B0aW9ucyB8fCB7fSxcbiAgICAgIF9yZWYkcmVkdWNlciA9IF9yZWYucmVkdWNlcixcbiAgICAgIHJlZHVjZXIgPSBfcmVmJHJlZHVjZXIgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVkdWNlcixcbiAgICAgIF9yZWYkbWlkZGxld2FyZSA9IF9yZWYubWlkZGxld2FyZSxcbiAgICAgIG1pZGRsZXdhcmUgPSBfcmVmJG1pZGRsZXdhcmUgPT09IHZvaWQgMCA/IGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSgpIDogX3JlZiRtaWRkbGV3YXJlLFxuICAgICAgX3JlZiRkZXZUb29scyA9IF9yZWYuZGV2VG9vbHMsXG4gICAgICBkZXZUb29scyA9IF9yZWYkZGV2VG9vbHMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGRldlRvb2xzLFxuICAgICAgX3JlZiRwcmVsb2FkZWRTdGF0ZSA9IF9yZWYucHJlbG9hZGVkU3RhdGUsXG4gICAgICBwcmVsb2FkZWRTdGF0ZSA9IF9yZWYkcHJlbG9hZGVkU3RhdGUgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkcHJlbG9hZGVkU3RhdGUsXG4gICAgICBfcmVmJGVuaGFuY2VycyA9IF9yZWYuZW5oYW5jZXJzLFxuICAgICAgZW5oYW5jZXJzID0gX3JlZiRlbmhhbmNlcnMgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkZW5oYW5jZXJzO1xuXG4gIHZhciByb290UmVkdWNlcjtcblxuICBpZiAodHlwZW9mIHJlZHVjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByb290UmVkdWNlciA9IHJlZHVjZXI7XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xuICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJyZWR1Y2VyXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMnKTtcbiAgfVxuXG4gIHZhciBtaWRkbGV3YXJlRW5oYW5jZXIgPSBhcHBseU1pZGRsZXdhcmUuYXBwbHkodm9pZCAwLCB0eXBlb2YgbWlkZGxld2FyZSA9PT0gJ2Z1bmN0aW9uJyA/IG1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKSA6IG1pZGRsZXdhcmUpO1xuICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTtcblxuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9leHRlbmRzKHtcbiAgICAgIC8vIEVuYWJsZSBjYXB0dXJlIG9mIHN0YWNrIHRyYWNlcyBmb3IgZGlzcGF0Y2hlZCBSZWR1eCBhY3Rpb25zXG4gICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT05cbiAgICB9LCB0eXBlb2YgZGV2VG9vbHMgPT09ICdvYmplY3QnICYmIGRldlRvb2xzKSk7XG4gIH1cblxuICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShlbmhhbmNlcnMpKSB7XG4gICAgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXS5jb25jYXQoZW5oYW5jZXJzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3RvcmVFbmhhbmNlcnMgPSBlbmhhbmNlcnMoc3RvcmVFbmhhbmNlcnMpO1xuICB9XG5cbiAgdmFyIGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UuYXBwbHkodm9pZCAwLCBzdG9yZUVuaGFuY2Vycyk7XG4gIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xuICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKCkge1xuICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XG4gICAgICB2YXIgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKCFwcmVwYXJlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWRcbiAgICAgIH0sICdtZXRhJyBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgIG1ldGE6IHByZXBhcmVkLm1ldGFcbiAgICAgIH0sIHt9LCAnZXJyb3InIGluIHByZXBhcmVkICYmIHtcbiAgICAgICAgZXJyb3I6IHByZXBhcmVkLmVycm9yXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHBheWxvYWQ6IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXVxuICAgIH07XG4gIH1cblxuICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIlwiICsgdHlwZTtcbiAgfTtcblxuICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xuXG4gIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlO1xuICB9O1xuXG4gIHJldHVybiBhY3Rpb25DcmVhdG9yO1xufVxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSAnc3RyaW5nJyAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWyd0eXBlJywgJ3BheWxvYWQnLCAnZXJyb3InLCAnbWV0YSddLmluZGV4T2Yoa2V5KSA+IC0xO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGFjdGlvbiB0eXBlIG9mIHRoZSBhY3Rpb25zIGNyZWF0ZWQgYnkgdGhlIHBhc3NlZFxyXG4gKiBgY3JlYXRlQWN0aW9uKClgLWdlbmVyYXRlZCBhY3Rpb24gY3JlYXRvciAoYXJiaXRyYXJ5IGFjdGlvbiBjcmVhdG9yc1xyXG4gKiBhcmUgbm90IHN1cHBvcnRlZCkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhY3Rpb24gVGhlIGFjdGlvbiBjcmVhdG9yIHdob3NlIGFjdGlvbiB0eXBlIHRvIGdldC5cclxuICogQHJldHVybnMgVGhlIGFjdGlvbiB0eXBlIHVzZWQgYnkgdGhlIGFjdGlvbiBjcmVhdG9yLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xuICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKGJ1aWxkZXJDYWxsYmFjaykge1xuICB2YXIgYWN0aW9uc01hcCA9IHt9O1xuICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcbiAgdmFyIGRlZmF1bHRDYXNlUmVkdWNlcjtcbiAgdmFyIGJ1aWxkZXIgPSB7XG4gICAgYWRkQ2FzZTogZnVuY3Rpb24gYWRkQ2FzZSh0eXBlT3JBY3Rpb25DcmVhdG9yLCByZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvKlxyXG4gICAgICAgICB0byBrZWVwIHRoZSBkZWZpbml0aW9uIGJ5IHRoZSB1c2VyIGluIGxpbmUgd2l0aCBhY3R1YWwgYmVoYXZpb3IsXHJcbiAgICAgICAgIHdlIGVuZm9yY2UgYGFkZENhc2VgIHRvIGFsd2F5cyBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGFkZE1hdGNoZXJgXHJcbiAgICAgICAgIGFzIG1hdGNoaW5nIGNhc2VzIHRha2UgcHJlY2VkZW5jZSBvdmVyIG1hdGNoZXJzXHJcbiAgICAgICAgICovXG4gICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkTWF0Y2hlcmAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSAnc3RyaW5nJyA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XG5cbiAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlJyk7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGRNYXRjaGVyOiBmdW5jdGlvbiBhZGRNYXRjaGVyKG1hdGNoZXIsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZE1hdGNoZXJgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHtcbiAgICAgICAgbWF0Y2hlcjogbWF0Y2hlcixcbiAgICAgICAgcmVkdWNlcjogcmVkdWNlclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiBhZGREZWZhdWx0Q2FzZShyZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxuICB9O1xuICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XG4gIHJldHVybiBbYWN0aW9uc01hcCwgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICBpZiAoYWN0aW9uTWF0Y2hlcnMgPT09IHZvaWQgMCkge1xuICAgIGFjdGlvbk1hdGNoZXJzID0gW107XG4gIH1cblxuICB2YXIgX3JlZiA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKSA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl0sXG4gICAgICBhY3Rpb25zTWFwID0gX3JlZlswXSxcbiAgICAgIGZpbmFsQWN0aW9uTWF0Y2hlcnMgPSBfcmVmWzFdLFxuICAgICAgZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIgPSBfcmVmWzJdO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY2FzZVJlZHVjZXJzID0gW2FjdGlvbnNNYXBbYWN0aW9uLnR5cGVdXS5jb25jYXQoZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgbWF0Y2hlciA9IF9yZWYyLm1hdGNoZXI7XG4gICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciByZWR1Y2VyID0gX3JlZjMucmVkdWNlcjtcbiAgICAgIHJldHVybiByZWR1Y2VyO1xuICAgIH0pKTtcblxuICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKGZ1bmN0aW9uIChjcikge1xuICAgICAgcmV0dXJuICEhY3I7XG4gICAgfSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xuICAgIH1cblxuICAgIHJldHVybiBjYXNlUmVkdWNlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1N0YXRlLCBjYXNlUmVkdWNlcikge1xuICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XG4gICAgICAgIGlmIChpc0RyYWZ0KHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgLy8gSWYgaXQncyBhbHJlYWR5IGEgZHJhZnQsIHdlIG11c3QgYWxyZWFkeSBiZSBpbnNpZGUgYSBgY3JlYXRlTmV4dFN0YXRlYCBjYWxsLFxuICAgICAgICAgIC8vIGxpa2VseSBiZWNhdXNlIHRoaXMgaXMgYmVpbmcgd3JhcHBlZCBpbiBgY3JlYXRlUmVkdWNlcmAsIGBjcmVhdGVTbGljZWAsIG9yIG5lc3RlZFxuICAgICAgICAgIC8vIGluc2lkZSBhbiBleGlzdGluZyBkcmFmdC4gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXG4gICAgICAgICAgdmFyIGRyYWZ0ID0gcHJldmlvdXNTdGF0ZTsgLy8gV2UgY2FuIGFzc3VtZSB0aGlzIGlzIGFscmVhZHkgYSBkcmFmdFxuXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0RyYWZ0YWJsZShwcmV2aW91c1N0YXRlKSkge1xuICAgICAgICAgIC8vIElmIHN0YXRlIGlzIG5vdCBkcmFmdGFibGUgKGV4OiBhIHByaW1pdGl2ZSwgc3VjaCBhcyAwKSwgd2Ugd2FudCB0byBkaXJlY3RseVxuICAgICAgICAgIC8vIHJldHVybiB0aGUgY2FzZVJlZHVjZXIgZnVuYyBhbmQgbm90IHdyYXAgaXQgd2l0aCBwcm9kdWNlLlxuICAgICAgICAgIHZhciBfcmVzdWx0ID0gY2FzZVJlZHVjZXIocHJldmlvdXNTdGF0ZSwgYWN0aW9uKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgX3Jlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIGNyZWF0ZU5leHRTdGF0ZSgpIHByb2R1Y2VzIGFuIEltbXV0YWJsZTxEcmFmdDxTPj4gcmF0aGVyXG4gICAgICAgICAgLy8gdGhhbiBhbiBJbW11dGFibGU8Uz4sIGFuZCBUeXBlU2NyaXB0IGNhbm5vdCBmaW5kIG91dCBob3cgdG8gcmVjb25jaWxlXG4gICAgICAgICAgLy8gdGhlc2UgdHdvIHR5cGVzLlxuICAgICAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgfSwgc3RhdGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlJDEoc2xpY2UsIGFjdGlvbktleSkge1xuICByZXR1cm4gc2xpY2UgKyBcIi9cIiArIGFjdGlvbktleTtcbn1cbi8qKlxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhbiBpbml0aWFsIHN0YXRlLCBhbiBvYmplY3QgZnVsbCBvZiByZWR1Y2VyXHJcbiAqIGZ1bmN0aW9ucywgYW5kIGEgXCJzbGljZSBuYW1lXCIsIGFuZCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlc1xyXG4gKiBhY3Rpb24gY3JlYXRvcnMgYW5kIGFjdGlvbiB0eXBlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlXHJcbiAqIHJlZHVjZXJzIGFuZCBzdGF0ZS5cclxuICpcclxuICogVGhlIGByZWR1Y2VyYCBhcmd1bWVudCBpcyBwYXNzZWQgdG8gYGNyZWF0ZVJlZHVjZXIoKWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGluaXRpYWxTdGF0ZSA9IG9wdGlvbnMuaW5pdGlhbFN0YXRlO1xuXG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZScpO1xuICB9XG5cbiAgdmFyIHJlZHVjZXJzID0gb3B0aW9ucy5yZWR1Y2VycyB8fCB7fTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09ICd1bmRlZmluZWQnID8gW10gOiB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAnZnVuY3Rpb24nID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLFxuICAgICAgX3JlZiQgPSBfcmVmWzBdLFxuICAgICAgZXh0cmFSZWR1Y2VycyA9IF9yZWYkID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkLFxuICAgICAgX3JlZiQyID0gX3JlZlsxXSxcbiAgICAgIGFjdGlvbk1hdGNoZXJzID0gX3JlZiQyID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkMixcbiAgICAgIF9yZWYkMyA9IF9yZWZbMl0sXG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSBfcmVmJDMgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkMztcblxuICB2YXIgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcbiAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlID0ge307XG4gIHZhciBhY3Rpb25DcmVhdG9ycyA9IHt9O1xuICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcbiAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlJDEobmFtZSwgcmVkdWNlck5hbWUpO1xuICAgIHZhciBjYXNlUmVkdWNlcjtcbiAgICB2YXIgcHJlcGFyZUNhbGxiYWNrO1xuXG4gICAgaWYgKCdyZWR1Y2VyJyBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xuICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xuICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcbiAgICB9XG5cbiAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtyZWR1Y2VyTmFtZV0gPSBjYXNlUmVkdWNlcjtcbiAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyO1xuICAgIGFjdGlvbkNyZWF0b3JzW3JlZHVjZXJOYW1lXSA9IHByZXBhcmVDYWxsYmFjayA/IGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQ2FsbGJhY2spIDogY3JlYXRlQWN0aW9uKHR5cGUpO1xuICB9KTtcblxuICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfZXh0ZW5kcyh7fSwgZXh0cmFSZWR1Y2Vycywge30sIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcblxuICB2YXIgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBmaW5hbENhc2VSZWR1Y2VycywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcik7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByZWR1Y2VyOiByZWR1Y2VyLFxuICAgIGFjdGlvbnM6IGFjdGlvbkNyZWF0b3JzLFxuICAgIGNhc2VSZWR1Y2Vyczogc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGlkczogW10sXG4gICAgZW50aXRpZXM6IHt9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xuICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoYWRkaXRpb25hbFN0YXRlKSB7XG4gICAgaWYgKGFkZGl0aW9uYWxTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZGRpdGlvbmFsU3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIHNlbGVjdElkcyhzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlLmlkcztcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gc2VsZWN0RW50aXRpZXMoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5lbnRpdGllcztcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7XG4gICAgICByZXR1cm4gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0aWVzW2lkXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gc2VsZWN0SWQoXywgaWQpIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEJ5SWQgPSBmdW5jdGlvbiBzZWxlY3RCeUlkKGVudGl0aWVzLCBpZCkge1xuICAgICAgcmV0dXJuIGVudGl0aWVzW2lkXTtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdFRvdGFsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBmdW5jdGlvbiAoaWRzKSB7XG4gICAgICByZXR1cm4gaWRzLmxlbmd0aDtcbiAgICB9KTtcblxuICAgIGlmICghc2VsZWN0U3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxuICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXG4gICAgICAgIHNlbGVjdEFsbDogc2VsZWN0QWxsLFxuICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXG4gICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXG4gICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLFxuICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcbiAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxuICAgICAgc2VsZWN0QnlJZDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9yc1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xuICB2YXIgb3BlcmF0b3IgPSBjcmVhdGVTdGF0ZU9wZXJhdG9yKGZ1bmN0aW9uIChfLCBzdGF0ZSkge1xuICAgIHJldHVybiBtdXRhdG9yKHN0YXRlKTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHVuZGVmaW5lZCk7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XG4gICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSB7XG4gICAgICByZXR1cm4gaXNGU0EoYXJnKTtcbiAgICB9XG5cbiAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIHJ1bk11dGF0b3IoZHJhZnQpIHtcbiAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XG4gICAgICAgIG11dGF0b3IoYXJnLnBheWxvYWQsIGRyYWZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11dGF0b3IoYXJnLCBkcmFmdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChpc0RyYWZ0KHN0YXRlKSkge1xuICAgICAgLy8gd2UgbXVzdCBhbHJlYWR5IGJlIGluc2lkZSBhIGBjcmVhdGVOZXh0U3RhdGVgIGNhbGwsIGxpa2VseSBiZWNhdXNlXG4gICAgICAvLyB0aGlzIGlzIGJlaW5nIHdyYXBwZWQgaW4gYGNyZWF0ZVJlZHVjZXJgIG9yIGBjcmVhdGVTbGljZWAuXG4gICAgICAvLyBJdCdzIHNhZmUgdG8ganVzdCBwYXNzIHRoZSBkcmFmdCB0byB0aGUgbXV0YXRvci5cbiAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpOyAvLyBzaW5jZSBpdCdzIGEgZHJhZnQsIHdlJ2xsIGp1c3QgcmV0dXJuIGl0XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxuICAgICAgLy8gdGhhbiBhbiBJbW11dGFibGU8Uz4sIGFuZCBUeXBlU2NyaXB0IGNhbm5vdCBmaW5kIG91dCBob3cgdG8gcmVjb25jaWxlXG4gICAgICAvLyB0aGVzZSB0d28gdHlwZXMuXG4gICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHN0YXRlLCBydW5NdXRhdG9yKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xuICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLicsICdZb3Ugc2hvdWxkIHByb2JhYmx5IHByb3ZpZGUgeW91ciBvd24gYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbi4nLCAnVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6JywgZW50aXR5LCAnVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246Jywgc2VsZWN0SWQudG9TdHJpbmcoKSk7XG4gIH1cblxuICByZXR1cm4ga2V5O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcblxuICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xuICAgIHN0YXRlLmVudGl0aWVzW2tleV0gPSBlbnRpdHk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGVudGl0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjtcbiAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgYWRkTWFueU11dGFibHkoZW50aXRpZXMsIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xuICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcbiAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XG4gICAgICAgIGRpZE11dGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZGlkTXV0YXRlKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xuICAgICAgaWRzOiBbXSxcbiAgICAgIGVudGl0aWVzOiB7fVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XG4gICAgdmFyIG9yaWdpbmFsID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsLCB1cGRhdGUuY2hhbmdlcyk7XG4gICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xuICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcblxuICAgIGlmIChoYXNOZXdLZXkpIHtcbiAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcbiAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIH1cblxuICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xuICAgIHJldHVybiBoYXNOZXdLZXk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XG4gICAgdmFyIG5ld0tleXMgPSB7fTtcbiAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xuICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAvLyBPbmx5IGFwcGx5IHVwZGF0ZXMgdG8gZW50aXRpZXMgdGhhdCBjdXJyZW50bHkgZXhpc3RcbiAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHVwZGF0ZXMgdG8gb25lIGVudGl0eSwgbWVyZ2UgdGhlbSB0b2dldGhlclxuICAgICAgICB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPSB7XG4gICAgICAgICAgaWQ6IHVwZGF0ZS5pZCxcbiAgICAgICAgICAvLyBTcHJlYWRzIGlnbm9yZSBmYWxzeSB2YWx1ZXMsIHNvIHRoaXMgd29ya3MgZXZlbiBpZiB0aGVyZSBpc24ndFxuICAgICAgICAgIC8vIGFuIGV4aXN0aW5nIHVwZGF0ZSBhbHJlYWR5IGF0IHRoaXMga2V5XG4gICAgICAgICAgY2hhbmdlczogX2V4dGVuZHMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCwge30sIHVwZGF0ZS5jaGFuZ2VzKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xuICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcblxuICAgIGlmIChkaWRNdXRhdGVFbnRpdGllcykge1xuICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7XG4gICAgICB9KS5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XG4gICAgICAgIHN0YXRlLmlkcyA9IHN0YXRlLmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG5ld0tleXNbaWRdIHx8IGlkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhlbnRpdGllcyk7XG4gICAgfVxuXG4gICAgdmFyIGFkZGVkID0gW107XG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBlbnRpdGllcywgX2lzQXJyYXkyID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IyKSwgX2kyID0gMCwgX2l0ZXJhdG9yMiA9IF9pc0FycmF5MiA/IF9pdGVyYXRvcjIgOiBfaXRlcmF0b3IyW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjI7XG5cbiAgICAgIGlmIChfaXNBcnJheTIpIHtcbiAgICAgICAgaWYgKF9pMiA+PSBfaXRlcmF0b3IyLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2l0ZXJhdG9yMltfaTIrK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaTIgPSBfaXRlcmF0b3IyLm5leHQoKTtcbiAgICAgICAgaWYgKF9pMi5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZjIgPSBfaTIudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRpdHkgPSBfcmVmMjtcbiAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICB1cGRhdGVkLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBjaGFuZ2VzOiBlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRlZC5wdXNoKGVudGl0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZUFsbDogY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKHJlbW92ZUFsbE11dGFibHkpLFxuICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcbiAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcbiAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXG4gICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XG4gIHZhciBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksXG4gICAgICByZW1vdmVPbmUgPSBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEucmVtb3ZlT25lLFxuICAgICAgcmVtb3ZlTWFueSA9IF9jcmVhdGVVbnNvcnRlZFN0YXRlQS5yZW1vdmVNYW55LFxuICAgICAgcmVtb3ZlQWxsID0gX2NyZWF0ZVVuc29ydGVkU3RhdGVBLnJlbW92ZUFsbDtcblxuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld01vZGVscywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3TW9kZWxzKSkge1xuICAgICAgbmV3TW9kZWxzID0gT2JqZWN0LnZhbHVlcyhuZXdNb2RlbHMpO1xuICAgIH1cblxuICAgIHZhciBtb2RlbHMgPSBuZXdNb2RlbHMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTtcbiAgICB9KTtcblxuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG1vZGVscywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kZWxzKSkge1xuICAgICAgbW9kZWxzID0gT2JqZWN0LnZhbHVlcyhtb2RlbHMpO1xuICAgIH1cblxuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgc3RhdGUuaWRzID0gW107XG4gICAgYWRkTWFueU11dGFibHkobW9kZWxzLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2VVcGRhdGVkTW9kZWwobW9kZWxzLCB1cGRhdGUsIHN0YXRlKSB7XG4gICAgaWYgKCEodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBvcmlnaW5hbCA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgdXBkYXRlLmNoYW5nZXMpO1xuICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICBtb2RlbHMucHVzaCh1cGRhdGVkKTtcbiAgICByZXR1cm4gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIHZhciBtb2RlbHMgPSBbXTtcbiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgcmV0dXJuIHRha2VVcGRhdGVkTW9kZWwobW9kZWxzLCB1cGRhdGUsIHN0YXRlKTtcbiAgICB9KTtcblxuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhlbnRpdGllcyk7XG4gICAgfVxuXG4gICAgdmFyIGFkZGVkID0gW107XG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGVudGl0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjtcbiAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICB1cGRhdGVkLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBjaGFuZ2VzOiBlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRlZC5wdXNoKGVudGl0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldID09PSBiW2ldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XG4gICAgbW9kZWxzLnNvcnQoc29ydCk7IC8vIEluc2VydC9vdmVyd3JpdGUgYWxsIG5ldy91cGRhdGVkXG5cbiAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcbiAgICB9KTtcbiAgICB2YXIgYWxsRW50aXRpZXMgPSBPYmplY3QudmFsdWVzKHN0YXRlLmVudGl0aWVzKTtcbiAgICBhbGxFbnRpdGllcy5zb3J0KHNvcnQpO1xuICAgIHZhciBuZXdTb3J0ZWRJZHMgPSBhbGxFbnRpdGllcy5tYXAoc2VsZWN0SWQpO1xuICAgIHZhciBpZHMgPSBzdGF0ZS5pZHM7XG5cbiAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xuICAgICAgc3RhdGUuaWRzID0gbmV3U29ydGVkSWRzO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtb3ZlT25lOiByZW1vdmVPbmUsXG4gICAgcmVtb3ZlTWFueTogcmVtb3ZlTWFueSxcbiAgICByZW1vdmVBbGw6IHJlbW92ZUFsbCxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcbiAgfTtcbn1cblxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9zb3J0Q29tcGFyZXIkc2VsZWN0SSA9IF9leHRlbmRzKHtcbiAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxuICAgIHNlbGVjdElkOiBmdW5jdGlvbiBzZWxlY3RJZChpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLmlkO1xuICAgIH1cbiAgfSwgb3B0aW9ucyksXG4gICAgICBzZWxlY3RJZCA9IF9zb3J0Q29tcGFyZXIkc2VsZWN0SS5zZWxlY3RJZCxcbiAgICAgIHNvcnRDb21wYXJlciA9IF9zb3J0Q29tcGFyZXIkc2VsZWN0SS5zb3J0Q29tcGFyZXI7XG5cbiAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcbiAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XG4gIHZhciBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXIgPyBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnRDb21wYXJlcikgOiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxuICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXG4gIH0sIHN0YXRlRmFjdG9yeSwge30sIHNlbGVjdG9yc0ZhY3RvcnksIHt9LCBzdGF0ZUFkYXB0ZXIpO1xufVxuXG4vLyBBIHR5cGUgb2YgcHJvbWlzZS1saWtlIHRoYXQgcmVzb2x2ZXMgc3luY2hyb25vdXNseSBhbmQgc3VwcG9ydHMgb25seSBvbmUgb2JzZXJ2ZXJcblxuY29uc3QgX2l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5pdGVyYXRvciB8fCAoU3ltYm9sLml0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLml0ZXJhdG9yXCIpKSkgOiBcIkBAaXRlcmF0b3JcIjtcblxuY29uc3QgX2FzeW5jSXRlcmF0b3JTeW1ib2wgPSAvKiNfX1BVUkVfXyovIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgKFN5bWJvbC5hc3luY0l0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3JcIikpKSA6IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgc2VuZCBlcnJvcnMgdG8gcmVjb3ZlcnkgY29udGludWF0aW9uXG5mdW5jdGlvbiBfY2F0Y2goYm9keSwgcmVjb3Zlcikge1xuXHR0cnkge1xuXHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdHJldHVybiByZWNvdmVyKGUpO1xuXHR9XG5cdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRyZXR1cm4gcmVzdWx0LnRoZW4odm9pZCAwLCByZWNvdmVyKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBCb3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9haS9uYW5vaWQvYmxvYi8zLjAuMi9ub24tc2VjdXJlL2luZGV4LmpzXG4vLyBUaGlzIGFscGhhYmV0IHVzZXMgYEEtWmEtejAtOV8tYCBzeW1ib2xzLiBBIGdlbmV0aWMgYWxnb3JpdGhtIGhlbHBlZFxuLy8gb3B0aW1pemUgdGhlIGd6aXAgY29tcHJlc3Npb24gZm9yIHRoaXMgYWxwaGFiZXQuXG52YXIgdXJsQWxwaGFiZXQgPSAnTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRVyc7XG4vKipcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIG5hbm9pZCA9IGZ1bmN0aW9uIG5hbm9pZChzaXplKSB7XG4gIGlmIChzaXplID09PSB2b2lkIDApIHtcbiAgICBzaXplID0gMjE7XG4gIH1cblxuICB2YXIgaWQgPSAnJzsgLy8gQSBjb21wYWN0IGFsdGVybmF0aXZlIGZvciBgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspYC5cblxuICB2YXIgaSA9IHNpemU7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIC8vIGB8IDBgIGlzIG1vcmUgY29tcGFjdCBhbmQgZmFzdGVyIHRoYW4gYE1hdGguZmxvb3IoKWAuXG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XG4gIH1cblxuICByZXR1cm4gaWQ7XG59O1xuXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFsnbmFtZScsICdtZXNzYWdlJywgJ3N0YWNrJywgJ2NvZGUnXTtcblxudmFyIFJlamVjdFdpdGhWYWx1ZSA9IGZ1bmN0aW9uIFJlamVjdFdpdGhWYWx1ZShwYXlsb2FkKSB7XG4gIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIHRoaXMubmFtZSA9ICdSZWplY3RXaXRoVmFsdWUnO1xuICB0aGlzLm1lc3NhZ2UgPSAnUmVqZWN0ZWQnO1xufTsgLy8gUmV3b3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NlcmlhbGl6ZS1lcnJvclxuXG5cbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiBtaW5pU2VyaWFsaXplRXJyb3IodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGNvbW1vblByb3BlcnRpZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wZXJ0eSA9IF9yZWY7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcGVydHldID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXBsZUVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBTdHJpbmcodmFsdWUpXG4gIH07XG59O1xuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlUHJlZml4XHJcbiAqIEBwYXJhbSBwYXlsb2FkQ3JlYXRvclxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvZnVsZmlsbGVkJywgZnVuY3Rpb24gKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogcmVzdWx0LFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdmdWxmaWxsZWQnXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL3BlbmRpbmcnLCBmdW5jdGlvbiAocmVxdWVzdElkLCBhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogdW5kZWZpbmVkLFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdwZW5kaW5nJ1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvcmVqZWN0ZWQnLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgdmFyIHJlamVjdGVkV2l0aFZhbHVlID0gZXJyb3IgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWU7XG4gICAgdmFyIGFib3J0ZWQgPSAhIWVycm9yICYmIGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJztcbiAgICB2YXIgY29uZGl0aW9uID0gISFlcnJvciAmJiBlcnJvci5uYW1lID09PSAnQ29uZGl0aW9uRXJyb3InO1xuICAgIHJldHVybiB7XG4gICAgICBwYXlsb2FkOiBlcnJvciBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSA/IGVycm9yLnBheWxvYWQgOiB1bmRlZmluZWQsXG4gICAgICBlcnJvcjogKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVFcnJvciB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKGVycm9yIHx8ICdSZWplY3RlZCcpLFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiByZWplY3RlZFdpdGhWYWx1ZSxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogJ3JlamVjdGVkJyxcbiAgICAgICAgYWJvcnRlZDogYWJvcnRlZCxcbiAgICAgICAgY29uZGl0aW9uOiBjb25kaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcbiAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gJ3VuZGVmaW5lZCcgPyBBYm9ydENvbnRyb2xsZXIgOlxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfY2xhc3MoKSB7XG4gICAgICB0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgYWJvcnRlZDogZmFsc2UsXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudCgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uYWJvcnQ6IGZ1bmN0aW9uIG9uYWJvcnQoKSB7fSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWRpc3BsYXllZFdhcm5pbmcpIHtcbiAgICAgICAgICBkaXNwbGF5ZWRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oXCJUaGlzIHBsYXRmb3JtIGRvZXMgbm90IGltcGxlbWVudCBBYm9ydENvbnRyb2xsZXIuIFxcbklmIHlvdSB3YW50IHRvIHVzZSB0aGUgQWJvcnRDb250cm9sbGVyIHRvIHJlYWN0IHRvIGBhYm9ydGAgZXZlbnRzLCBwbGVhc2UgY29uc2lkZXIgaW1wb3J0aW5nIGEgcG9seWZpbGwgbGlrZSAnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsLW9ubHknLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX2NsYXNzO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcihhcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpIHtcbiAgICAgIHZhciByZXF1ZXN0SWQgPSBuYW5vaWQoKTtcbiAgICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQUMoKTtcbiAgICAgIHZhciBhYm9ydFJlYXNvbjtcbiAgICAgIHZhciBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgICAgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCh7XG4gICAgICAgICAgICBuYW1lOiAnQWJvcnRFcnJvcicsXG4gICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCAnQWJvcnRlZCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGFydGVkID0gZmFsc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xuICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfdGVtcDMgPSBmdW5jdGlvbiBfdGVtcDMoX3Jlc3VsdCkge1xuICAgICAgICAgICAgaWYgKF9leGl0MikgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgICAgICAvLyBXZSBkaXNwYXRjaCB0aGUgcmVzdWx0IGFjdGlvbiBfYWZ0ZXJfIHRoZSBjYXRjaCwgdG8gYXZvaWQgaGF2aW5nIGFueSBlcnJvcnNcbiAgICAgICAgICAgIC8vIGhlcmUgZ2V0IHN3YWxsb3dlZCBieSB0aGUgdHJ5L2NhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gcGVyIGh0dHBzOi8vdHdpdHRlci5jb20vZGFuX2FicmFtb3Yvc3RhdHVzLzc3MDkxNDIyMTYzODk0MjcyMFxuICAgICAgICAgICAgLy8gYW5kIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdHV0b3JpYWxzL2FkdmFuY2VkLXR1dG9yaWFsI2FzeW5jLWVycm9yLWhhbmRsaW5nLWxvZ2ljLWluLXRodW5rc1xuICAgICAgICAgICAgdmFyIHNraXBEaXNwYXRjaCA9IG9wdGlvbnMgJiYgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiYgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmIGZpbmFsQWN0aW9uLm1ldGEuY29uZGl0aW9uO1xuXG4gICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xuICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaW5hbEFjdGlvbjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIF9leGl0MiA9IGZhbHNlO1xuICAgICAgICAgIHZhciBmaW5hbEFjdGlvbjtcblxuICAgICAgICAgIHZhciBfdGVtcDQgPSBfY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jb25kaXRpb24gJiYgb3B0aW9ucy5jb25kaXRpb24oYXJnLCB7XG4gICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDb25kaXRpb25FcnJvcicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Fib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcpKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoUHJvbWlzZS5yYWNlKFthYm9ydGVkUHJvbWlzZSwgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xuICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxuICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6IGZ1bmN0aW9uIHJlamVjdFdpdGhWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVqZWN0V2l0aFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICAgIH0pXSkpLnRoZW4oZnVuY3Rpb24gKF9Qcm9taXNlJHJhY2UpIHtcbiAgICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBfUHJvbWlzZSRyYWNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgZmluYWxBY3Rpb24gPSByZWplY3RlZChlcnIsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RlbXA0ICYmIF90ZW1wNC50aGVuID8gX3RlbXA0LnRoZW4oX3RlbXAzKSA6IF90ZW1wMyhfdGVtcDQpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfSgpO1xuXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm9taXNlLCB7XG4gICAgICAgIGFib3J0OiBhYm9ydCxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIGFyZzogYXJnXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xuICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHR5cGVQcmVmaXg6IHR5cGVQcmVmaXhcbiAgfSk7XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xuICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcbiAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcbiAgfVxuXG4gIGlmIChhY3Rpb24uZXJyb3IpIHtcbiAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XG4gIH1cblxuICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XG59XG5cbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gaGFzTWF0Y2hGdW5jdGlvbih2KSB7XG4gIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIG1hdGNoZXMgPSBmdW5jdGlvbiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbikge1xuICBpZiAoaGFzTWF0Y2hGdW5jdGlvbihtYXRjaGVyKSkge1xuICAgIHJldHVybiBtYXRjaGVyLm1hdGNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcbiAgfVxufTtcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIG1hdGNoZXMgYW55IG9uZSBvZiB0aGUgc3VwcGxpZWQgdHlwZSBndWFyZHMgb3IgYWN0aW9uXHJcbiAqIGNyZWF0b3JzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWF0Y2hlcnMgVGhlIHR5cGUgZ3VhcmRzIG9yIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzQW55T2YoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtYXRjaGVycyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtYXRjaGVyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7XG4gICAgfSk7XG4gIH07XG59XG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBtYXRjaGVzIGFsbCBvZiB0aGUgc3VwcGxpZWQgdHlwZSBndWFyZHMgb3IgYWN0aW9uXHJcbiAqIGNyZWF0b3JzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWF0Y2hlcnMgVGhlIHR5cGUgZ3VhcmRzIG9yIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBpc0FsbE9mKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1hdGNoZXJzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgbWF0Y2hlcnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pO1xuICAgIH0pO1xuICB9O1xufVxuLyoqXHJcbiAqIEBwYXJhbSBhY3Rpb24gQSByZWR1eCBhY3Rpb25cclxuICogQHBhcmFtIHZhbGlkU3RhdHVzIEFuIGFycmF5IG9mIHZhbGlkIG1ldGEucmVxdWVzdFN0YXR1cyB2YWx1ZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xuXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XG4gIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSAnc3RyaW5nJztcbiAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcbiAgcmV0dXJuIGhhc1ZhbGlkUmVxdWVzdElkICYmIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cztcbn1cblxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xuICByZXR1cm4gdHlwZW9mIGFbMF0gPT09ICdmdW5jdGlvbicgJiYgJ3BlbmRpbmcnIGluIGFbMF0gJiYgJ2Z1bGZpbGxlZCcgaW4gYVswXSAmJiAncmVqZWN0ZWQnIGluIGFbMF07XG59XG5cbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncGVuZGluZyddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHtcbiAgICAgIHJldHVybiBhc3luY1RodW5rLnBlbmRpbmc7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZCgpIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncmVqZWN0ZWQnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUmVqZWN0ZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xuICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykge1xuICAgICAgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICB2YXIgaGFzRmxhZyA9IGZ1bmN0aW9uIGhhc0ZsYWcoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcbiAgfTtcblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xuICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XG4gIH07XG59XG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsnZnVsZmlsbGVkJ10pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7XG4gICAgICByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFzeW5jVGh1bmtzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXN5bmNUaHVua3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgWydwZW5kaW5nJywgJ2Z1bGZpbGxlZCcsICdyZWplY3RlZCddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFzeW5jVGh1bmtzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXN5bmNUaHVuayA9IF9yZWY7XG4gICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xuICAgIH1cblxuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cblxuLy8gd2UgYXNzdW1lIFJUSyB3aWxsIGJlIHVzZWQgd2l0aCBSZWFjdCBOYXRpdmUgYW5kIG90aGVyIFByb3h5LWxlc3Ncbi8vIGVudmlyb25tZW50cy4gIEluIGFkZGl0aW9uLCB0aGF0J3MgaG93IEltbWVyIDQgYmVoYXZlZCwgYW5kIHNpbmNlXG4vLyB3ZSB3YW50IHRvIHNoaXAgdGhpcyBpbiBhbiBSVEsgbWlub3IsIHdlIHNob3VsZCBrZWVwIHRoZSBzYW1lIGJlaGF2aW9yLlxuXG5lbmFibGVFUzUoKTtcblxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBjb25maWd1cmVTdG9yZSwgY3JlYXRlQWN0aW9uLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciwgY3JlYXRlRW50aXR5QWRhcHRlciwgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVSZWR1Y2VyLCBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsIGNyZWF0ZVNsaWNlLCBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbmFub2lkLCB1bndyYXBSZXN1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3JlYXRlQWN0aW9uLCBjcmVhdGVSZWR1Y2VyLCBjb25maWd1cmVTdG9yZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xyXG5pbXBvcnQge1xyXG4gIGluaXRpYWxTdGF0ZSxcclxuICBlcnJvcixcclxuICBsb2FkaW5nLFxyXG4gIHJlZ2lzdGVyZWQsXHJcbiAgcmVtb3ZlZCxcclxuICB3b3JrZXJzTG9hZGVkLFxyXG4gIGNsZWFyRXJyb3IsXHJcbiAgV29ya2VyLFxyXG59IGZyb20gJy4vcmVkdWNlcic7XHJcbmltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5cclxuZW51bSBBY3Rpb25UeXBlIHtcclxuICBFUlJPUiA9ICdlcnJvcicsXHJcbiAgTE9BRElORyA9ICdsb2FkaW5nJyxcclxuICBMT0FERUQgPSAnd29ya2Vyc0xvYWRlZCcsXHJcbiAgUkVHSVNURVJFRCA9ICdyZWdpc3RlcmVkJyxcclxuICBSRU1PVkVEID0gJ3JlbW92ZWQnLFxyXG4gIENMRUFSX0VSUk9SID0gJ2NsZWFyRXJyb3InLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZXJyb3JBY3Rpb24gPSBjcmVhdGVBY3Rpb248c3RyaW5nPihBY3Rpb25UeXBlLkVSUk9SKTtcclxuZXhwb3J0IGNvbnN0IGxvYWRpbmdBY3Rpb24gPSBjcmVhdGVBY3Rpb248dm9pZD4oQWN0aW9uVHlwZS5MT0FESU5HKTtcclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyZWRBY3Rpb24gPSBjcmVhdGVBY3Rpb248V29ya2VyPihBY3Rpb25UeXBlLlJFR0lTVEVSRUQpO1xyXG5leHBvcnQgY29uc3QgcmVtb3ZlZEFjdGlvbiA9IGNyZWF0ZUFjdGlvbjxudW1iZXI+KEFjdGlvblR5cGUuUkVNT1ZFRCk7XHJcbmV4cG9ydCBjb25zdCB3b3JrZXJzTG9hZGVkQWN0aW9uID0gY3JlYXRlQWN0aW9uPFdvcmtlcltdPihBY3Rpb25UeXBlLkxPQURFRCk7XHJcbmV4cG9ydCBjb25zdCBjbGVhckVycm9yQWN0aW9uID0gY3JlYXRlQWN0aW9uPHZvaWQ+KEFjdGlvblR5cGUuQ0xFQVJfRVJST1IpO1xyXG5cclxuY29uc3QgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCB7XHJcbiAgW0FjdGlvblR5cGUuRVJST1JdOiBlcnJvcixcclxuICBbQWN0aW9uVHlwZS5DTEVBUl9FUlJPUl06IGNsZWFyRXJyb3IsXHJcbiAgW0FjdGlvblR5cGUuTE9BRElOR106IGxvYWRpbmcsXHJcbiAgW0FjdGlvblR5cGUuUkVHSVNURVJFRF06IHJlZ2lzdGVyZWQsXHJcbiAgW0FjdGlvblR5cGUuUkVNT1ZFRF06IHJlbW92ZWQsXHJcbiAgW0FjdGlvblR5cGUuTE9BREVEXTogd29ya2Vyc0xvYWRlZCxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3Qgc3RvcmUkID0gY29uZmlndXJlU3RvcmUoe1xyXG4gIHJlZHVjZXIsXHJcbiAgbWlkZGxld2FyZTogW3RodW5rTWlkZGxld2FyZV0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBTRVJWSUNFX0JBU0VVUkwgfSBmcm9tICcuL2NvbmZpZyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcclxuICBsb2FkaW5nOiBib29sZWFuO1xyXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsO1xyXG4gIHdvcmtlcnM6IFdvcmtlcltdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlciB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgcGhvdG86IHN0cmluZztcclxuICBiaW86IHN0cmluZztcclxuICBhZ2U6IHN0cmluZyB8IG51bWJlcjtcclxuICBhZGRyZXNzOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyRGF0YSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBob3RvOiBhbnk7XHJcbiAgYmlvOiBzdHJpbmc7XHJcbiAgYWdlOiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgYWRkcmVzczogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWN0IHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBBY3Rpb25PYmplY3RFcnJvciBleHRlbmRzIEFjdGlvbk9iamVjdCB7XHJcbiAgcGF5bG9hZDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWN0UmVnaXN0ZXJlZCBleHRlbmRzIEFjdGlvbk9iamVjdCB7XHJcbiAgcGF5bG9hZDogV29ya2VyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWN0UmVtb3ZlZCBleHRlbmRzIEFjdGlvbk9iamVjdCB7XHJcbiAgcGF5bG9hZDogbnVtYmVyIHwgc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWNMb2FkZWQgZXh0ZW5kcyBBY3Rpb25PYmplY3Qge1xyXG4gIHBheWxvYWQ6IFdvcmtlcltdO1xyXG59XHJcbi8vIHNldHVwIHN0YXRlXHJcbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IFN0YXRlID0ge1xyXG4gIGxvYWRpbmc6IGZhbHNlLFxyXG4gIGVycm9yOiBudWxsLFxyXG4gIHdvcmtlcnM6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRpbmcoc3RhdGU6IFN0YXRlKTogdm9pZCB7XHJcbiAgc3RhdGUubG9hZGluZyA9IHRydWU7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXJyb3Ioc3RhdGU6IFN0YXRlLCBhY3Rpb246IEFjdGlvbk9iamVjdEVycm9yKTogdm9pZCB7XHJcbiAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xyXG4gIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckVycm9yKHN0YXRlOiBTdGF0ZSk6IHZvaWQge1xyXG4gIHN0YXRlLmVycm9yID0gbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyZWQoXHJcbiAgc3RhdGU6IFN0YXRlLFxyXG4gIGFjdGlvbjogQWN0aW9uT2JqZWN0UmVnaXN0ZXJlZFxyXG4pOiBTdGF0ZSB7XHJcbiAgY29uc3Qgd29ya2VyID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgc3RhdGUud29ya2Vycy5wdXNoKHtcclxuICAgIGlkOiB3b3JrZXIuaWQsXHJcbiAgICBuYW1lOiB3b3JrZXIubmFtZSxcclxuICAgIHBob3RvOiBgJHtTRVJWSUNFX0JBU0VVUkx9L3Bob3RvLyR7d29ya2VyLnBob3RvfWAsXHJcbiAgICBiaW86IHdvcmtlci5iaW8sXHJcbiAgICBhZ2U6IHdvcmtlci5hZ2UsXHJcbiAgICBhZGRyZXNzOiB3b3JrZXIuYWRkcmVzcyxcclxuICB9KTtcclxuICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG4gIHJldHVybiBzdGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZWQoc3RhdGU6IFN0YXRlLCBhY3Rpb246IEFjdGlvbk9iamVjdFJlbW92ZWQpOiBTdGF0ZSB7XHJcbiAgY29uc3QgaWR4ID0gc3RhdGUud29ya2Vycy5maW5kSW5kZXgoKHQpID0+IHQuaWQgPT09IGFjdGlvbi5wYXlsb2FkKTtcclxuICBzdGF0ZS53b3JrZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICBzdGF0ZS5lcnJvciA9IG51bGw7XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd29ya2Vyc0xvYWRlZChzdGF0ZTogU3RhdGUsIGFjdGlvbjogQWN0aW9uT2JqZWNMb2FkZWQpOiBTdGF0ZSB7XHJcbiAgc3RhdGUud29ya2VycyA9IGFjdGlvbi5wYXlsb2FkLm1hcCgod29ya2VyKSA9PiAoe1xyXG4gICAgaWQ6IHdvcmtlci5pZCxcclxuICAgIG5hbWU6IHdvcmtlci5uYW1lLFxyXG4gICAgcGhvdG86IGAke1NFUlZJQ0VfQkFTRVVSTH0vcGhvdG8vJHt3b3JrZXIucGhvdG99YCxcclxuICAgIGJpbzogd29ya2VyLmJpbyxcclxuICAgIGFnZTogd29ya2VyLmFnZSxcclxuICAgIGFkZHJlc3M6IHdvcmtlci5hZGRyZXNzLFxyXG4gIH0pKTtcclxuICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG4gIHJldHVybiBzdGF0ZTtcclxufVxyXG4iLCJleHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RPcHRpb24ge1xyXG4gIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnO1xyXG4gIGJvZHk/OiBhbnk7XHJcbiAgY3VzdG9tQ29uZj86IGFueTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY2xpZW50KGVuZHBvaW50OiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RPcHRpb24sIGpzb24/OiBhbnkpIHtcclxuICBsZXQgaGVhZGVycztcclxuICBpZiAoanNvbikge1xyXG4gICAgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgbWV0aG9kOiBvcHRpb25zPy5tZXRob2QgPz8gJ0dFVCcgLFxyXG4gICAgLi4ub3B0aW9ucz8uY3VzdG9tQ29uZixcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgLi4uaGVhZGVycyxcclxuICAgICAgLi4ub3B0aW9ucz8uY3VzdG9tQ29uZj8uaGVhZGVycyxcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgaWYgKG9wdGlvbnM/LmJvZHkpIHtcclxuICAgIGlmIChqc29uKSB7XHJcbiAgICAgIGNvbmZpZy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucz8uYm9keSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gb3B0aW9ucz8uYm9keSkge1xyXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCBvcHRpb25zPy5ib2R5W25hbWVdKTtcclxuICAgICAgfVxyXG4gICAgICBjb25maWcuYm9keSA9IGZvcm1EYXRhO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGRhdGE7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LmZldGNoKGVuZHBvaW50LCBjb25maWcpO1xyXG4gICAgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuc3RhdHVzVGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyLm1lc3NhZ2UgfHwgZGF0YSk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGllbnQuZ2V0ID0gKGVuZHBvaW50OiBzdHJpbmcsIGN1c3RvbUNvbmY6IGFueSA9IHt9KSA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudChlbmRwb2ludCx7IG1ldGhvZDogJ0dFVCcsIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5jbGllbnQucG9zdCA9IDxUPihcclxuICBlbmRwb2ludDogc3RyaW5nLFxyXG4gIGJvZHk6IGFueSxcclxuICBjdXN0b21Db25mOiBhbnkgPSB7fVxyXG4pOiBQcm9taXNlPFQ+ID0+IHtcclxuICByZXR1cm4gY2xpZW50KGVuZHBvaW50LCB7IG1ldGhvZDogJ1BPU1QnLCBib2R5LCAuLi5jdXN0b21Db25mIH0pO1xyXG59O1xyXG5cclxuY2xpZW50LnB1dCA9IChcclxuICBlbmRwb2ludDogc3RyaW5nLFxyXG4gIGJvZHk/OiBhbnksXHJcbiAgY3VzdG9tQ29uZjogYW55ID0ge31cclxuKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICByZXR1cm4gY2xpZW50KGVuZHBvaW50LCB7IG1ldGhvZDogJ1BVVCcsIGJvZHksIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5jbGllbnQuZGVsID0gKFxyXG4gIGVuZHBvaW50OiBzdHJpbmcsXHJcbiAgYm9keT86IGFueSxcclxuICBjdXN0b21Db25mOiBhbnkgPSB7fVxyXG4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIHsgbWV0aG9kOiAnREVMRVRFJywgYm9keSwgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGNsaWVudCBhcyBodHRwQ2xpZW50IH07XHJcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgeyByZWdpc3RlciwgZ2V0TGlzdCwgcmVtb3ZlIH0gZnJvbSAnLi9hc3luYy1hY3Rpb24nO1xyXG5pbXBvcnQgeyBzdG9yZSQsIGVycm9yQWN0aW9uLCBjbGVhckVycm9yQWN0aW9uIH0gZnJvbSAnLi9zdG9yZSc7XHJcblxyXG5pbXBvcnQgJy4vbWFpbi5jc3MnO1xyXG5cclxuY29uc3QgZm9ybSA9IDxIVE1MRm9ybUVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm0nKTtcclxuY29uc3QgbmFtZSA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJyk7XHJcbmNvbnN0IGFnZSA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZ2UnKTtcclxuY29uc3QgcGhvdG8gPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvdG8nKTtcclxuY29uc3QgYmlvID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpbycpO1xyXG5jb25zdCBhZGRyZXNzID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZHJlc3MnKTtcclxuY29uc3QgbGlzdCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaXN0Jyk7XHJcbmNvbnN0IGVycm9yVHh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLXRleHQnKTtcclxuY29uc3QgbG9hZGluZ1R4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nLXRleHQnKTtcclxuaWYgKGZvcm0gJiYgbmFtZSAmJiBwaG90byAmJiBiaW8gJiYgYWRkcmVzcyAmJiBhZ2UpIHtcclxuICBmb3JtLm9uc3VibWl0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgc3RvcmUkLmRpc3BhdGNoKGNsZWFyRXJyb3JBY3Rpb24oKSk7XHJcbiAgICBpZiAoXHJcbiAgICAgICFuYW1lLnZhbHVlIHx8XHJcbiAgICAgICFhZ2UudmFsdWUgfHxcclxuICAgICAgIXBob3RvPy5maWxlcyB8fFxyXG4gICAgICAhcGhvdG8/LmZpbGVzWzBdfHxcclxuICAgICAgIWJpby52YWx1ZSB8fFxyXG4gICAgICAhYWRkcmVzcy52YWx1ZVxyXG4gICAgKSB7XHJcbiAgICAgIHN0b3JlJC5kaXNwYXRjaChlcnJvckFjdGlvbignZm9ybSBpc2lhbiB0aWRhayBsZW5na2FwIScpKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vcmVnaXN0ZXIgdXNlclxyXG4gICAgc3RvcmUkLmRpc3BhdGNoPGFueT4oXHJcbiAgICAgIHJlZ2lzdGVyKHtcclxuICAgICAgICBuYW1lOiBuYW1lLnZhbHVlLFxyXG4gICAgICAgIHBob3RvOiBwaG90bz8uZmlsZXNbMF0sXHJcbiAgICAgICAgYWdlOiBhZ2UudmFsdWUsXHJcbiAgICAgICAgYmlvOiBiaW8udmFsdWUsXHJcbiAgICAgICAgYWRkcmVzczogYWRkcmVzcy52YWx1ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gcmVzZXQgZm9ybVxyXG4gICAgZm9ybS5yZXNldCgpO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIHByZXNlbnRhdGlvbiBsYXllclxyXG5zdG9yZSQuc3Vic2NyaWJlKCgpID0+IHtcclxuICBjb25zdCBzdGF0ZSA9IHN0b3JlJC5nZXRTdGF0ZSgpO1xyXG4gIHJlbmRlcihzdGF0ZSk7XHJcbn0pO1xyXG5jb25zdCBzdGF0ZSA9IHN0b3JlJC5nZXRTdGF0ZSgpO1xyXG5yZW5kZXIoc3RhdGUpO1xyXG5cclxuc3RvcmUkLmRpc3BhdGNoPGFueT4oZ2V0TGlzdCk7XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoc3RhdGUpIHtcclxuICAvLyByZW5kZXIgZXJyb3JcclxuICBpZiAoZXJyb3JUeHQpIHtcclxuICAgIGlmIChzdGF0ZS5lcnJvcikge1xyXG4gICAgICBlcnJvclR4dC50ZXh0Q29udGVudCA9IHN0YXRlLmVycm9yLnRvU3RyaW5nKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlcnJvclR4dC50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxvYWRpbmdUeHQpIHtcclxuICAgIGlmIChzdGF0ZS5sb2FkaW5nKSB7XHJcbiAgICAgIGxvYWRpbmdUeHQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9hZGluZ1R4dC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcmVuZGVyIGxpc3Qgb2Ygd29ya2VyXHJcbiAgaWYgKGxpc3QpIHtcclxuICAgIGxpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLndvcmtlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgd29ya2VyID0gc3RhdGUud29ya2Vyc1tpXTtcclxuICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgY29uc3Qgcm12QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIHJtdkJ0bi5pbm5lclRleHQgPSAnaGFwdXMnO1xyXG4gICAgICBybXZCdG4ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdG9yZSQuZGlzcGF0Y2g8YW55PihyZW1vdmUod29ya2VyLmlkKSk7XHJcbiAgICAgIH07XHJcbiAgICAgIGxpLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8aW1nIHNyYz1cIiR7d29ya2VyLnBob3RvfVwiIGFsdD1cIlwiIHdpZHRoPVwiMzBweFwiIGhlaWdodD1cIjMwcHhcIiAvPlxyXG4gICAgICAgIDxzcGFuPiR7d29ya2VyLm5hbWV9PC9zcGFuPlxyXG4gICAgICBgO1xyXG4gICAgICBsaS5hcHBlbmQocm12QnRuKTtcclxuICAgICAgbGlzdC5hcHBlbmQobGkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGxvYWRpbmdBY3Rpb24sXHJcbiAgZXJyb3JBY3Rpb24sXHJcbiAgcmVnaXN0ZXJlZEFjdGlvbixcclxuICByZW1vdmVkQWN0aW9uLFxyXG4gIHdvcmtlcnNMb2FkZWRBY3Rpb24sXHJcbn0gZnJvbSAnLi9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBXb3JrZXJEYXRhIH0gZnJvbSAnLi9yZWR1Y2VyJztcclxuXHJcbmltcG9ydCAqIGFzIHdvcmtlclN2YyBmcm9tICcuL3dvcmtlci5jbGllbnQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gKGRhdGE6IFdvcmtlckRhdGEpID0+IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG4gIGRpc3BhdGNoKGxvYWRpbmdBY3Rpb24oKSk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHdvcmtlciA9IGF3YWl0IHdvcmtlclN2Yy5yZWdpc3RlcihkYXRhKTtcclxuICAgIGRpc3BhdGNoKHJlZ2lzdGVyZWRBY3Rpb24od29ya2VyKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBkaXNwYXRjaChlcnJvckFjdGlvbihgZ2FnYWwgbWVuZGFmdGFya2FuICR7ZGF0YS5uYW1lfWApKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlID0gKGlkKSA9PiBhc3luYyAoZGlzcGF0Y2gpID0+IHtcclxuICBkaXNwYXRjaChsb2FkaW5nQWN0aW9uKCkpO1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCB3b3JrZXJTdmMucmVtb3ZlKGlkKTtcclxuICAgIGRpc3BhdGNoKHJlbW92ZWRBY3Rpb24oaWQpKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGRpc3BhdGNoKGVycm9yQWN0aW9uKCdnYWdhbCBtZW5naGFwdXMgcGVrZXJqYScpKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TGlzdCA9IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG4gIGRpc3BhdGNoKGxvYWRpbmdBY3Rpb24oKSk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHdvcmtlcnMgPSBhd2FpdCB3b3JrZXJTdmMubGlzdCgpO1xyXG4gICAgZGlzcGF0Y2god29ya2Vyc0xvYWRlZEFjdGlvbih3b3JrZXJzKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBkaXNwYXRjaChlcnJvckFjdGlvbignZ2FnYWwgbWVtdWF0IGRhZnRhciBwZWtlcmphJykpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHsgaHR0cENsaWVudCBhcyBjbGllbnQgfSBmcm9tICcuLi9saWIvaHR0cC1jbGllbnQnO1xyXG5cclxuaW1wb3J0IHsgU0VSVklDRV9CQVNFVVJMIH0gZnJvbSAnLi9jb25maWcnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGRhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gIHJldHVybiBjbGllbnQucG9zdChgJHtTRVJWSUNFX0JBU0VVUkx9L3JlZ2lzdGVyYCwgZGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgcmV0dXJuIGNsaWVudC5nZXQoYCR7U0VSVklDRV9CQVNFVVJMfS9saXN0YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoaWQpOiBQcm9taXNlPGFueT4ge1xyXG4gIHJldHVybiBjbGllbnQuZGVsKGAke1NFUlZJQ0VfQkFTRVVSTH0vcmVtb3ZlP2lkPSR7aWR9YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmZvKGlkKTogUHJvbWlzZTxhbnk+IHtcclxuICByZXR1cm4gY2xpZW50LmdldChgJHtTRVJWSUNFX0JBU0VVUkx9L2luZm8/aWQ9JHtpZH1gKTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9