/*! For license information please see worker.js.LICENSE.txt */
(()=>{"use strict";var t={904:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/worker/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],o=0;o<t.length;o++){var s=t[o],c=e.base?s[0]+e.base:s[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=a(l),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,e),references:1}),r.push(l)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,l=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,v=0;function h(t,e){var n,r,o;if(e.singleton){var i=v++;n=p||(p=c(e)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=c(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var c=s(t,e),u=0;u<n.length;u++){var l=a(n[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=c}}}},121:(t,e,n)=>{n.d(e,{Z:()=>r}),t=n.hmd(t);const r=function(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:t)}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{function t(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+t+(n.length?" "+n.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function e(t){return!!t&&!!t[z]}function r(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[U]||!!t.constructor[U]||u(t)||l(t))}function o(t,e,n){void 0===n&&(n=!1),0===i(t)?(n?Object.keys:B)(t).forEach((function(r){n&&"symbol"==typeof r||e(r,t[r],t)})):t.forEach((function(n,r){return e(r,n,t)}))}function i(t){var e=t[z];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:u(t)?2:l(t)?3:0}function a(t,e){return 2===i(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function s(t,e,n){var r=i(t);2===r?t.set(e,n):3===r?(t.delete(e),t.add(n)):t[e]=n}function c(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function u(t){return L&&t instanceof Map}function l(t){return M&&t instanceof Set}function f(t){return t.o||t.t}function d(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=H(t);delete e[z];for(var n=B(e),r=0;r<n.length;r++){var o=n[r],i=e[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(e[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:t[o]})}return Object.create(Object.getPrototypeOf(t),e)}function p(t,n){return void 0===n&&(n=!1),h(t)||e(t)||!r(t)||(i(t)>1&&(t.set=t.add=t.clear=t.delete=v),Object.freeze(t),n&&o(t,(function(t,e){return p(e,!0)}),!0)),t}function v(){t(2)}function h(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function y(e){var n=V[e];return n||t(18,e),n}function m(){return N}function g(t,e){e&&(y("Patches"),t.u=[],t.s=[],t.v=e)}function b(t){_(t),t.p.forEach(O),t.p=null}function _(t){t===N&&(N=t.l)}function w(t){return N={p:[],l:N,h:t,m:!0,_:0}}function O(t){var e=t[z];0===e.i||1===e.i?e.j():e.g=!0}function A(e,n){n._=n.p.length;var o=n.p[0],i=void 0!==e&&e!==o;return n.h.O||y("ES5").S(n,e,i),i?(o[z].P&&(b(n),t(4)),r(e)&&(e=k(n,e),n.l||x(n,e)),n.u&&y("Patches").M(o[z],e,n.u,n.s)):e=k(n,o,[]),b(n),n.u&&n.v(n.u,n.s),e!==W?e:void 0}function k(t,e,n){if(h(e))return e;var r=e[z];if(!r)return o(e,(function(o,i){return C(t,r,e,o,i,n)}),!0),e;if(r.A!==t)return e;if(!r.P)return x(t,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=d(r.k):r.o;o(3===r.i?new Set(i):i,(function(e,o){return C(t,r,i,e,o,n)})),x(t,i,!1),n&&t.u&&y("Patches").R(r,n,t.u,t.s)}return r.o}function C(t,n,o,i,c,u){if(e(c)){var l=k(t,c,u&&n&&3!==n.i&&!a(n.D,i)?u.concat(i):void 0);if(s(o,i,l),!e(l))return;t.m=!1}if(r(c)&&!h(c)){if(!t.h.N&&t._<1)return;k(t,c),n&&n.A.l||x(t,c)}}function x(t,e,n){void 0===n&&(n=!1),t.h.N&&t.m&&p(e,n)}function S(t,e){var n=t[z];return(n?f(n):t)[e]}function E(t,e){if(e in t)for(var n=Object.getPrototypeOf(t);n;){var r=Object.getOwnPropertyDescriptor(n,e);if(r)return r;n=Object.getPrototypeOf(n)}}function j(t){t.P||(t.P=!0,t.l&&j(t.l))}function $(t){t.o||(t.o=d(t.t))}function P(t,e,n){var r=u(e)?y("MapSet").T(e,n):l(e)?y("MapSet").F(e,n):t.O?function(t,e){var n=Array.isArray(t),r={i:n?1:0,A:e?e.A:m(),P:!1,I:!1,D:{},l:e,t,k:null,o:null,j:null,C:!1},o=r,i=K;n&&(o=[r],i=G);var a=Proxy.revocable(o,i),s=a.revoke,c=a.proxy;return r.k=c,r.j=s,c}(e,n):y("ES5").J(e,n);return(n?n.A:m()).p.push(r),r}function I(n){return e(n)||t(22,n),function t(e){if(!r(e))return e;var n,a=e[z],c=i(e);if(a){if(!a.P&&(a.i<4||!y("ES5").K(a)))return a.t;a.I=!0,n=T(e,c),a.I=!1}else n=T(e,c);return o(n,(function(e,r){a&&function(t,e){return 2===i(t)?t.get(e):t[e]}(a.t,e)===r||s(n,e,t(r))})),3===c?new Set(n):n}(n)}function T(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return d(t)}var D,N,R="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),L="undefined"!=typeof Map,M="undefined"!=typeof Set,F="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=R?Symbol.for("immer-nothing"):((D={})["immer-nothing"]=!0,D),U=R?Symbol.for("immer-draftable"):"__$immer_draftable",z=R?Symbol.for("immer-state"):"__$immer_state",B=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames),H=Object.getOwnPropertyDescriptors||function(t){var e={};return B(t).forEach((function(n){e[n]=Object.getOwnPropertyDescriptor(t,n)})),e},V={},K={get:function(t,e){if(e===z)return t;var n=f(t);if(!a(n,e))return function(t,e,n){var r,o=E(e,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(t.k):void 0}(t,n,e);var o=n[e];return t.I||!r(o)?o:o===S(t.t,e)?($(t),t.o[e]=P(t.A.h,o,t)):o},has:function(t,e){return e in f(t)},ownKeys:function(t){return Reflect.ownKeys(f(t))},set:function(t,e,n){var r=E(f(t),e);if(null==r?void 0:r.set)return r.set.call(t.k,n),!0;if(!t.P){var o=S(f(t),e),i=null==o?void 0:o[z];if(i&&i.t===n)return t.o[e]=n,t.D[e]=!1,!0;if(c(n,o)&&(void 0!==n||a(t.t,e)))return!0;$(t),j(t)}return t.o[e]=n,t.D[e]=!0,!0},deleteProperty:function(t,e){return void 0!==S(t.t,e)||e in t.t?(t.D[e]=!1,$(t),j(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var n=f(t),r=Reflect.getOwnPropertyDescriptor(n,e);return r?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:r.enumerable,value:n[e]}:r},defineProperty:function(){t(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){t(12)}},G={};o(K,(function(t,e){G[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),G.deleteProperty=function(t,e){return K.deleteProperty.call(this,t[0],e)},G.set=function(t,e,n){return K.set.call(this,t[0],e,n,t[0])};var q=new(function(){function n(t){this.O=F,this.N=!0,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=n.prototype;return o.produce=function(e,n,o){if("function"==typeof e&&"function"!=typeof n){var i=n;n=e;var a=this;return function(t){var e=this;void 0===t&&(t=i);for(var r=arguments.length,o=Array(r>1?r-1:0),s=1;s<r;s++)o[s-1]=arguments[s];return a.produce(t,(function(t){var r;return(r=n).call.apply(r,[e,t].concat(o))}))}}var s;if("function"!=typeof n&&t(6),void 0!==o&&"function"!=typeof o&&t(7),r(e)){var c=w(this),u=P(this,e,void 0),l=!0;try{s=n(u),l=!1}finally{l?b(c):_(c)}return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(t){return g(c,o),A(t,c)}),(function(t){throw b(c),t})):(g(c,o),A(s,c))}if(!e||"object"!=typeof e){if((s=n(e))===W)return;return void 0===s&&(s=e),this.N&&p(s,!0),s}t(21,e)},o.produceWithPatches=function(t,e){var n,r,o=this;return"function"==typeof t?function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(r))}))}:[this.produce(t,e,(function(t,e){n=t,r=e})),n,r]},o.createDraft=function(n){r(n)||t(8),e(n)&&(n=I(n));var o=w(this),i=P(this,n,void 0);return i[z].C=!0,_(o),i},o.finishDraft=function(t,e){var n=(t&&t[z]).A;return g(n,e),A(void 0,n)},o.setAutoFreeze=function(t){this.N=t},o.setUseProxies=function(e){e&&!F&&t(20),this.O=e},o.applyPatches=function(t,n){var r;for(r=n.length-1;r>=0;r--){var o=n[r];if(0===o.path.length&&"replace"===o.op){t=o.value;break}}var i=y("Patches").$;return e(t)?i(t,n):this.produce(t,(function(t){return i(t,n.slice(r+1))}))},n}()),X=q.produce;q.produceWithPatches.bind(q),q.setAutoFreeze.bind(q),q.setUseProxies.bind(q),q.applyPatches.bind(q),q.createDraft.bind(q),q.finishDraft.bind(q);const Z=X;var J=n(121),Y=function(){return Math.random().toString(36).substring(7).split("").join(".")},Q={INIT:"@@redux/INIT"+Y(),REPLACE:"@@redux/REPLACE"+Y(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Y()}};function tt(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function et(t,e,n){var r;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(et)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var o=t,i=e,a=[],s=a,c=!1;function u(){s===a&&(s=a.slice())}function l(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return u(),s.push(t),function(){if(e){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,u();var n=s.indexOf(t);s.splice(n,1),a=null}}}function d(t){if(!tt(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,t)}finally{c=!1}for(var e=a=s,n=0;n<e.length;n++)(0,e[n])();return t}function p(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");o=t,d({type:Q.REPLACE})}function v(){var t,e=f;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(l())}return n(),{unsubscribe:e(n)}}})[J.Z]=function(){return this},t}return d({type:Q.INIT}),(r={dispatch:d,subscribe:f,getState:l,replaceReducer:p})[J.Z]=v,r}function nt(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function rt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ot(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function it(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ot(n,!0).forEach((function(e){rt(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ot(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function at(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function st(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=e.map((function(t){return t(o)}));return it({},n,{dispatch:r=at.apply(void 0,i)(n.dispatch)})}}}function ct(t,e){return t===e}function ut(t,e,n){if(null===e||null===n||e.length!==n.length)return!1;for(var r=e.length,o=0;o<r;o++)if(!t(e[o],n[o]))return!1;return!0}function lt(t){return function(e){var n=e.dispatch,r=e.getState;return function(e){return function(o){return"function"==typeof o?o(n,r,t):e(o)}}}}!function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r]}((function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ct,n=null,r=null;return function(){return ut(e,n,arguments)||(r=t.apply(null,arguments)),n=arguments,r}}));var ft=lt();ft.withExtraArgument=lt;const dt=ft;function pt(){return(pt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function vt(t){return(vt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ht(t,e){return(ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function yt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function mt(t,e,n){return(mt=yt()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&ht(o,n.prototype),o}).apply(null,arguments)}function gt(t){var e="function"==typeof Map?new Map:void 0;return(gt=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return mt(t,arguments,vt(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),ht(r,t)})(t)}var bt="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?at:at.apply(null,arguments)};var _t,wt=function(t){var e,n;function r(){return t.apply(this,arguments)||this}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o=r.prototype;return o.concat=function(){for(var e,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return mt(r,(e=t.prototype.concat).call.apply(e,[this].concat(o)))},o.prepend=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?mt(r,e[0].concat(this)):mt(r,e.concat(this))},r}(gt(Array));function Ot(t,e){function n(){if(e){var n=e.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return pt({type:t,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:t,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+t},n.type=t,n.match=function(e){return e.type===t},n}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator"))),function(){function t(t,e){var n=s[t];return n?n.enumerable=e:s[t]=n={configurable:!0,enumerable:e,get:function(){var e=this[z];return K.get(e,t)},set:function(e){var n=this[z];K.set(n,t,e)}},n}function n(t){for(var e=t.length-1;e>=0;e--){var n=t[e][z];if(!n.P)switch(n.i){case 5:i(n)&&j(n);break;case 4:r(n)&&j(n)}}}function r(t){for(var e=t.t,n=t.k,r=B(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==z){var s=e[i];if(void 0===s&&!a(e,i))return!0;var u=n[i],l=u&&u[z];if(l?l.t!==s:!c(u,s))return!0}}var f=!!e[z];return r.length!==B(e).length+(f?0:1)}function i(t){var e=t.k;if(e.length!==t.t.length)return!0;var n=Object.getOwnPropertyDescriptor(e,e.length-1);return!(!n||n.get)}var s={};!function(t,e){V[t]||(V[t]=e)}("ES5",{J:function(e,n){var r=Array.isArray(e),o=function(e,n){if(e){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,t(o,!0));return r}var i=H(n);delete i[z];for(var a=B(i),s=0;s<a.length;s++){var c=a[s];i[c]=t(c,e||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,e),i={i:r?5:4,A:n?n.A:m(),P:!1,I:!1,D:{},l:n,t:e,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,z,{value:i,writable:!0}),o},S:function(t,r,s){s?e(r)&&r[z].A===t&&n(t.p):(t.u&&function t(e){if(e&&"object"==typeof e){var n=e[z];if(n){var r=n.t,s=n.k,c=n.D,u=n.i;if(4===u)o(s,(function(e){e!==z&&(void 0!==r[e]||a(r,e)?c[e]||t(s[e]):(c[e]=!0,j(n)))})),o(r,(function(t){void 0!==s[t]||a(s,t)||(c[t]=!1,j(n))}));else if(5===u){if(i(n)&&(j(n),c.length=!0),s.length<r.length)for(var l=s.length;l<r.length;l++)c[l]=!1;else for(var f=r.length;f<s.length;f++)c[f]=!0;for(var d=Math.min(s.length,r.length),p=0;p<d;p++)void 0===c[p]&&t(s[p])}}}}(t.p[0]),n(t.p))},K:function(t){return 4===t.i?r(t):i(t)}})}(),function(t){t.ERROR="error",t.LOADING="loading",t.REGISTERED="registered",t.REMOVED="removed",t.WORKERS_LOADED="workersLoaded",t.CLEAR_ERROR="clearError"}(_t||(_t={}));const At=Ot(_t.ERROR),kt=Ot(_t.LOADING),Ct=Ot(_t.REGISTERED),xt=Ot(_t.REMOVED),St=Ot(_t.WORKERS_LOADED),Et=Ot(_t.CLEAR_ERROR),jt=function(t){var e,n=function(t){return function(t){void 0===t&&(t={});var e=t,n=e.thunk,r=void 0===n||n,o=(e.immutableCheck,e.serializableCheck,new wt);return r&&(function(t){return"boolean"==typeof t}(r)?o.push(dt):o.push(dt.withExtraArgument(r.extraArgument))),o}(t)},r=t||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,s=void 0===a?n():a,c=r.devTools,u=void 0===c||c,l=r.preloadedState,f=void 0===l?void 0:l,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)e=i;else{if(!function(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');e=function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var o=e[r];"function"==typeof t[o]&&(n[o]=t[o])}var i,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:Q.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Q.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+Q.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){i=t}return function(t,e){if(void 0===t&&(t={}),i)throw i;for(var r=!1,o={},s=0;s<a.length;s++){var c=a[s],u=n[c],l=t[c],f=u(l,e);if(void 0===f){var d=nt(c,e);throw new Error(d)}o[c]=f,r=r||f!==l}return(r=r||a.length!==Object.keys(t).length)?o:t}}(i)}var v=st.apply(void 0,"function"==typeof s?s(n):s),h=at;u&&(h=bt(pt({trace:!1},"object"==typeof u&&u)));var y=[v];return Array.isArray(p)?y=[v].concat(p):"function"==typeof p&&(y=p(y)),et(e,f,h.apply(void 0,y))}({reducer:function(t,n,o,i){void 0===o&&(o=[]);var a="function"==typeof n?function(t){var e,n={},r=[],o={addCase:function(t,e){var r="string"==typeof t?t:t.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=e,o},addMatcher:function(t,e){return r.push({matcher:t,reducer:e}),o},addDefaultCase:function(t){return e=t,o}};return t(o),[n,r,e]}(n):[n,o,i],s=a[0],c=a[1],u=a[2];return function(n,o){void 0===n&&(n=t);var i=[s[o.type]].concat(c.filter((function(t){return(0,t.matcher)(o)})).map((function(t){return t.reducer})));return 0===i.filter((function(t){return!!t})).length&&(i=[u]),i.reduce((function(t,n){if(n){if(e(t)){var i=n(t,o);return void 0===i?t:i}if(r(t))return Z(t,(function(t){return n(t,o)}));var a=n(t,o);if(void 0===a){if(null===t)return t;throw Error("A case reducer on a non-draftable value must not return undefined")}return a}return t}),n)}}({loading:!1,error:null,workers:[]},{[_t.ERROR]:(t,e)=>{t.loading=!1,t.error=null==e?void 0:e.payload},[_t.CLEAR_ERROR]:t=>{t.error=null},[_t.LOADING]:t=>{t.loading=!0,t.error=null},[_t.REGISTERED]:(t,e)=>{const n=null==e?void 0:e.payload;return t.workers.push({id:n.id,name:n.name,photo:`http://localhost:7001/photo/${n.photo}`,bio:n.bio}),t.loading=!1,t.error=null,t},[_t.REMOVED]:(t,e)=>{const n=t.workers.findIndex((t=>t.id===(null==e?void 0:e.payload)));return t.workers.splice(n,1),t.loading=!1,t.error=null,t},[_t.WORKERS_LOADED]:(t,e)=>(t.workers=null==e?void 0:e.payload.map((t=>({id:t.id,name:t.name,photo:`http://localhost:7001/photo/${t.photo}`,bio:t.bio}))),t.loading=!1,t.error=null,t)}),middleware:[dt]});function $t(t,e,n){var r,o,i;return function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))}(this,void 0,void 0,(function*(){let a;e&&(a={"Content-Type":"application/json"});const s=Object.assign(Object.assign({method:null!==(r=null==n?void 0:n.method)&&void 0!==r?r:"GET"},null==n?void 0:n.customConf),{headers:Object.assign(Object.assign({},a),null===(o=null==n?void 0:n.customConf)||void 0===o?void 0:o.headers)});if(null==n?void 0:n.body)if(e)s.body=JSON.stringify(null==n?void 0:n.body);else{const t=new FormData;for(const e in null==n?void 0:n.body)t.append(e,null==n?void 0:n.body[e]);s.body=t}let c;try{const e=yield window.fetch(t,s);if(c=yield e.json(),!e.ok)throw new Error(null!==(i=null==c?void 0:c.statusText)&&void 0!==i?i:"Gagal request ke api");return c}catch(t){return Promise.reject((null==t?void 0:t.message)||c)}}))}$t.get=(t,e={})=>$t(t,!0,Object.assign({method:"GET"},e)),$t.post=(t,e,n,r={})=>$t(t,n,Object.assign({method:"POST",body:e},r)),$t.put=(t,e,n,r={})=>$t(t,n,Object.assign({method:"PUT",body:e},r)),$t.del=(t,e,n,r={})=>$t(t,n,Object.assign({method:"DELETE",body:e},r));var Pt=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))};const It=t=>Pt(void 0,void 0,void 0,(function*(){t(kt());try{const e=yield $t.get("http://localhost:7001/list");t(St(e))}catch(e){t(At("gagal memuat daftar pekerja"))}}));var Tt=n(379),Dt=n.n(Tt),Nt=n(904);Dt()(Nt.Z,{insert:"head",singleton:!1}),Nt.Z.locals;var Rt=Object.freeze({});function Lt(t){return null==t}function Mt(t){return null!=t}function Ft(t){return!0===t}function Wt(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function Ut(t){return null!==t&&"object"==typeof t}var zt=Object.prototype.toString;function Bt(t){return"[object Object]"===zt.call(t)}function Ht(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function Vt(t){return Mt(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function Kt(t){return null==t?"":Array.isArray(t)||Bt(t)&&t.toString===zt?JSON.stringify(t,null,2):String(t)}function Gt(t){var e=parseFloat(t);return isNaN(e)?t:e}function qt(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}qt("slot,component",!0);var Xt=qt("key,ref,slot,slot-scope,is");function Zt(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var Jt=Object.prototype.hasOwnProperty;function Yt(t,e){return Jt.call(t,e)}function Qt(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var te=/-(\w)/g,ee=Qt((function(t){return t.replace(te,(function(t,e){return e?e.toUpperCase():""}))})),ne=Qt((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),re=/\B([A-Z])/g,oe=Qt((function(t){return t.replace(re,"-$1").toLowerCase()})),ie=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function ae(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function se(t,e){for(var n in e)t[n]=e[n];return t}function ce(t){for(var e={},n=0;n<t.length;n++)t[n]&&se(e,t[n]);return e}function ue(t,e,n){}var le=function(t,e,n){return!1},fe=function(t){return t};function de(t,e){if(t===e)return!0;var n=Ut(t),r=Ut(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return de(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return de(t[n],e[n])}))}catch(t){return!1}}function pe(t,e){for(var n=0;n<t.length;n++)if(de(t[n],e))return n;return-1}function ve(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var he="data-server-rendered",ye=["component","directive","filter"],me=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],ge={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:le,isReservedAttr:le,isUnknownElement:le,getTagNamespace:ue,parsePlatformTagName:fe,mustUseProp:le,async:!0,_lifecycleHooks:me};function be(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function _e(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var we,Oe=new RegExp("[^"+/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source+".$_\\d]"),Ae="__proto__"in{},ke="undefined"!=typeof window,Ce="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,xe=Ce&&WXEnvironment.platform.toLowerCase(),Se=ke&&window.navigator.userAgent.toLowerCase(),Ee=Se&&/msie|trident/.test(Se),je=Se&&Se.indexOf("msie 9.0")>0,$e=Se&&Se.indexOf("edge/")>0,Pe=(Se&&Se.indexOf("android"),Se&&/iphone|ipad|ipod|ios/.test(Se)||"ios"===xe),Ie=(Se&&/chrome\/\d+/.test(Se),Se&&/phantomjs/.test(Se),Se&&Se.match(/firefox\/(\d+)/)),Te={}.watch,De=!1;if(ke)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){De=!0}}),window.addEventListener("test-passive",null,Ne)}catch(t){}var Re=function(){return void 0===we&&(we=!ke&&!Ce&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),we},Le=ke&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Me(t){return"function"==typeof t&&/native code/.test(t.toString())}var Fe,We="undefined"!=typeof Symbol&&Me(Symbol)&&"undefined"!=typeof Reflect&&Me(Reflect.ownKeys);Fe="undefined"!=typeof Set&&Me(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var Ue=ue,ze=0,Be=function(){this.id=ze++,this.subs=[]};Be.prototype.addSub=function(t){this.subs.push(t)},Be.prototype.removeSub=function(t){Zt(this.subs,t)},Be.prototype.depend=function(){Be.target&&Be.target.addDep(this)},Be.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},Be.target=null;var He=[];function Ve(t){He.push(t),Be.target=t}function Ke(){He.pop(),Be.target=He[He.length-1]}var Ge=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},qe={child:{configurable:!0}};qe.child.get=function(){return this.componentInstance},Object.defineProperties(Ge.prototype,qe);var Xe=function(t){void 0===t&&(t="");var e=new Ge;return e.text=t,e.isComment=!0,e};function Ze(t){return new Ge(void 0,void 0,void 0,String(t))}function Je(t){var e=new Ge(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ye=Array.prototype,Qe=Object.create(Ye);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=Ye[t];_e(Qe,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var tn=Object.getOwnPropertyNames(Qe),en=!0;function nn(t){en=t}var rn=function(t){this.value=t,this.dep=new Be,this.vmCount=0,_e(t,"__ob__",this),Array.isArray(t)?(Ae?function(t,e){t.__proto__=e}(t,Qe):function(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];_e(t,i,e[i])}}(t,Qe,tn),this.observeArray(t)):this.walk(t)};function on(t,e){var n;if(Ut(t)&&!(t instanceof Ge))return Yt(t,"__ob__")&&t.__ob__ instanceof rn?n=t.__ob__:en&&!Re()&&(Array.isArray(t)||Bt(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new rn(t)),e&&n&&n.vmCount++,n}function an(t,e,n,r,o){var i=new Be,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&on(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return Be.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&un(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!o&&on(e),i.notify())}})}}function sn(t,e,n){if(Array.isArray(t)&&Ht(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(an(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function cn(t,e){if(Array.isArray(t)&&Ht(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||Yt(t,e)&&(delete t[e],n&&n.dep.notify())}}function un(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&un(e)}rn.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)an(t,e[n])},rn.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)on(t[e])};var ln=ge.optionMergeStrategies;function fn(t,e){if(!e)return t;for(var n,r,o,i=We?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=t[n],o=e[n],Yt(t,n)?r!==o&&Bt(r)&&Bt(o)&&fn(r,o):sn(t,n,o));return t}function dn(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?fn(r,o):o}:e?t?function(){return fn("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function pn(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function vn(t,e,n,r){var o=Object.create(t||null);return e?se(o,e):o}ln.data=function(t,e,n){return n?dn(t,e,n):e&&"function"!=typeof e?t:dn(t,e)},me.forEach((function(t){ln[t]=pn})),ye.forEach((function(t){ln[t+"s"]=vn})),ln.watch=function(t,e,n,r){if(t===Te&&(t=void 0),e===Te&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in se(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},ln.props=ln.methods=ln.inject=ln.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return se(o,t),e&&se(o,e),o},ln.provide=dn;var hn=function(t,e){return void 0===e?t:e};function yn(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[ee(o)]={type:null});else if(Bt(n))for(var a in n)o=n[a],i[ee(a)]=Bt(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(Bt(n))for(var i in n){var a=n[i];r[i]=Bt(a)?se({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=yn(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=yn(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)Yt(t,i)||s(i);function s(r){var o=ln[r]||hn;a[r]=o(t[r],e[r],n,r)}return a}function mn(t,e,n,r){if("string"==typeof n){var o=t[e];if(Yt(o,n))return o[n];var i=ee(n);if(Yt(o,i))return o[i];var a=ne(i);return Yt(o,a)?o[a]:o[n]||o[i]||o[a]}}function gn(t,e,n,r){var o=e[t],i=!Yt(n,t),a=n[t],s=wn(Boolean,o.type);if(s>-1)if(i&&!Yt(o,"default"))a=!1;else if(""===a||a===oe(t)){var c=wn(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(Yt(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof r&&"Function"!==bn(e.type)?r.call(t):r}}(r,o,t);var u=en;nn(!0),on(a),nn(u)}return a}function bn(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function _n(t,e){return bn(t)===bn(e)}function wn(t,e){if(!Array.isArray(e))return _n(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(_n(e[n],t))return n;return-1}function On(t,e,n){Ve();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){kn(t,r,"errorCaptured hook")}}kn(t,e,n)}finally{Ke()}}function An(t,e,n,r,o){var i;try{(i=n?t.apply(e,n):t.call(e))&&!i._isVue&&Vt(i)&&!i._handled&&(i.catch((function(t){return On(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(t){On(t,r,o)}return i}function kn(t,e,n){if(ge.errorHandler)try{return ge.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Cn(e)}Cn(t)}function Cn(t,e,n){if(!ke&&!Ce||"undefined"==typeof console)throw t;console.error(t)}var xn,Sn=!1,En=[],jn=!1;function $n(){jn=!1;var t=En.slice(0);En.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&Me(Promise)){var Pn=Promise.resolve();xn=function(){Pn.then($n),Pe&&setTimeout(ue)},Sn=!0}else if(Ee||"undefined"==typeof MutationObserver||!Me(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())xn="undefined"!=typeof setImmediate&&Me(setImmediate)?function(){setImmediate($n)}:function(){setTimeout($n,0)};else{var In=1,Tn=new MutationObserver($n),Dn=document.createTextNode(String(In));Tn.observe(Dn,{characterData:!0}),xn=function(){In=(In+1)%2,Dn.data=String(In)},Sn=!0}function Nn(t,e){var n;if(En.push((function(){if(t)try{t.call(e)}catch(t){On(t,e,"nextTick")}else n&&n(e)})),jn||(jn=!0,xn()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var Rn=new Fe;function Ln(t){Mn(t,Rn),Rn.clear()}function Mn(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!Ut(t)||Object.isFrozen(t)||t instanceof Ge)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o)for(n=t.length;n--;)Mn(t[n],e);else for(n=(r=Object.keys(t)).length;n--;)Mn(t[r[n]],e)}}var Fn=Qt((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function Wn(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return An(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)An(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function Un(t,e,n,r,o,i){var a,s,c,u;for(a in t)s=t[a],c=e[a],u=Fn(a),Lt(s)||(Lt(c)?(Lt(s.fns)&&(s=t[a]=Wn(s,i)),Ft(u.once)&&(s=t[a]=o(u.name,s,u.capture)),n(u.name,s,u.capture,u.passive,u.params)):s!==c&&(c.fns=s,t[a]=c));for(a in e)Lt(t[a])&&r((u=Fn(a)).name,e[a],u.capture)}function zn(t,e,n){var r;t instanceof Ge&&(t=t.data.hook||(t.data.hook={}));var o=t[e];function i(){n.apply(this,arguments),Zt(r.fns,i)}Lt(o)?r=Wn([i]):Mt(o.fns)&&Ft(o.merged)?(r=o).fns.push(i):r=Wn([o,i]),r.merged=!0,t[e]=r}function Bn(t,e,n,r,o){if(Mt(e)){if(Yt(e,n))return t[n]=e[n],o||delete e[n],!0;if(Yt(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function Hn(t){return Wt(t)?[Ze(t)]:Array.isArray(t)?Kn(t):void 0}function Vn(t){return Mt(t)&&Mt(t.text)&&function(t){return!1===t}(t.isComment)}function Kn(t,e){var n,r,o,i,a=[];for(n=0;n<t.length;n++)Lt(r=t[n])||"boolean"==typeof r||(i=a[o=a.length-1],Array.isArray(r)?r.length>0&&(Vn((r=Kn(r,(e||"")+"_"+n))[0])&&Vn(i)&&(a[o]=Ze(i.text+r[0].text),r.shift()),a.push.apply(a,r)):Wt(r)?Vn(i)?a[o]=Ze(i.text+r):""!==r&&a.push(Ze(r)):Vn(r)&&Vn(i)?a[o]=Ze(i.text+r.text):(Ft(t._isVList)&&Mt(r.tag)&&Lt(r.key)&&Mt(e)&&(r.key="__vlist"+e+"_"+n+"__"),a.push(r)));return a}function Gn(t,e){if(t){for(var n=Object.create(null),r=We?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=t[i].from,s=e;s;){if(s._provided&&Yt(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s&&"default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}}}return n}}function qn(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Xn)&&delete n[u];return n}function Xn(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Zn(t,e,n){var r,o=Object.keys(e).length>0,i=t?!!t.$stable:!o,a=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(i&&n&&n!==Rt&&a===n.$key&&!o&&!n.$hasNormal)return n;for(var s in r={},t)t[s]&&"$"!==s[0]&&(r[s]=Jn(e,s,t[s]))}else r={};for(var c in e)c in r||(r[c]=Yn(e,c));return t&&Object.isExtensible(t)&&(t._normalized=r),_e(r,"$stable",i),_e(r,"$key",a),_e(r,"$hasNormal",o),r}function Jn(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:Hn(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Yn(t,e){return function(){return t[e]}}function Qn(t,e){var n,r,o,i,a;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(Ut(t))if(We&&t[Symbol.iterator]){n=[];for(var s=t[Symbol.iterator](),c=s.next();!c.done;)n.push(e(c.value,n.length)),c=s.next()}else for(i=Object.keys(t),n=new Array(i.length),r=0,o=i.length;r<o;r++)a=i[r],n[r]=e(t[a],a,r);return Mt(n)||(n=[]),n._isVList=!0,n}function tr(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=se(se({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function er(t){return mn(this.$options,"filters",t)||fe}function nr(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function rr(t,e,n,r,o){var i=ge.keyCodes[e]||n;return o&&r&&!ge.keyCodes[e]?nr(o,r):i?nr(i,t):r?oe(r)!==e:void 0}function or(t,e,n,r,o){if(n&&Ut(n)){var i;Array.isArray(n)&&(n=ce(n));var a=function(a){if("class"===a||"style"===a||Xt(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||ge.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=ee(a),u=oe(a);c in i||u in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var s in n)a(s)}return t}function ir(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||sr(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function ar(t,e,n){return sr(t,"__once__"+e+(n?"_"+n:""),!0),t}function sr(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&cr(t[r],e+"_"+r,n);else cr(t,e,n)}function cr(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function ur(t,e){if(e&&Bt(e)){var n=t.on=t.on?se({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}return t}function lr(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?lr(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function fr(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function dr(t,e){return"string"==typeof t?e+t:t}function pr(t){t._o=ar,t._n=Gt,t._s=Kt,t._l=Qn,t._t=tr,t._q=de,t._i=pe,t._m=ir,t._f=er,t._k=rr,t._b=or,t._v=Ze,t._e=Xe,t._u=lr,t._g=ur,t._d=fr,t._p=dr}function vr(t,e,n,r,o){var i,a=this,s=o.options;Yt(r,"_uid")?(i=Object.create(r))._original=r:(i=r,r=r._original);var c=Ft(s._compiled),u=!c;this.data=t,this.props=e,this.children=n,this.parent=r,this.listeners=t.on||Rt,this.injections=Gn(s.inject,r),this.slots=function(){return a.$slots||Zn(t.scopedSlots,a.$slots=qn(n,r)),a.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Zn(t.scopedSlots,this.slots())}}),c&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=Zn(t.scopedSlots,this.$slots)),s._scopeId?this._c=function(t,e,n,o){var a=wr(i,t,e,n,o,u);return a&&!Array.isArray(a)&&(a.fnScopeId=s._scopeId,a.fnContext=r),a}:this._c=function(t,e,n,r){return wr(i,t,e,n,r,u)}}function hr(t,e,n,r,o){var i=Je(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function yr(t,e){for(var n in e)t[ee(n)]=e[n]}pr(vr.prototype);var mr={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;mr.prepatch(n,n)}else(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return Mt(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}(t,Ir)).$mount(e?t.elm:void 0,e)},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,r,o){var i=r.data.scopedSlots,a=t.$scopedSlots,s=!!(i&&!i.$stable||a!==Rt&&!a.$stable||i&&t.$scopedSlots.$key!==i.$key),c=!!(o||t.$options._renderChildren||s);if(t.$options._parentVnode=r,t.$vnode=r,t._vnode&&(t._vnode.parent=r),t.$options._renderChildren=o,t.$attrs=r.data.attrs||Rt,t.$listeners=n||Rt,e&&t.$options.props){nn(!1);for(var u=t._props,l=t.$options._propKeys||[],f=0;f<l.length;f++){var d=l[f],p=t.$options.props;u[d]=gn(d,p,e,t)}nn(!0),t.$options.propsData=e}n=n||Rt;var v=t.$options._parentListeners;t.$options._parentListeners=n,Pr(t,n,v),c&&(t.$slots=qn(o,r.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Lr(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Fr.push(e)):Nr(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Rr(e,!0):e.$destroy())}},gr=Object.keys(mr);function br(t,e,n,r,o){if(!Lt(t)){var i=n.$options._base;if(Ut(t)&&(t=i.extend(t)),"function"==typeof t){var a;if(Lt(t.cid)&&void 0===(t=function(t,e){if(Ft(t.error)&&Mt(t.errorComp))return t.errorComp;if(Mt(t.resolved))return t.resolved;var n=kr;if(n&&Mt(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),Ft(t.loading)&&Mt(t.loadingComp))return t.loadingComp;if(n&&!Mt(t.owners)){var r=t.owners=[n],o=!0,i=null,a=null;n.$on("hook:destroyed",(function(){return Zt(r,n)}));var s=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0,null!==i&&(clearTimeout(i),i=null),null!==a&&(clearTimeout(a),a=null))},c=ve((function(n){t.resolved=Cr(n,e),o?r.length=0:s(!0)})),u=ve((function(e){Mt(t.errorComp)&&(t.error=!0,s(!0))})),l=t(c,u);return Ut(l)&&(Vt(l)?Lt(t.resolved)&&l.then(c,u):Vt(l.component)&&(l.component.then(c,u),Mt(l.error)&&(t.errorComp=Cr(l.error,e)),Mt(l.loading)&&(t.loadingComp=Cr(l.loading,e),0===l.delay?t.loading=!0:i=setTimeout((function(){i=null,Lt(t.resolved)&&Lt(t.error)&&(t.loading=!0,s(!1))}),l.delay||200)),Mt(l.timeout)&&(a=setTimeout((function(){a=null,Lt(t.resolved)&&u(null)}),l.timeout)))),o=!1,t.loading?t.loadingComp:t.resolved}}(a=t,i)))return function(t,e,n,r,o){var i=Xe();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(a,e,n,r,o);e=e||{},oo(t),Mt(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),i=o[r],a=e.model.callback;Mt(i)?(Array.isArray(i)?-1===i.indexOf(a):i!==a)&&(o[r]=[a].concat(i)):o[r]=a}(t.options,e);var s=function(t,e,n){var r=e.options.props;if(!Lt(r)){var o={},i=t.attrs,a=t.props;if(Mt(i)||Mt(a))for(var s in r){var c=oe(s);Bn(o,a,s,c,!0)||Bn(o,i,s,c,!1)}return o}}(e,t);if(Ft(t.options.functional))return function(t,e,n,r,o){var i=t.options,a={},s=i.props;if(Mt(s))for(var c in s)a[c]=gn(c,s,e||Rt);else Mt(n.attrs)&&yr(a,n.attrs),Mt(n.props)&&yr(a,n.props);var u=new vr(n,a,o,r,t),l=i.render.call(null,u._c,u);if(l instanceof Ge)return hr(l,n,u.parent,i);if(Array.isArray(l)){for(var f=Hn(l)||[],d=new Array(f.length),p=0;p<f.length;p++)d[p]=hr(f[p],n,u.parent,i);return d}}(t,s,e,n,r);var c=e.on;if(e.on=e.nativeOn,Ft(t.options.abstract)){var u=e.slot;e={},u&&(e.slot=u)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<gr.length;n++){var r=gr[n],o=e[r],i=mr[r];o===i||o&&o._merged||(e[r]=o?_r(i,o):i)}}(e);var l=t.options.name||o;return new Ge("vue-component-"+t.cid+(l?"-"+l:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:s,listeners:c,tag:o,children:r},a)}}}function _r(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function wr(t,e,n,r,o,i){return(Array.isArray(n)||Wt(n))&&(o=r,r=n,n=void 0),Ft(i)&&(o=2),function(t,e,n,r,o){if(Mt(n)&&Mt(n.__ob__))return Xe();if(Mt(n)&&Mt(n.is)&&(e=n.is),!e)return Xe();var i,a,s;(Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),2===o?r=Hn(r):1===o&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r)),"string"==typeof e)?(a=t.$vnode&&t.$vnode.ns||ge.getTagNamespace(e),i=ge.isReservedTag(e)?new Ge(ge.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!Mt(s=mn(t.$options,"components",e))?new Ge(e,n,r,void 0,void 0,t):br(s,n,t,r,e)):i=br(e,n,t,r);return Array.isArray(i)?i:Mt(i)?(Mt(a)&&Or(i,a),Mt(n)&&function(t){Ut(t.style)&&Ln(t.style),Ut(t.class)&&Ln(t.class)}(n),i):Xe()}(t,e,n,r,o)}function Or(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),Mt(t.children))for(var r=0,o=t.children.length;r<o;r++){var i=t.children[r];Mt(i.tag)&&(Lt(i.ns)||Ft(n)&&"svg"!==i.tag)&&Or(i,e,n)}}var Ar,kr=null;function Cr(t,e){return(t.__esModule||We&&"Module"===t[Symbol.toStringTag])&&(t=t.default),Ut(t)?e.extend(t):t}function xr(t){return t.isComment&&t.asyncFactory}function Sr(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(Mt(n)&&(Mt(n.componentOptions)||xr(n)))return n}}function Er(t,e){Ar.$on(t,e)}function jr(t,e){Ar.$off(t,e)}function $r(t,e){var n=Ar;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Pr(t,e,n){Ar=t,Un(e,n||{},Er,jr,$r,t),Ar=void 0}var Ir=null;function Tr(t){var e=Ir;return Ir=t,function(){Ir=e}}function Dr(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Nr(t,e){if(e){if(t._directInactive=!1,Dr(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Nr(t.$children[n]);Lr(t,"activated")}}function Rr(t,e){if(!(e&&(t._directInactive=!0,Dr(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Rr(t.$children[n]);Lr(t,"deactivated")}}function Lr(t,e){Ve();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)An(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),Ke()}var Mr=[],Fr=[],Wr={},Ur=!1,zr=!1,Br=0,Hr=0,Vr=Date.now;if(ke&&!Ee){var Kr=window.performance;Kr&&"function"==typeof Kr.now&&Vr()>document.createEvent("Event").timeStamp&&(Vr=function(){return Kr.now()})}function Gr(){var t,e;for(Hr=Vr(),zr=!0,Mr.sort((function(t,e){return t.id-e.id})),Br=0;Br<Mr.length;Br++)(t=Mr[Br]).before&&t.before(),e=t.id,Wr[e]=null,t.run();var n=Fr.slice(),r=Mr.slice();Br=Mr.length=Fr.length=0,Wr={},Ur=zr=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Nr(t[e],!0)}(n),function(t){for(var e=t.length;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Lr(r,"updated")}}(r),Le&&ge.devtools&&Le.emit("flush")}var qr=0,Xr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++qr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Fe,this.newDepIds=new Fe,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!Oe.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=ue)),this.value=this.lazy?void 0:this.get()};Xr.prototype.get=function(){var t;Ve(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;On(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Ln(t),Ke(),this.cleanupDeps()}return t},Xr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Xr.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Xr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Wr[e]){if(Wr[e]=!0,zr){for(var n=Mr.length-1;n>Br&&Mr[n].id>t.id;)n--;Mr.splice(n+1,0,t)}else Mr.push(t);Ur||(Ur=!0,Nn(Gr))}}(this)},Xr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||Ut(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){On(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Xr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Xr.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Xr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||Zt(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Zr={enumerable:!0,configurable:!0,get:ue,set:ue};function Jr(t,e,n){Zr.get=function(){return this[e][n]},Zr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Zr)}var Yr={lazy:!0};function Qr(t,e,n){var r=!Re();"function"==typeof n?(Zr.get=r?to(e):eo(n),Zr.set=ue):(Zr.get=n.get?r&&!1!==n.cache?to(e):eo(n.get):ue,Zr.set=n.set||ue),Object.defineProperty(t,e,Zr)}function to(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),Be.target&&e.depend(),e.value}}function eo(t){return function(){return t.call(this,this)}}function no(t,e,n,r){return Bt(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var ro=0;function oo(t){var e=t.options;if(t.super){var n=oo(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}(t);r&&se(t.extendOptions,r),(e=t.options=yn(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function io(t){this._init(t)}function ao(t){return t&&(t.Ctor.options.name||t.tag)}function so(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!function(t){return"[object RegExp]"===zt.call(t)}(t)&&t.test(e)}function co(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=ao(a.componentOptions);s&&!e(s)&&uo(n,i,r,o)}}}function uo(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,Zt(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=ro++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=yn(oo(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Pr(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,r=n&&n.context;t.$slots=qn(e._renderChildren,r),t.$scopedSlots=Rt,t._c=function(e,n,r,o){return wr(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return wr(t,e,n,r,o,!0)};var o=n&&n.data;an(t,"$attrs",o&&o.attrs||Rt,null,!0),an(t,"$listeners",e._parentListeners||Rt,null,!0)}(e),Lr(e,"beforeCreate"),function(t){var e=Gn(t.$options.inject,t);e&&(nn(!1),Object.keys(e).forEach((function(n){an(t,n,e[n])})),nn(!0))}(e),function(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&nn(!1);var i=function(i){o.push(i);var a=gn(i,e,n,t);an(r,i,a),i in t||Jr(t,"_props",i)};for(var a in e)i(a);nn(!0)}(t,e.props),e.methods&&function(t,e){for(var n in t.$options.props,e)t[n]="function"!=typeof e[n]?ue:ie(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;Bt(e=t._data="function"==typeof e?function(t,e){Ve();try{return t.call(e,e)}catch(t){return On(t,e,"data()"),{}}finally{Ke()}}(e,t):e||{})||(e={});for(var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);o--;){var i=n[o];r&&Yt(r,i)||be(i)||Jr(t,"_data",i)}on(e,!0)}(t):on(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=Re();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;r||(n[o]=new Xr(t,a||ue,ue,Yr)),o in t||Qr(t,o,i)}}(t,e.computed),e.watch&&e.watch!==Te&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)no(t,n,r[o]);else no(t,n,r)}}(t,e.watch)}(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),Lr(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(io),function(t){Object.defineProperty(t.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(t.prototype,"$props",{get:function(){return this._props}}),t.prototype.$set=sn,t.prototype.$delete=cn,t.prototype.$watch=function(t,e,n){var r=this;if(Bt(e))return no(r,t,e,n);(n=n||{}).user=!0;var o=new Xr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(t){On(t,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}(io),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?ae(n):n;for(var r=ae(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)An(n[i],e,r,e,o)}return e}}(io),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Tr(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Lr(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||Zt(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Lr(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(io),function(t){pr(t.prototype),t.prototype.$nextTick=function(t){return Nn(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Zn(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{kr=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){On(n,e,"render"),t=e._vnode}finally{kr=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof Ge||(t=Xe()),t.parent=o,t}}(io);var lo=[String,RegExp,Array],fo={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:lo,exclude:lo,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)uo(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){co(t,(function(t){return so(e,t)}))})),this.$watch("exclude",(function(e){co(t,(function(t){return!so(e,t)}))}))},render:function(){var t=this.$slots.default,e=Sr(t),n=e&&e.componentOptions;if(n){var r=ao(n),o=this.include,i=this.exclude;if(o&&(!r||!so(o,r))||i&&r&&so(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,Zt(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&uo(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return ge}};Object.defineProperty(t,"config",e),t.util={warn:Ue,extend:se,mergeOptions:yn,defineReactive:an},t.set=sn,t.delete=cn,t.nextTick=Nn,t.observable=function(t){return on(t),t},t.options=Object.create(null),ye.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,se(t.options.components,fo),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=ae(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=yn(this.options,t),this}}(t),function(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name,a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=yn(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Jr(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Qr(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,ye.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=se({},a.options),o[r]=a,a}}(t),function(t){ye.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&Bt(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(io),Object.defineProperty(io.prototype,"$isServer",{get:Re}),Object.defineProperty(io.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(io,"FunctionalRenderContext",{value:vr}),io.version="2.6.12";var po=qt("style,class"),vo=qt("input,textarea,option,select,progress"),ho=qt("contenteditable,draggable,spellcheck"),yo=qt("events,caret,typing,plaintext-only"),mo=qt("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),go="http://www.w3.org/1999/xlink",bo=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},_o=function(t){return bo(t)?t.slice(6,t.length):""},wo=function(t){return null==t||!1===t};function Oo(t,e){return{staticClass:Ao(t.staticClass,e.staticClass),class:Mt(t.class)?[t.class,e.class]:e.class}}function Ao(t,e){return t?e?t+" "+e:t:e||""}function ko(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)Mt(e=ko(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):Ut(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Co={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},xo=qt("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),So=qt("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Eo=function(t){return xo(t)||So(t)},jo=Object.create(null),$o=qt("text,number,password,search,email,tel,url"),Po=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Co[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Io={create:function(t,e){To(e)},update:function(t,e){t.data.ref!==e.data.ref&&(To(t,!0),To(e))},destroy:function(t){To(t,!0)}};function To(t,e){var n=t.data.ref;if(Mt(n)){var r=t.context,o=t.componentInstance||t.elm,i=r.$refs;e?Array.isArray(i[n])?Zt(i[n],o):i[n]===o&&(i[n]=void 0):t.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}var Do=new Ge("",{},[]),No=["create","activate","update","remove","destroy"];function Ro(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&Mt(t.data)===Mt(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=Mt(n=t.data)&&Mt(n=n.attrs)&&n.type,o=Mt(n=e.data)&&Mt(n=n.attrs)&&n.type;return r===o||$o(r)&&$o(o)}(t,e)||Ft(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&Lt(e.asyncFactory.error))}function Lo(t,e,n){var r,o,i={};for(r=e;r<=n;++r)Mt(o=t[r].key)&&(i[o]=r);return i}var Mo={create:Fo,update:Fo,destroy:function(t){Fo(t,Do)}};function Fo(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Do,a=e===Do,s=Uo(t.data.directives,t.context),c=Uo(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Bo(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(Bo(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)Bo(u[n],"inserted",e,t)};i?zn(e,"insert",f):f()}if(l.length&&zn(e,"postpatch",(function(){for(var n=0;n<l.length;n++)Bo(l[n],"componentUpdated",e,t)})),!i)for(n in s)c[n]||Bo(s[n],"unbind",t,t,a)}(t,e)}var Wo=Object.create(null);function Uo(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Wo),o[zo(r)]=r,r.def=mn(e.$options,"directives",r.name);return o}function zo(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Bo(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){On(r,n.context,"directive "+t.name+" "+e+" hook")}}var Ho=[Io,Mo];function Vo(t,e){var n=e.componentOptions;if(!(Mt(n)&&!1===n.Ctor.options.inheritAttrs||Lt(t.data.attrs)&&Lt(e.data.attrs))){var r,o,i=e.elm,a=t.data.attrs||{},s=e.data.attrs||{};for(r in Mt(s.__ob__)&&(s=e.data.attrs=se({},s)),s)o=s[r],a[r]!==o&&Ko(i,r,o);for(r in(Ee||$e)&&s.value!==a.value&&Ko(i,"value",s.value),a)Lt(s[r])&&(bo(r)?i.removeAttributeNS(go,_o(r)):ho(r)||i.removeAttribute(r))}}function Ko(t,e,n){t.tagName.indexOf("-")>-1?Go(t,e,n):mo(e)?wo(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):ho(e)?t.setAttribute(e,function(t,e){return wo(e)||"false"===e?"false":"contenteditable"===t&&yo(e)?e:"true"}(e,n)):bo(e)?wo(n)?t.removeAttributeNS(go,_o(e)):t.setAttributeNS(go,e,n):Go(t,e,n)}function Go(t,e,n){if(wo(n))t.removeAttribute(e);else{if(Ee&&!je&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var qo={create:Vo,update:Vo};function Xo(t,e){var n=e.elm,r=e.data,o=t.data;if(!(Lt(r.staticClass)&&Lt(r.class)&&(Lt(o)||Lt(o.staticClass)&&Lt(o.class)))){var i=function(t){for(var e=t.data,n=t,r=t;Mt(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Oo(r.data,e));for(;Mt(n=n.parent);)n&&n.data&&(e=Oo(e,n.data));return o=e.staticClass,i=e.class,Mt(o)||Mt(i)?Ao(o,ko(i)):"";var o,i}(e),a=n._transitionClasses;Mt(a)&&(i=Ao(i,ko(a))),i!==n._prevClass&&(n.setAttribute("class",i),n._prevClass=i)}}var Zo,Jo={create:Xo,update:Xo};function Yo(t,e,n){var r=Zo;return function o(){var i=e.apply(null,arguments);null!==i&&ei(t,o,n,r)}}var Qo=Sn&&!(Ie&&Number(Ie[1])<=53);function ti(t,e,n,r){if(Qo){var o=Hr,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}Zo.addEventListener(t,e,De?{capture:n,passive:r}:n)}function ei(t,e,n,r){(r||Zo).removeEventListener(t,e._wrapper||e,n)}function ni(t,e){if(!Lt(t.data.on)||!Lt(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Zo=e.elm,function(t){if(Mt(t.__r)){var e=Ee?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}Mt(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),Un(n,r,ti,ei,Yo,e.context),Zo=void 0}}var ri,oi={create:ni,update:ni};function ii(t,e){if(!Lt(t.data.domProps)||!Lt(e.data.domProps)){var n,r,o=e.elm,i=t.data.domProps||{},a=e.data.domProps||{};for(n in Mt(a.__ob__)&&(a=e.data.domProps=se({},a)),i)n in a||(o[n]="");for(n in a){if(r=a[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===i[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=r;var s=Lt(r)?"":String(r);ai(o,s)&&(o.value=s)}else if("innerHTML"===n&&So(o.tagName)&&Lt(o.innerHTML)){(ri=ri||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var c=ri.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;c.firstChild;)o.appendChild(c.firstChild)}else if(r!==i[n])try{o[n]=r}catch(t){}}}}function ai(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(Mt(r)){if(r.number)return Gt(n)!==Gt(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var si={create:ii,update:ii},ci=Qt((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function ui(t){var e=li(t.style);return t.staticStyle?se(t.staticStyle,e):e}function li(t){return Array.isArray(t)?ce(t):"string"==typeof t?ci(t):t}var fi,di=/^--/,pi=/\s*!important$/,vi=function(t,e,n){if(di.test(e))t.style.setProperty(e,n);else if(pi.test(n))t.style.setProperty(oe(e),n.replace(pi,""),"important");else{var r=yi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},hi=["Webkit","Moz","ms"],yi=Qt((function(t){if(fi=fi||document.createElement("div").style,"filter"!==(t=ee(t))&&t in fi)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<hi.length;n++){var r=hi[n]+e;if(r in fi)return r}}));function mi(t,e){var n=e.data,r=t.data;if(!(Lt(n.staticStyle)&&Lt(n.style)&&Lt(r.staticStyle)&&Lt(r.style))){var o,i,a=e.elm,s=r.staticStyle,c=r.normalizedStyle||r.style||{},u=s||c,l=li(e.data.style)||{};e.data.normalizedStyle=Mt(l.__ob__)?se({},l):l;var f=function(t,e){for(var n,r={},o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=ui(o.data))&&se(r,n);(n=ui(t.data))&&se(r,n);for(var i=t;i=i.parent;)i.data&&(n=ui(i.data))&&se(r,n);return r}(e);for(i in u)Lt(f[i])&&vi(a,i,"");for(i in f)(o=f[i])!==u[i]&&vi(a,i,null==o?"":o)}}var gi={create:mi,update:mi},bi=/\s+/;function _i(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(bi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function wi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(bi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Oi(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&se(e,Ai(t.name||"v")),se(e,t),e}return"string"==typeof t?Ai(t):void 0}}var Ai=Qt((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),ki=ke&&!je,Ci="transition",xi="animation",Si="transition",Ei="transitionend",ji="animation",$i="animationend";ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Si="WebkitTransition",Ei="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ji="WebkitAnimation",$i="webkitAnimationEnd"));var Pi=ke?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Ii(t){Pi((function(){Pi(t)}))}function Ti(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),_i(t,e))}function Di(t,e){t._transitionClasses&&Zt(t._transitionClasses,e),wi(t,e)}function Ni(t,e,n){var r=Li(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Ci?Ei:$i,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,l)}var Ri=/\b(transform|all)(,|$)/;function Li(t,e){var n,r=window.getComputedStyle(t),o=(r[Si+"Delay"]||"").split(", "),i=(r[Si+"Duration"]||"").split(", "),a=Mi(o,i),s=(r[ji+"Delay"]||"").split(", "),c=(r[ji+"Duration"]||"").split(", "),u=Mi(s,c),l=0,f=0;return e===Ci?a>0&&(n=Ci,l=a,f=i.length):e===xi?u>0&&(n=xi,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?Ci:xi:null)?n===Ci?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Ci&&Ri.test(r[Si+"Property"])}}function Mi(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Fi(e)+Fi(t[n])})))}function Fi(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Wi(t,e){var n=t.elm;Mt(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Oi(t.data.transition);if(!Lt(r)&&!Mt(n._enterCb)&&1===n.nodeType){for(var o=r.css,i=r.type,a=r.enterClass,s=r.enterToClass,c=r.enterActiveClass,u=r.appearClass,l=r.appearToClass,f=r.appearActiveClass,d=r.beforeEnter,p=r.enter,v=r.afterEnter,h=r.enterCancelled,y=r.beforeAppear,m=r.appear,g=r.afterAppear,b=r.appearCancelled,_=r.duration,w=Ir,O=Ir.$vnode;O&&O.parent;)w=O.context,O=O.parent;var A=!w._isMounted||!t.isRootInsert;if(!A||m||""===m){var k=A&&u?u:a,C=A&&f?f:c,x=A&&l?l:s,S=A&&y||d,E=A&&"function"==typeof m?m:p,j=A&&g||v,$=A&&b||h,P=Gt(Ut(_)?_.enter:_),I=!1!==o&&!je,T=Bi(E),D=n._enterCb=ve((function(){I&&(Di(n,x),Di(n,C)),D.cancelled?(I&&Di(n,k),$&&$(n)):j&&j(n),n._enterCb=null}));t.data.show||zn(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),E&&E(n,D)})),S&&S(n),I&&(Ti(n,k),Ti(n,C),Ii((function(){Di(n,k),D.cancelled||(Ti(n,x),T||(zi(P)?setTimeout(D,P):Ni(n,i,D)))}))),t.data.show&&(e&&e(),E&&E(n,D)),I||T||D()}}}function Ui(t,e){var n=t.elm;Mt(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Oi(t.data.transition);if(Lt(r)||1!==n.nodeType)return e();if(!Mt(n._leaveCb)){var o=r.css,i=r.type,a=r.leaveClass,s=r.leaveToClass,c=r.leaveActiveClass,u=r.beforeLeave,l=r.leave,f=r.afterLeave,d=r.leaveCancelled,p=r.delayLeave,v=r.duration,h=!1!==o&&!je,y=Bi(l),m=Gt(Ut(v)?v.leave:v),g=n._leaveCb=ve((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),h&&(Di(n,s),Di(n,c)),g.cancelled?(h&&Di(n,a),d&&d(n)):(e(),f&&f(n)),n._leaveCb=null}));p?p(b):b()}function b(){g.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),u&&u(n),h&&(Ti(n,a),Ti(n,c),Ii((function(){Di(n,a),g.cancelled||(Ti(n,s),y||(zi(m)?setTimeout(g,m):Ni(n,i,g)))}))),l&&l(n,g),h||y||g())}}function zi(t){return"number"==typeof t&&!isNaN(t)}function Bi(t){if(Lt(t))return!1;var e=t.fns;return Mt(e)?Bi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Hi(t,e){!0!==e.data.show&&Wi(e)}var Vi=function(t){var e,n,r={},o=t.modules,i=t.nodeOps;for(e=0;e<No.length;++e)for(r[No[e]]=[],n=0;n<o.length;++n)Mt(o[n][No[e]])&&r[No[e]].push(o[n][No[e]]);function a(t){var e=i.parentNode(t);Mt(e)&&i.removeChild(e,t)}function s(t,e,n,o,a,s,f){if(Mt(t.elm)&&Mt(s)&&(t=s[f]=Je(t)),t.isRootInsert=!a,!function(t,e,n,o){var i=t.data;if(Mt(i)){var a=Mt(t.componentInstance)&&i.keepAlive;if(Mt(i=i.hook)&&Mt(i=i.init)&&i(t,!1),Mt(t.componentInstance))return c(t,e),u(n,t.elm,o),Ft(a)&&function(t,e,n,o){for(var i,a=t;a.componentInstance;)if(Mt(i=(a=a.componentInstance._vnode).data)&&Mt(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](Do,a);e.push(a);break}u(n,t.elm,o)}(t,e,n,o),!0}}(t,e,n,o)){var v=t.data,h=t.children,y=t.tag;Mt(y)?(t.elm=t.ns?i.createElementNS(t.ns,y):i.createElement(y,t),p(t),l(t,h,e),Mt(v)&&d(t,e),u(n,t.elm,o)):Ft(t.isComment)?(t.elm=i.createComment(t.text),u(n,t.elm,o)):(t.elm=i.createTextNode(t.text),u(n,t.elm,o))}}function c(t,e){Mt(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,f(t)?(d(t,e),p(t)):(To(t),e.push(t))}function u(t,e,n){Mt(t)&&(Mt(n)?i.parentNode(n)===t&&i.insertBefore(t,e,n):i.appendChild(t,e))}function l(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)s(e[r],n,t.elm,null,!0,e,r);else Wt(t.text)&&i.appendChild(t.elm,i.createTextNode(String(t.text)))}function f(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return Mt(t.tag)}function d(t,n){for(var o=0;o<r.create.length;++o)r.create[o](Do,t);Mt(e=t.data.hook)&&(Mt(e.create)&&e.create(Do,t),Mt(e.insert)&&n.push(t))}function p(t){var e;if(Mt(e=t.fnScopeId))i.setStyleScope(t.elm,e);else for(var n=t;n;)Mt(e=n.context)&&Mt(e=e.$options._scopeId)&&i.setStyleScope(t.elm,e),n=n.parent;Mt(e=Ir)&&e!==t.context&&e!==t.fnContext&&Mt(e=e.$options._scopeId)&&i.setStyleScope(t.elm,e)}function v(t,e,n,r,o,i){for(;r<=o;++r)s(n[r],i,t,e,!1,n,r)}function h(t){var e,n,o=t.data;if(Mt(o))for(Mt(e=o.hook)&&Mt(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(Mt(e=t.children))for(n=0;n<t.children.length;++n)h(t.children[n])}function y(t,e,n){for(;e<=n;++e){var r=t[e];Mt(r)&&(Mt(r.tag)?(m(r),h(r)):a(r.elm))}}function m(t,e){if(Mt(e)||Mt(t.data)){var n,o=r.remove.length+1;for(Mt(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&a(t)}return n.listeners=e,n}(t.elm,o),Mt(n=t.componentInstance)&&Mt(n=n._vnode)&&Mt(n.data)&&m(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);Mt(n=t.data.hook)&&Mt(n=n.remove)?n(t,e):e()}else a(t.elm)}function g(t,e,n,r){for(var o=n;o<r;o++){var i=e[o];if(Mt(i)&&Ro(t,i))return o}}function b(t,e,n,o,a,c){if(t!==e){Mt(e.elm)&&Mt(o)&&(e=o[a]=Je(e));var u=e.elm=t.elm;if(Ft(t.isAsyncPlaceholder))Mt(e.asyncFactory.resolved)?O(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(Ft(e.isStatic)&&Ft(t.isStatic)&&e.key===t.key&&(Ft(e.isCloned)||Ft(e.isOnce)))e.componentInstance=t.componentInstance;else{var l,d=e.data;Mt(d)&&Mt(l=d.hook)&&Mt(l=l.prepatch)&&l(t,e);var p=t.children,h=e.children;if(Mt(d)&&f(e)){for(l=0;l<r.update.length;++l)r.update[l](t,e);Mt(l=d.hook)&&Mt(l=l.update)&&l(t,e)}Lt(e.text)?Mt(p)&&Mt(h)?p!==h&&function(t,e,n,r,o){for(var a,c,u,l=0,f=0,d=e.length-1,p=e[0],h=e[d],m=n.length-1,_=n[0],w=n[m],O=!o;l<=d&&f<=m;)Lt(p)?p=e[++l]:Lt(h)?h=e[--d]:Ro(p,_)?(b(p,_,r,n,f),p=e[++l],_=n[++f]):Ro(h,w)?(b(h,w,r,n,m),h=e[--d],w=n[--m]):Ro(p,w)?(b(p,w,r,n,m),O&&i.insertBefore(t,p.elm,i.nextSibling(h.elm)),p=e[++l],w=n[--m]):Ro(h,_)?(b(h,_,r,n,f),O&&i.insertBefore(t,h.elm,p.elm),h=e[--d],_=n[++f]):(Lt(a)&&(a=Lo(e,l,d)),Lt(c=Mt(_.key)?a[_.key]:g(_,e,l,d))?s(_,r,t,p.elm,!1,n,f):Ro(u=e[c],_)?(b(u,_,r,n,f),e[c]=void 0,O&&i.insertBefore(t,u.elm,p.elm)):s(_,r,t,p.elm,!1,n,f),_=n[++f]);l>d?v(t,Lt(n[m+1])?null:n[m+1].elm,n,f,m,r):f>m&&y(e,l,d)}(u,p,h,n,c):Mt(h)?(Mt(t.text)&&i.setTextContent(u,""),v(u,null,h,0,h.length-1,n)):Mt(p)?y(p,0,p.length-1):Mt(t.text)&&i.setTextContent(u,""):t.text!==e.text&&i.setTextContent(u,e.text),Mt(d)&&Mt(l=d.hook)&&Mt(l=l.postpatch)&&l(t,e)}}}function _(t,e,n){if(Ft(n)&&Mt(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var w=qt("attrs,class,staticClass,staticStyle,key");function O(t,e,n,r){var o,i=e.tag,a=e.data,s=e.children;if(r=r||a&&a.pre,e.elm=t,Ft(e.isComment)&&Mt(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(Mt(a)&&(Mt(o=a.hook)&&Mt(o=o.init)&&o(e,!0),Mt(o=e.componentInstance)))return c(e,n),!0;if(Mt(i)){if(Mt(s))if(t.hasChildNodes())if(Mt(o=a)&&Mt(o=o.domProps)&&Mt(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var u=!0,f=t.firstChild,p=0;p<s.length;p++){if(!f||!O(f,s[p],n,r)){u=!1;break}f=f.nextSibling}if(!u||f)return!1}else l(e,s,n);if(Mt(a)){var v=!1;for(var h in a)if(!w(h)){v=!0,d(e,n);break}!v&&a.class&&Ln(a.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,o){if(!Lt(e)){var a,c=!1,u=[];if(Lt(t))c=!0,s(e,u);else{var l=Mt(t.nodeType);if(!l&&Ro(t,e))b(t,e,u,null,null,o);else{if(l){if(1===t.nodeType&&t.hasAttribute(he)&&(t.removeAttribute(he),n=!0),Ft(n)&&O(t,e,u))return _(e,u,!0),t;a=t,t=new Ge(i.tagName(a).toLowerCase(),{},[],void 0,a)}var d=t.elm,p=i.parentNode(d);if(s(e,u,d._leaveCb?null:p,i.nextSibling(d)),Mt(e.parent))for(var v=e.parent,m=f(e);v;){for(var g=0;g<r.destroy.length;++g)r.destroy[g](v);if(v.elm=e.elm,m){for(var w=0;w<r.create.length;++w)r.create[w](Do,v);var A=v.data.hook.insert;if(A.merged)for(var k=1;k<A.fns.length;k++)A.fns[k]()}else To(v);v=v.parent}Mt(p)?y([t],0,0):Mt(t.tag)&&h(t)}}return _(e,u,c),e.elm}Mt(t)&&h(t)}}({nodeOps:Po,modules:[qo,Jo,oi,si,gi,ke?{create:Hi,activate:Hi,remove:function(t,e){!0!==t.data.show?Ui(t,e):e()}}:{}].concat(Ho)});je&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&Qi(t,"input")}));var Ki={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?zn(n,"postpatch",(function(){Ki.componentUpdated(t,e,n)})):Gi(t,e,n.context),t._vOptions=[].map.call(t.options,Zi)):("textarea"===n.tag||$o(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Ji),t.addEventListener("compositionend",Yi),t.addEventListener("change",Yi),je&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Gi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,Zi);o.some((function(t,e){return!de(t,r[e])}))&&(t.multiple?e.value.some((function(t){return Xi(t,o)})):e.value!==e.oldValue&&Xi(e.value,o))&&Qi(t,"change")}}};function Gi(t,e,n){qi(t,e),(Ee||$e)&&setTimeout((function(){qi(t,e)}),0)}function qi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=pe(r,Zi(a))>-1,a.selected!==i&&(a.selected=i);else if(de(Zi(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function Xi(t,e){return e.every((function(e){return!de(e,t)}))}function Zi(t){return"_value"in t?t._value:t.value}function Ji(t){t.target.composing=!0}function Yi(t){t.target.composing&&(t.target.composing=!1,Qi(t.target,"input"))}function Qi(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ta(t){return!t.componentInstance||t.data&&t.data.transition?t:ta(t.componentInstance._vnode)}var ea={model:Ki,show:{bind:function(t,e,n){var r=e.value,o=(n=ta(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,Wi(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=ta(n)).data&&n.data.transition?(n.data.show=!0,r?Wi(n,(function(){t.style.display=t.__vOriginalDisplay})):Ui(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},na={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ra(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ra(Sr(e.children)):t}function oa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[ee(i)]=o[i];return e}function ia(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var aa=function(t){return t.tag||xr(t)},sa=function(t){return"show"===t.name},ca={name:"transition",props:na,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(aa)).length){var r=this.mode,o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=ra(o);if(!i)return o;if(this._leaving)return ia(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:Wt(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=oa(this),c=this._vnode,u=ra(c);if(i.data.directives&&i.data.directives.some(sa)&&(i.data.show=!0),u&&u.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,u)&&!xr(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var l=u.data.transition=se({},s);if("out-in"===r)return this._leaving=!0,zn(l,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),ia(t,o);if("in-out"===r){if(xr(i))return c;var f,d=function(){f()};zn(s,"afterEnter",d),zn(s,"enterCancelled",d),zn(l,"delayLeave",(function(t){f=t}))}}return o}}},ua=se({tag:String,moveClass:String},na);function la(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function fa(t){t.data.newPos=t.elm.getBoundingClientRect()}function da(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete ua.mode;var pa={Transition:ca,TransitionGroup:{props:ua,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tr(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=oa(this),s=0;s<o.length;s++){var c=o[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?u.push(d):l.push(d)}this.kept=t(e,null,u),this.removed=l}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(la),t.forEach(fa),t.forEach(da),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Ti(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Ei,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Di(n,e))})}})))},methods:{hasMove:function(t,e){if(!ki)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){wi(n,t)})),_i(n,e),n.style.display="none",this.$el.appendChild(n);var r=Li(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};io.config.mustUseProp=function(t,e,n){return"value"===n&&vo(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},io.config.isReservedTag=Eo,io.config.isReservedAttr=po,io.config.getTagNamespace=function(t){return So(t)?"svg":"math"===t?"math":void 0},io.config.isUnknownElement=function(t){if(!ke)return!0;if(Eo(t))return!1;if(t=t.toLowerCase(),null!=jo[t])return jo[t];var e=document.createElement(t);return t.indexOf("-")>-1?jo[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:jo[t]=/HTMLUnknownElement/.test(e.toString())},se(io.options.directives,ea),se(io.options.components,pa),io.prototype.__patch__=ke?Vi:ue,io.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=Xe),Lr(t,"beforeMount"),r=function(){t._update(t._render(),n)},new Xr(t,r,ue,{before:function(){t._isMounted&&!t._isDestroyed&&Lr(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Lr(t,"mounted")),t}(this,t=t&&ke?function(t){return"string"==typeof t?document.querySelector(t)||document.createElement("div"):t}(t):void 0,e)},ke&&setTimeout((function(){ge.devtools&&Le&&Le.emit("init",io)}),0);const va=io,ha=va.extend({render:t=>t("div",[t("ul",[t("li",[t("a",{attrs:{href:"worker.html"}},"pekerja")]),t("li",[t("a",{attrs:{href:"tasks.html"}},"pekerjaan")]),t("li",[t("a",{attrs:{href:"performance.html"}},"kinerja")])]),t("hr"),t("h4","Daftarkan Pekerja Baru")])}),ya=va.extend({data:()=>({addWorker:{name:"",age:0,bio:"",address:"",photo:""}}),render(t){return t("div",[t("form",{attrs:{method:"post",id:"form"},on:{submit:this.submitWorker}},[t("label",{attrs:{for:"name"}},"Nama:"),t("br"),t("input",{domProps:{value:this.addWorker.name},attrs:{type:"text",name:"name",placeholder:"misal budiman",id:"name"},on:{input:t=>{this.addWorker.name=t.target.value}}}),t("br"),t("label",{attrs:{for:"age"}},"Umur:"),t("br"),t("input",{attrs:{type:"number",name:"age",placeholder:"misal 23",id:"age"},domProps:{value:this.addWorker.age},on:{input:t=>{this.addWorker.age=t.target.value}}}),t("br"),t("label",{attrs:{for:"photo"}},"Foto:"),t("br"),t("input",{attrs:{type:"file",name:"photo",id:"photo"},on:{input:t=>{this.addWorker.photo=t.target.files[0]}}}),t("br"),t("label",{attrs:{for:"bio"}},"Biodata Singkat:"),t("br"),t("textarea",{attrs:{name:"bio",id:"bio",cols:"30",rows:"3",placeholder:"biodata singkat pekerja"},domProps:{value:this.addWorker.bio},on:{input:t=>{this.addWorker.bio=t.target.value}}}),t("br"),t("label",{attrs:{for:"address"}},"Alamat:"),t("br"),t("textarea",{attrs:{name:"address",id:"address",cols:"30",rows:"3",placeholder:"alamat pekerja"},domProps:{value:this.addWorker.address},on:{input:t=>{this.addWorker.address=t.target.value}}}),t("br"),t("button",{attrs:{type:"submit"}},"kirim"),t("hr")])])},methods:{submitWorker(t){var e;t.preventDefault(),jt.dispatch(Et()),this.addWorker.name&&this.addWorker.age&&this.addWorker.bio&&this.addWorker.photo&&this.addWorker.address?(console.log(this.addWorker),jt.dispatch((e=this.addWorker,t=>Pt(void 0,void 0,void 0,(function*(){t(kt());try{const n=yield(t=>$t.post("http://localhost:7001/register",t))(e);t(Ct(n))}catch(n){t(At(`gagal mendaftarkan ${e.name}`))}})))),t.target.reset(),this.addWorker.name="",this.addWorker.photo="",this.addWorker.bio="",this.addWorker.address="",this.addWorker.age=0):jt.dispatch(At("form isian tidak lengkap!"))}}}),ma=va.extend({props:["worker"],render(t){return t("div",[t("img",{attrs:{width:"30px",height:"30px",src:this.$props.worker.photo,alt:"photo.jpg"}}),t("span",this.$props.worker.name),t("button",{on:{click:this.removeWorker}},"HAPUS")])},methods:{removeWorker(t){const{id:e}=this.$props.worker;jt.dispatch((t=>e=>Pt(void 0,void 0,void 0,(function*(){e(kt());try{yield(t=>$t.del(`http://localhost:7001/remove?id=${t}`))(t),e(xt(t))}catch(t){e(At("gagal menghapus pekerja"))}})))(e))}}}),ga=va.extend({props:["workers"],components:{Worker:ma},render(t){let e=[];for(const n of this.$props.workers)e.push(t("Worker",{props:{worker:n}}));return t("div",e)}});new va({el:"#app",components:{Header:ha,AddWorker:ya,WorkerList:ga},render(t){let e=t("Header"),n=t("AddWorker"),r=t("WorkerList",{props:{workers:this.workers}});return t("div",[e,t("p",{class:"error"},this.error),t("p",{class:"primary",style:{display:this.showLoading}},"memuat..."),n,r])},data:()=>({state:{},workers:[],showloading:"",error:"",errorText:"gagal memuat daftar pekerjaan"}),mounted(){jt.subscribe((()=>{const t=jt.getState();this.workers=t.workers,this.state=t,this.loading(),this.showError()})),jt.dispatch(It)},methods:{loading(){var t;(null===(t=this.state)||void 0===t?void 0:t.loading)?this.showLoading="":this.showLoading="none"},showError(){var t;(null===(t=this.state)||void 0===t?void 0:t.error)?this.error=this.state.error.toString():this.error=""}}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9tYWluLmNzcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9zdG9yZS50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9yZWR1Y2VyLnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvbGliL2h0dHAtY2xpZW50LnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL2FzeW5jLWFjdGlvbi50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci93b3JrZXIuY2xpZW50LnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL21haW4uY3NzPzU3YTYiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9jb21wb25lbnRzL0hlYWRlci50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9jb21wb25lbnRzL0Zvcm0udHMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvY29tcG9uZW50cy9Xb3JrZXIudHMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvY29tcG9uZW50cy93b3JrZXJMaXN0LnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL3YtZG9tLnRzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwicm9vdCIsIm9ic2VydmFibGUiLCJzZWxmIiwiZyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiaG1kIiwiY3JlYXRlIiwiY2hpbGRyZW4iLCJzZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJ0IiwiYXJndW1lbnRzIiwiciIsIlEiLCJnZXRQcm90b3R5cGVPZiIsIkwiLCJzIiwidiIsIloiLCJ1IiwiaGFzIiwiZiIsImRlbGV0ZSIsImFkZCIsImMiLCJYIiwiTWFwIiwicSIsIlNldCIsInAiLCJsIiwidHQiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInkiLCJjbGVhciIsImgiLCJmcmVlemUiLCJpc0Zyb3plbiIsImIiLCJudCIsIl8iLCJVIiwiaiIsInciLCJTIiwiTyIsIm0iLCJQIiwiTSIsIngiLCJIIiwiQSIsIkkiLCJrIiwiUiIsIkQiLCJOIiwieiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkUiLCJUIiwiRiIsIkMiLCJydCIsImV0IiwiUHJveHkiLCJyZXZvY2FibGUiLCJyZXZva2UiLCJwcm94eSIsIkoiLCJLIiwiRyIsIlciLCJCIiwiUmVmbGVjdCIsImZvciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlbGV0ZVByb3BlcnR5Iiwic2V0UHJvdG90eXBlT2YiLCJhcHBseSIsIm90IiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsInByb2R1Y2UiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJQcm9taXNlIiwidGhlbiIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJwYXRoIiwib3AiLCIkIiwidXQiLCJyYW5kb21TdHJpbmciLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwic3BsaXQiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXhPZiIsImRpc3BhdGNoIiwiYWN0aW9uIiwidHlwZSIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiU3RyaW5nIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiX2tleSIsImFyZyIsInJlZHVjZSIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbCIsImVxdWFsaXR5Q2hlY2siLCJwcmV2IiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIm1lbW9pemUiLCJtZW1vaXplT3B0aW9ucyIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsImZ1bmMiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJfZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2V0UHJvdG90eXBlT2YiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiRGF0ZSIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJpbnN0YW5jZSIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJmbiIsIldyYXBwZXIiLCJjb21wb3NlV2l0aERldlRvb2xzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiQWN0aW9uVHlwZSIsIk1pZGRsZXdhcmVBcnJheSIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9wcm90byIsIl9BcnJheSRwcm90b3R5cGUkY29uYyIsInByZXBlbmQiLCJfbGVuMiIsIl9rZXkyIiwiY3JlYXRlQWN0aW9uIiwicHJlcGFyZUFjdGlvbiIsImFjdGlvbkNyZWF0b3IiLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwiZXJyb3IiLCJtYXRjaCIsImFzeW5jSXRlcmF0b3IiLCJtaW4iLCJlcnJvckFjdGlvbiIsIkVSUk9SIiwibG9hZGluZ0FjdGlvbiIsIkxPQURJTkciLCJyZWdpc3RlcmVkQWN0aW9uIiwiUkVHSVNURVJFRCIsInJlbW92ZWRBY3Rpb24iLCJSRU1PVkVEIiwid29ya2Vyc0xvYWRlZEFjdGlvbiIsIldPUktFUlNfTE9BREVEIiwiY2xlYXJFcnJvckFjdGlvbiIsIkNMRUFSX0VSUk9SIiwic3RvcmUkIiwicm9vdFJlZHVjZXIiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJfb3B0aW9ucyIsIl9vcHRpb25zJHRodW5rIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiX3JlZiRyZWR1Y2VyIiwiX3JlZiRtaWRkbGV3YXJlIiwiX3JlZiRkZXZUb29scyIsImRldlRvb2xzIiwiX3JlZiRwcmVsb2FkZWRTdGF0ZSIsIl9yZWYkZW5oYW5jZXJzIiwiZW5oYW5jZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsInN0YXRlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJmaW5hbENvbXBvc2UiLCJ0cmFjZSIsInN0b3JlRW5oYW5jZXJzIiwiY29uZmlndXJlU3RvcmUiLCJpbml0aWFsU3RhdGUiLCJtYXBPckJ1aWxkZXJDYWxsYmFjayIsImFjdGlvbk1hdGNoZXJzIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYnVpbGRlckNhbGxiYWNrIiwiYWN0aW9uc01hcCIsImJ1aWxkZXIiLCJhZGRDYXNlIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJtYXRjaGVyIiwiYWRkRGVmYXVsdENhc2UiLCJleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImNhc2VSZWR1Y2VycyIsIl9yZWYzIiwiY3IiLCJwcmV2aW91c1N0YXRlIiwiY2FzZVJlZHVjZXIiLCJkcmFmdCIsIl9yZXN1bHQiLCJjcmVhdGVSZWR1Y2VyIiwibG9hZGluZyIsIndvcmtlcnMiLCJ3b3JrZXIiLCJwaG90byIsImJpbyIsImlkeCIsImZpbmRJbmRleCIsImVuZHBvaW50IiwianNvbiIsImhlYWRlcnMiLCJjb25maWciLCJtZXRob2QiLCJjdXN0b21Db25mIiwiYm9keSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJzdGF0dXNUZXh0IiwicmVqZWN0IiwibWVzc2FnZSIsInBvc3QiLCJwdXQiLCJkZWwiLCJnZXRMaXN0IiwiZW1wdHlPYmplY3QiLCJpc1VuZGVmIiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0IiwiX3RvU3RyaW5nIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsImNhdGNoIiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwiaGFzT3duIiwiY2FjaGVkIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vb3AiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwiaXNSZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJkZWYiLCJfaXNTZXJ2ZXIiLCJiYWlsUkUiLCJSZWdFeHAiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJ3YXJuIiwidWlkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGFnIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwibnMiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInBhcmVudCIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJzcmMiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJvYnNlcnZlIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsIl9pc1Z1ZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsInByb3BlcnR5Iiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiaG9vayIsImtleSQxIiwicHJvcHMiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJkZWZhdWx0IiwiJG9wdGlvbnMiLCJfcHJvcHMiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiaW5mbyIsImN1ciIsIiRwYXJlbnQiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwidGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwiZXZlbnQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwiaXNGYWxzZSIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJhdHRycyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicmVuZGVyTGlzdCIsInJlbmRlciIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInZhbHVlcyIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX3UiLCJfZyIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJjbG9uZSIsIm1lcmdlUHJvcHMiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCIkdm5vZGUiLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiZnVuY3Rpb25hbCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiZm9yY2UiLCJjb21wIiwidG9TdHJpbmdUYWciLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiaGFuZGxlcnMiLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJxdWV1ZSIsIndhaXRpbmciLCJmbHVzaGluZyIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwiYmVmb3JlIiwicnVuIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJ1c2VyIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwidXNlckRlZiIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiY29tcG9uZW50cyIsIlZ1ZSIsIl9pbml0IiwiZ2V0Q29tcG9uZW50TmFtZSIsInBhdHRlcm4iLCJpc1JlZ0V4cCIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIiRyb290IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiaXNTU1IiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJpbml0U3RhdGUiLCJpbml0UHJvdmlkZSIsImVsIiwiaW5pdE1peGluIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiJG9uY2UiLCJpJDEiLCJjYnMiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVmIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiTnVtYmVyIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJwYXJzZUludCIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdFVzZSIsIm1peGluIiwiaW5pdE1peGluJDEiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJpbml0RXh0ZW5kIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInNzckNvbnRleHQiLCJ2ZXJzaW9uIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwibm9kZU9wcyIsInRhZ05hbWUiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYmFzZVNldEF0dHIiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsImNoaWxkTm9kZSIsImR5bmFtaWNDbGFzcyIsImdlbkNsYXNzRm9yVm5vZGUiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJrbGFzcyIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiaW5uZXJIVE1MIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsImVuZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwicm0iLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGF0Y2giLCJiYWNrZW5kIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsInBhcmVudEVsbSIsInJlZkVsbSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsImNoaWxkRWxtIiwiY3JlYXRlUm1DYiIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJpc1JlbmRlcmVkTW9kdWxlIiwiaW5WUHJlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwib2xkRWxtIiwicGF0Y2hhYmxlIiwiaSQyIiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJzb21lIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwic2VsZWN0ZWQiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJwb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsImF0dHIiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsIm1vdW50Q29tcG9uZW50IiwicXVlcnkiLCJIZWFkZXIiLCJocmVmIiwiRm9ybSIsImFkZFdvcmtlciIsImFnZSIsImFkZHJlc3MiLCJzdWJtaXQiLCJzdWJtaXRXb3JrZXIiLCJpbnB1dCIsImZpbGVzIiwiY29scyIsInJvd3MiLCJwcmV2ZW50RGVmYXVsdCIsImxvZyIsInJlc2V0IiwiV29ya2VyIiwid2lkdGgiLCJoZWlnaHQiLCIkcHJvcHMiLCJhbHQiLCJjbGljayIsInJlbW92ZVdvcmtlciIsIldvcmtlckxpc3QiLCJBZGRXb3JrZXIiLCJjcmVhdGVFbCIsImhlYWRlciIsImZvcm0iLCJzaG93TG9hZGluZyIsInNob3dsb2FkaW5nIiwiZXJyb3JUZXh0Iiwic2hvd0Vycm9yIl0sIm1hcHBpbmdzIjoiO3VGQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLHNFQUF1RSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywwQ0FBMEMsTUFBUSxHQUFHLFNBQVcsMENBQTBDLGVBQWlCLENBQUMsdUVBQXVFLFdBQWEsTUFFM1YsVyxRQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNB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Q0FDTjhuQixHQUFJLE9BQ0pyQyxXQUFZLENBQ1Y2ZCxPQUFRQSxHQUNSdUIsVUFBV3JCLEdBQ1hvQixXQUFVLElBRVosT0FBT0UsR0FDTCxJQUFJQyxFQUFTRCxFQUFTLFVBQ2xCRSxFQUFPRixFQUFTLGFBQ2hCOWtDLEVBQVU4a0MsRUFBUyxhQUFjLENBQUUzMkIsTUFBTyxDQUFFbk8sUUFBU2xiLEtBQUtrYixXQUU5RCxPQUFPOGtDLEVBQVMsTUFBTyxDQUNyQkMsRUFDQUQsRUFDRSxJQUNBLENBQ0V6a0IsTUFBTyxTQUVUdjdCLEtBQUt1VyxPQUVQeXBDLEVBQ0UsSUFDQSxDQUNFemtCLE1BQU8sVUFDUDUxQixNQUFPLENBQ0xvMUMsUUFBUy82QyxLQUFLbWdELGNBR2xCLGFBRUZELEVBQ0FobEMsS0FHSjNYLEtBQUksS0FDSyxDQUNMdVYsTUFBTyxHQUNQb0MsUUFBUyxHQUNUa2xDLFlBQWEsR0FDYjdwQyxNQUFPLEdBQ1A4cEMsVUFBVyxrQ0FHZixVQUNFOW9DLEdBQU92RyxXQUFVLEtBQ2YsTUFBTThILEVBQVF2QixHQUFPeEcsV0FDckIvUSxLQUFLa2IsUUFBVXBDLEVBQU1vQyxRQUNyQmxiLEtBQUs4WSxNQUFRQSxFQUNiOVksS0FBS2liLFVBQ0xqYixLQUFLc2dELGVBRVAvb0MsR0FBT25HLFNBQWN1TCxLQUV2QjJNLFFBQVMsQ0FDUCxVLE9BQ2dCLFFBQWQsRUFBSXRwQixLQUFLOFksYUFBSyxlQUFFbUMsU0FDZGpiLEtBQUttZ0QsWUFBYyxHQUVuQm5nRCxLQUFLbWdELFlBQWMsUUFHdkIsWSxPQUNnQixRQUFkLEVBQUluZ0QsS0FBSzhZLGFBQUssZUFBRXZDLE9BQ2R2VyxLQUFLdVcsTUFBUXZXLEtBQUs4WSxNQUFNdkMsTUFBTXhXLFdBRTlCQyxLQUFLdVcsTUFBUSxRIiwiZmlsZSI6Indvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZWQ7XFxyXFxufVxcclxcbi5wcmltYXJ5IHtcXHJcXG4gIGNvbG9yOiBibHVlO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi93ZWJhcHAvc3JjL3dvcmtlci9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7QUFDWjtBQUNBO0VBQ0UsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5lcnJvciB7XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG4ucHJpbWFyeSB7XFxyXFxuICBjb2xvcjogYmx1ZTtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZnVuY3Rpb24gdCh0KXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KG4+MT9uLTE6MCksZT0xO2U8bjtlKyspcltlLTFdPWFyZ3VtZW50c1tlXTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgaT1ZW3RdLG89aT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkobnVsbCxyKTppOlwidW5rbm93biBlcnJvciBucjogXCIrdDt0aHJvdyBFcnJvcihcIltJbW1lcl0gXCIrbyl9dGhyb3cgRXJyb3IoXCJbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiBcIit0KyhyLmxlbmd0aD9cIiBcIityLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCInXCIrdCtcIidcIn0pKS5qb2luKFwiLFwiKTpcIlwiKStcIi4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZlwiKX1mdW5jdGlvbiBuKHQpe3JldHVybiEhdCYmISF0W1FdfWZ1bmN0aW9uIHIodCl7cmV0dXJuISF0JiYoZnVuY3Rpb24odCl7aWYoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybiExO3ZhciBuPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4hbnx8bj09PU9iamVjdC5wcm90b3R5cGV9KHQpfHxBcnJheS5pc0FycmF5KHQpfHwhIXRbTF18fCEhdC5jb25zdHJ1Y3RvcltMXXx8cyh0KXx8dih0KSl9ZnVuY3Rpb24gZShyKXtyZXR1cm4gbihyKXx8dCgyMyxyKSxyW1FdLnR9ZnVuY3Rpb24gaSh0LG4scil7dm9pZCAwPT09ciYmKHI9ITEpLDA9PT1vKHQpPyhyP09iamVjdC5rZXlzOlopKHQpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ImJlwic3ltYm9sXCI9PXR5cGVvZiBlfHxuKGUsdFtlXSx0KX0pKTp0LmZvckVhY2goKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIG4oZSxyLHQpfSkpfWZ1bmN0aW9uIG8odCl7dmFyIG49dFtRXTtyZXR1cm4gbj9uLmk+Mz9uLmktNDpuLmk6QXJyYXkuaXNBcnJheSh0KT8xOnModCk/Mjp2KHQpPzM6MH1mdW5jdGlvbiB1KHQsbil7cmV0dXJuIDI9PT1vKHQpP3QuaGFzKG4pOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pfWZ1bmN0aW9uIGEodCxuKXtyZXR1cm4gMj09PW8odCk/dC5nZXQobik6dFtuXX1mdW5jdGlvbiBmKHQsbixyKXt2YXIgZT1vKHQpOzI9PT1lP3Quc2V0KG4scik6Mz09PWU/KHQuZGVsZXRlKG4pLHQuYWRkKHIpKTp0W25dPXJ9ZnVuY3Rpb24gYyh0LG4pe3JldHVybiB0PT09bj8wIT09dHx8MS90PT0xL246dCE9dCYmbiE9bn1mdW5jdGlvbiBzKHQpe3JldHVybiBYJiZ0IGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYodCl7cmV0dXJuIHEmJnQgaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcCh0KXtyZXR1cm4gdC5vfHx0LnR9ZnVuY3Rpb24gbCh0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KTt2YXIgbj10dCh0KTtkZWxldGUgbltRXTtmb3IodmFyIHI9WihuKSxlPTA7ZTxyLmxlbmd0aDtlKyspe3ZhciBpPXJbZV0sbz1uW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYobltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOnRbaV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbil9ZnVuY3Rpb24gZCh0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseSh0KXx8bih0KXx8IXIodCk/dDoobyh0KT4xJiYodC5zZXQ9dC5hZGQ9dC5jbGVhcj10LmRlbGV0ZT1oKSxPYmplY3QuZnJlZXplKHQpLGUmJmkodCwoZnVuY3Rpb24odCxuKXtyZXR1cm4gZChuLCEwKX0pLCEwKSx0KX1mdW5jdGlvbiBoKCl7dCgyKX1mdW5jdGlvbiB5KHQpe3JldHVybiBudWxsPT10fHxcIm9iamVjdFwiIT10eXBlb2YgdHx8T2JqZWN0LmlzRnJvemVuKHQpfWZ1bmN0aW9uIGIobil7dmFyIHI9bnRbbl07cmV0dXJuIHJ8fHQoMTgsbikscn1mdW5jdGlvbiBtKHQsbil7bnRbdF18fChudFt0XT1uKX1mdW5jdGlvbiBfKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8VXx8dCgwKSxVfWZ1bmN0aW9uIGoodCxuKXtuJiYoYihcIlBhdGNoZXNcIiksdC51PVtdLHQucz1bXSx0LnY9bil9ZnVuY3Rpb24gZyh0KXt3KHQpLHQucC5mb3JFYWNoKFMpLHQucD1udWxsfWZ1bmN0aW9uIHcodCl7dD09PVUmJihVPXQubCl9ZnVuY3Rpb24gTyh0KXtyZXR1cm4gVT17cDpbXSxsOlUsaDp0LG06ITAsXzowfX1mdW5jdGlvbiBTKHQpe3ZhciBuPXRbUV07MD09PW4uaXx8MT09PW4uaT9uLmooKTpuLmc9ITB9ZnVuY3Rpb24gUChuLGUpe2UuXz1lLnAubGVuZ3RoO3ZhciBpPWUucFswXSxvPXZvaWQgMCE9PW4mJm4hPT1pO3JldHVybiBlLmguT3x8YihcIkVTNVwiKS5TKGUsbixvKSxvPyhpW1FdLlAmJihnKGUpLHQoNCkpLHIobikmJihuPU0oZSxuKSxlLmx8fHgoZSxuKSksZS51JiZiKFwiUGF0Y2hlc1wiKS5NKGlbUV0sbixlLnUsZS5zKSk6bj1NKGUsaSxbXSksZyhlKSxlLnUmJmUudihlLnUsZS5zKSxuIT09SD9uOnZvaWQgMH1mdW5jdGlvbiBNKHQsbixyKXtpZih5KG4pKXJldHVybiBuO3ZhciBlPW5bUV07aWYoIWUpcmV0dXJuIGkobiwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQSh0LGUsbixpLG8scil9KSwhMCksbjtpZihlLkEhPT10KXJldHVybiBuO2lmKCFlLlApcmV0dXJuIHgodCxlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKG4saSl7cmV0dXJuIEEodCxlLG8sbixpLHIpfSkpLHgodCxvLCExKSxyJiZ0LnUmJmIoXCJQYXRjaGVzXCIpLlIoZSxyLHQudSx0LnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJnQoNSksbihjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIW4odikpcmV0dXJuO2UubT0hMX1pZihyKGMpJiYheShjKSl7aWYoIWUuaC5OJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgodCxuLHIpe3ZvaWQgMD09PXImJihyPSExKSx0LmguTiYmdC5tJiZkKG4scil9ZnVuY3Rpb24geih0LG4pe3ZhciByPXRbUV07cmV0dXJuKHI/cChyKTp0KVtuXX1mdW5jdGlvbiBJKHQsbil7aWYobiBpbiB0KWZvcih2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cjspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixuKTtpZihlKXJldHVybiBlO3I9T2JqZWN0LmdldFByb3RvdHlwZU9mKHIpfX1mdW5jdGlvbiBrKHQpe3QuUHx8KHQuUD0hMCx0LmwmJmsodC5sKSl9ZnVuY3Rpb24gRSh0KXt0Lm98fCh0Lm89bCh0LnQpKX1mdW5jdGlvbiBSKHQsbixyKXt2YXIgZT1zKG4pP2IoXCJNYXBTZXRcIikuVChuLHIpOnYobik/YihcIk1hcFNldFwiKS5GKG4scik6dC5PP2Z1bmN0aW9uKHQsbil7dmFyIHI9QXJyYXkuaXNBcnJheSh0KSxlPXtpOnI/MTowLEE6bj9uLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6bix0OnQsazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89cnQ7ciYmKGk9W2VdLG89ZXQpO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShuLHIpOmIoXCJFUzVcIikuSihuLHIpO3JldHVybihyP3IuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIG4oZSl8fHQoMjIsZSksZnVuY3Rpb24gdChuKXtpZighcihuKSlyZXR1cm4gbjt2YXIgZSx1PW5bUV0sYz1vKG4pO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1OKG4sYyksdS5JPSExfWVsc2UgZT1OKG4sYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24obixyKXt1JiZhKHUudCxuKT09PXJ8fGYoZSxuLHQocikpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gTih0LG4pe3N3aXRjaChuKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAodCk7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKHQpfXJldHVybiBsKHQpfWZ1bmN0aW9uIFQoKXtmdW5jdGlvbiByKHQsbil7dmFyIHI9c1t0XTtyZXR1cm4gcj9yLmVudW1lcmFibGU9bjpzW3RdPXI9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOm4sZ2V0OmZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKG4pLHJ0LmdldChuLHQpfSxzZXQ6ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLHJ0LnNldChyLHQsbil9fSxyfWZ1bmN0aW9uIGUodCl7Zm9yKHZhciBuPXQubGVuZ3RoLTE7bj49MDtuLS0pe3ZhciByPXRbbl1bUV07aWYoIXIuUClzd2l0Y2goci5pKXtjYXNlIDU6YShyKSYmayhyKTticmVhaztjYXNlIDQ6byhyKSYmayhyKX19fWZ1bmN0aW9uIG8odCl7Zm9yKHZhciBuPXQudCxyPXQuayxlPVoociksaT1lLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbz1lW2ldO2lmKG8hPT1RKXt2YXIgYT1uW29dO2lmKHZvaWQgMD09PWEmJiF1KG4sbykpcmV0dXJuITA7dmFyIGY9cltvXSxzPWYmJmZbUV07aWYocz9zLnQhPT1hOiFjKGYsYSkpcmV0dXJuITB9fXZhciB2PSEhbltRXTtyZXR1cm4gZS5sZW5ndGghPT1aKG4pLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEodCl7dmFyIG49dC5rO2lmKG4ubGVuZ3RoIT09dC50Lmxlbmd0aClyZXR1cm4hMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sbi5sZW5ndGgtMSk7cmV0dXJuISghcnx8ci5nZXQpfWZ1bmN0aW9uIGYobil7bi5nJiZ0KDMsSlNPTi5zdHJpbmdpZnkocChuKSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbih0LG4pe3ZhciBlPUFycmF5LmlzQXJyYXkodCksaT1mdW5jdGlvbih0LG4pe2lmKHQpe2Zvcih2YXIgZT1BcnJheShuLmxlbmd0aCksaT0wO2k8bi5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSxyKGksITApKTtyZXR1cm4gZX12YXIgbz10dChuKTtkZWxldGUgb1tRXTtmb3IodmFyIHU9WihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT1yKGYsdHx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSxvKX0oZSx0KSxvPXtpOmU/NTo0LEE6bj9uLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6bix0OnQsazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbih0LHIsbyl7bz9uKHIpJiZyW1FdLkE9PT10JiZlKHQucCk6KHQudSYmZnVuY3Rpb24gdChuKXtpZihuJiZcIm9iamVjdFwiPT10eXBlb2Ygbil7dmFyIHI9bltRXTtpZihyKXt2YXIgZT1yLnQsbz1yLmssZj1yLkQsYz1yLmk7aWYoND09PWMpaShvLChmdW5jdGlvbihuKXtuIT09USYmKHZvaWQgMCE9PWVbbl18fHUoZSxuKT9mW25dfHx0KG9bbl0pOihmW25dPSEwLGsocikpKX0pKSxpKGUsKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PW9bdF18fHUobyx0KXx8KGZbdF09ITEsayhyKSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYShyKSYmKGsociksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKyl2b2lkIDA9PT1mW2xdJiZ0KG9bbF0pfX19fSh0LnBbMF0pLGUodC5wKSl9LEs6ZnVuY3Rpb24odCl7cmV0dXJuIDQ9PT10Lmk/byh0KTphKHQpfX0pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiBlKHQpe2lmKCFyKHQpKXJldHVybiB0O2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIHQubWFwKGUpO2lmKHModCkpcmV0dXJuIG5ldyBNYXAoQXJyYXkuZnJvbSh0LmVudHJpZXMoKSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm5bdFswXSxlKHRbMV0pXX0pKSk7aWYodih0KSlyZXR1cm4gbmV3IFNldChBcnJheS5mcm9tKHQpLm1hcChlKSk7dmFyIG49T2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpO2Zvcih2YXIgaSBpbiB0KW5baV09ZSh0W2ldKTtyZXR1cm4gbn1mdW5jdGlvbiBmKHQpe3JldHVybiBuKHQpP2UodCk6dH12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihyKXtmb3IodmFyIGk9ci5wYXRoLHU9ci5vcCxmPW4scz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdOzAhPT12JiYxIT09dnx8XCJfX3Byb3RvX19cIiE9PXAmJlwiY29uc3RydWN0b3JcIiE9PXB8fHQoMjQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJlwicHJvdG90eXBlXCI9PT1wJiZ0KDI0KSxcIm9iamVjdFwiIT10eXBlb2YoZj1hKGYscCkpJiZ0KDE1LGkuam9pbihcIi9cIikpfXZhciBsPW8oZiksZD1lKHIudmFsdWUpLGg9aVtpLmxlbmd0aC0xXTtzd2l0Y2godSl7Y2FzZVwicmVwbGFjZVwiOnN3aXRjaChsKXtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOnQoMTYpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlIGM6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gZi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZShyLnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0OnQoMTcsdSl9fSkpLG59LFI6ZnVuY3Rpb24odCxuLHIsZSl7c3dpdGNoKHQuaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHQsbixyLGUpe3ZhciBvPXQudCxzPXQubztpKHQuRCwoZnVuY3Rpb24odCxpKXt2YXIgdj1hKG8sdCkscD1hKHMsdCksbD1pP3Uobyx0KT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9bi5jb25jYXQodCk7ci5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfSh0LG4scixlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0LG4scixlKXt2YXIgaT10LnQsbz10LkQsdT10Lm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2Uscl07cj1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9bi5jb25jYXQoW3ZdKTtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9bi5jb25jYXQoW2xdKTtyLnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOm4uY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0odCxuLHIsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0LG4scixlKXt2YXIgaT10LnQsbz10Lm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoIW8uaGFzKHQpKXt2YXIgaT1uLmNvbmNhdChbdV0pO3IucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6dH0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6dH0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbih0KXtpZighaS5oYXModCkpe3ZhciBvPW4uY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTp0fSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTp0fSl9dSsrfSkpfSh0LG4scixlKX19LE06ZnVuY3Rpb24odCxuLHIsZSl7ci5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6dC50fSl9fSl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIG4odCxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWEodCxuKSx0LnByb3RvdHlwZT0oci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIGUodCl7dC5vfHwodC5EPW5ldyBNYXAsdC5vPW5ldyBNYXAodC50KSl9ZnVuY3Rpb24gbyh0KXt0Lm98fCh0Lm89bmV3IFNldCx0LnQuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYocihuKSl7dmFyIGU9Uih0LkEuaCxuLHQpO3QucC5zZXQobixlKSx0Lm8uYWRkKGUpfWVsc2UgdC5vLmFkZChuKX0pKSl9ZnVuY3Rpb24gdShuKXtuLmcmJnQoMyxKU09OLnN0cmluZ2lmeShwKG4pKSl9dmFyIGE9ZnVuY3Rpb24odCxuKXtyZXR1cm4oYT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxuKXt0Ll9fcHJvdG9fXz1ufXx8ZnVuY3Rpb24odCxuKXtmb3IodmFyIHIgaW4gbiluLmhhc093blByb3BlcnR5KHIpJiYodFtyXT1uW3JdKX0pKHQsbil9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIHRoaXNbUV09e2k6MixsOm4sQTpuP24uQTpfKCksUDohMSxJOiExLG86dm9pZCAwLEQ6dm9pZCAwLHQ6dCxrOnRoaXMsQzohMSxnOiExfSx0aGlzfW4odCxNYXApO3ZhciBvPXQucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxvLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gcCh0aGlzW1FdKS5oYXModCl9LG8uc2V0PWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxwKHIpLmhhcyh0KSYmcChyKS5nZXQodCk9PT1ufHwoZShyKSxrKHIpLHIuRC5zZXQodCwhMCksci5vLnNldCh0LG4pLHIuRC5zZXQodCwhMCkpLHRoaXN9LG8uZGVsZXRlPWZ1bmN0aW9uKHQpe2lmKCF0aGlzLmhhcyh0KSlyZXR1cm4hMTt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLGUobiksayhuKSxuLkQuc2V0KHQsITEpLG4uby5kZWxldGUodCksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzW1FdO3UodCkscCh0KS5zaXplJiYoZSh0KSxrKHQpLHQuRD1uZXcgTWFwLGkodC50LChmdW5jdGlvbihuKXt0LkQuc2V0KG4sITEpfSkpLHQuby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7dC5jYWxsKG4sci5nZXQoaSksaSxyKX0pKX0sby5nZXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tRXTt1KG4pO3ZhciBpPXAobikuZ2V0KHQpO2lmKG4uSXx8IXIoaSkpcmV0dXJuIGk7aWYoaSE9PW4udC5nZXQodCkpcmV0dXJuIGk7dmFyIG89UihuLkEuaCxpLG4pO3JldHVybiBlKG4pLG4uby5zZXQodCxvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKHQ9e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIG4udmFsdWVzKCl9LHQubmV4dD1mdW5jdGlvbigpe3ZhciB0PXIubmV4dCgpO3JldHVybiB0LmRvbmU/dDp7ZG9uZTohMSx2YWx1ZTpuLmdldCh0LnZhbHVlKX19LHR9LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciB0LG49dGhpcyxyPXRoaXMua2V5cygpO3JldHVybih0PXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiBuLmVudHJpZXMoKX0sdC5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ci5uZXh0KCk7aWYodC5kb25lKXJldHVybiB0O3ZhciBlPW4uZ2V0KHQudmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOlt0LnZhbHVlLGVdfX0sdH0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sdH0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LG4pe3JldHVybiB0aGlzW1FdPXtpOjMsbDpuLEE6bj9uLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0OnQsazp0aGlzLHA6bmV3IE1hcCxnOiExLEM6ITF9LHRoaXN9bih0LFNldCk7dmFyIHI9dC5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHIuaGFzPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbi5vPyEhbi5vLmhhcyh0KXx8ISghbi5wLmhhcyh0KXx8IW4uby5oYXMobi5wLmdldCh0KSkpOm4udC5oYXModCl9LHIuYWRkPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksdGhpcy5oYXModCl8fChvKG4pLGsobiksbi5vLmFkZCh0KSksdGhpc30sci5kZWxldGU9ZnVuY3Rpb24odCl7aWYoIXRoaXMuaGFzKHQpKXJldHVybiExO3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxrKG4pLG4uby5kZWxldGUodCl8fCEhbi5wLmhhcyh0KSYmbi5vLmRlbGV0ZShuLnAuZ2V0KHQpKX0sci5jbGVhcj1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07dSh0KSxwKHQpLnNpemUmJihvKHQpLGsodCksdC5vLmNsZWFyKCkpfSxyLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSx0Lm8udmFsdWVzKCl9LHIuZW50cmllcz1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSx0Lm8uZW50cmllcygpfSxyLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0scltWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyLmZvckVhY2g9ZnVuY3Rpb24odCxuKXtmb3IodmFyIHI9dGhpcy52YWx1ZXMoKSxlPXIubmV4dCgpOyFlLmRvbmU7KXQuY2FsbChuLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXIubmV4dCgpfSx0fSgpO20oXCJNYXBTZXRcIix7VDpmdW5jdGlvbih0LG4pe3JldHVybiBuZXcgZih0LG4pfSxGOmZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBjKHQsbil9fSl9ZnVuY3Rpb24gSigpe1QoKSxDKCksRigpfWZ1bmN0aW9uIEsodCl7cmV0dXJuIHR9ZnVuY3Rpb24gJCh0KXtyZXR1cm4gdH12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKHQpe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIit0fSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24odCl7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIit0fSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24odCl7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK3R9LDE4OmZ1bmN0aW9uKHQpe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK3QrXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrdCtcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbih0KXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK3QrXCInXCJ9LDIyOmZ1bmN0aW9uKHQpe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIit0fSwyMzpmdW5jdGlvbih0KXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK3R9LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsdHQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKHQpe3ZhciBuPXt9O3JldHVybiBaKHQpLmZvckVhY2goKGZ1bmN0aW9uKHIpe25bcl09T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpfSkpLG59LG50PXt9LHJ0PXtnZXQ6ZnVuY3Rpb24odCxuKXtpZihuPT09USlyZXR1cm4gdDt2YXIgZT1wKHQpO2lmKCF1KGUsbikpcmV0dXJuIGZ1bmN0aW9uKHQsbixyKXt2YXIgZSxpPUkobixyKTtyZXR1cm4gaT9cInZhbHVlXCJpbiBpP2kudmFsdWU6bnVsbD09PShlPWkuZ2V0KXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKHQuayk6dm9pZCAwfSh0LGUsbik7dmFyIGk9ZVtuXTtyZXR1cm4gdC5JfHwhcihpKT9pOmk9PT16KHQudCxuKT8oRSh0KSx0Lm9bbl09Uih0LkEuaCxpLHQpKTppfSxoYXM6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbiBpbiBwKHQpfSxvd25LZXlzOmZ1bmN0aW9uKHQpe3JldHVybiBSZWZsZWN0Lm93bktleXMocCh0KSl9LHNldDpmdW5jdGlvbih0LG4scil7dmFyIGU9SShwKHQpLG4pO2lmKG51bGw9PWU/dm9pZCAwOmUuc2V0KXJldHVybiBlLnNldC5jYWxsKHQuayxyKSwhMDtpZighdC5QKXt2YXIgaT16KHAodCksbiksbz1udWxsPT1pP3ZvaWQgMDppW1FdO2lmKG8mJm8udD09PXIpcmV0dXJuIHQub1tuXT1yLHQuRFtuXT0hMSwhMDtpZihjKHIsaSkmJih2b2lkIDAhPT1yfHx1KHQudCxuKSkpcmV0dXJuITA7RSh0KSxrKHQpfXJldHVybiB0Lm9bbl09cix0LkRbbl09ITAsITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMCE9PXoodC50LG4pfHxuIGluIHQudD8odC5EW25dPSExLEUodCksayh0KSk6ZGVsZXRlIHQuRFtuXSx0Lm8mJmRlbGV0ZSB0Lm9bbl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbih0LG4pe3ZhciByPXAodCksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLG4pO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PXQuaXx8XCJsZW5ndGhcIiE9PW4sZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6cltuXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXt0KDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe3QoMTIpfX0sZXQ9e307aShydCwoZnVuY3Rpb24odCxuKXtldFt0XT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxldC5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihuLHIpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHIpKSYmdCgxMykscnQuZGVsZXRlUHJvcGVydHkuY2FsbCh0aGlzLG5bMF0scil9LGV0LnNldD1mdW5jdGlvbihuLHIsZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJsZW5ndGhcIiE9PXImJmlzTmFOKHBhcnNlSW50KHIpKSYmdCgxNCkscnQuc2V0LmNhbGwodGhpcyxuWzBdLHIsZSxuWzBdKX07dmFyIGl0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt0aGlzLk89Qix0aGlzLk49ITAsXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0LnVzZVByb3hpZXMpJiZ0aGlzLnNldFVzZVByb3hpZXModC51c2VQcm94aWVzKSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnQuYXV0b0ZyZWV6ZSkmJnRoaXMuc2V0QXV0b0ZyZWV6ZSh0LmF1dG9GcmVlemUpLHRoaXMucHJvZHVjZT10aGlzLnByb2R1Y2UuYmluZCh0aGlzKSx0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcz10aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKHRoaXMpfXZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLnByb2R1Y2U9ZnVuY3Rpb24obixlLGkpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpe3ZhciBvPWU7ZT1uO3ZhciB1PXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7dm9pZCAwPT09dCYmKHQ9byk7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheShyPjE/ci0xOjApLGE9MTthPHI7YSsrKWlbYS0xXT1hcmd1bWVudHNbYV07cmV0dXJuIHUucHJvZHVjZSh0LChmdW5jdGlvbih0KXt2YXIgcjtyZXR1cm4ocj1lKS5jYWxsLmFwcGx5KHIsW24sdF0uY29uY2F0KGkpKX0pKX19dmFyIGE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmdCg2KSx2b2lkIDAhPT1pJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZ0KDcpLHIobikpe3ZhciBmPU8odGhpcyksYz1SKHRoaXMsbix2b2lkIDApLHM9ITA7dHJ5e2E9ZShjKSxzPSExfWZpbmFsbHl7cz9nKGYpOncoZil9cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJmEgaW5zdGFuY2VvZiBQcm9taXNlP2EudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGooZixpKSxQKHQsZil9KSwoZnVuY3Rpb24odCl7dGhyb3cgZyhmKSx0fSkpOihqKGYsaSksUChhLGYpKX1pZighbnx8XCJvYmplY3RcIiE9dHlwZW9mIG4pe2lmKChhPWUobikpPT09SClyZXR1cm47cmV0dXJuIHZvaWQgMD09PWEmJihhPW4pLHRoaXMuTiYmZChhLCEwKSxhfXQoMjEsbil9LGkucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKHQsbil7dmFyIHIsZSxpPXRoaXM7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD9mdW5jdGlvbihuKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHI+MT9yLTE6MCksbz0xO288cjtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gaS5wcm9kdWNlV2l0aFBhdGNoZXMobiwoZnVuY3Rpb24obil7cmV0dXJuIHQuYXBwbHkodm9pZCAwLFtuXS5jb25jYXQoZSkpfSkpfTpbdGhpcy5wcm9kdWNlKHQsbiwoZnVuY3Rpb24odCxuKXtyPXQsZT1ufSkpLHIsZV19LGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7cihlKXx8dCg4KSxuKGUpJiYoZT1EKGUpKTt2YXIgaT1PKHRoaXMpLG89Uih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLHcoaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbihuLHIpe3ZhciBlPW4mJm5bUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8dCg5KSxlLkkmJnQoMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSxyKSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKHQpe3RoaXMuTj10fSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24obil7biYmIUImJnQoMjApLHRoaXMuTz1ufSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbih0LHIpe3ZhciBlO2ZvcihlPXIubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXJbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7dD1pLnZhbHVlO2JyZWFrfX12YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiBuKHQpP28odCxyKTp0aGlzLnByb2R1Y2UodCwoZnVuY3Rpb24odCl7cmV0dXJuIG8odCxyLnNsaWNlKGUrMSkpfSkpfSxlfSgpLG90PW5ldyBpdCx1dD1vdC5wcm9kdWNlLGF0PW90LnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKG90KSxmdD1vdC5zZXRBdXRvRnJlZXplLmJpbmQob3QpLGN0PW90LnNldFVzZVByb3hpZXMuYmluZChvdCksc3Q9b3QuYXBwbHlQYXRjaGVzLmJpbmQob3QpLHZ0PW90LmNyZWF0ZURyYWZ0LmJpbmQob3QpLHB0PW90LmZpbmlzaERyYWZ0LmJpbmQob3QpO2V4cG9ydCBkZWZhdWx0IHV0O2V4cG9ydHtpdCBhcyBJbW1lcixzdCBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLHZ0IGFzIGNyZWF0ZURyYWZ0LEQgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsVCBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsRiBhcyBlbmFibGVQYXRjaGVzLHB0IGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLG4gYXMgaXNEcmFmdCxyIGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLHV0IGFzIHByb2R1Y2UsYXQgYXMgcHJvZHVjZVdpdGhQYXRjaGVzLGZ0IGFzIHNldEF1dG9GcmVlemUsY3QgYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVtb2l6ZU9wdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB2YXIgcmVzdWx0RnVuYyA9IGZ1bmNzLnBvcCgpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXG4gICAgdmFyIG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUuYXBwbHkodW5kZWZpbmVkLCBbZnVuY3Rpb24gKCkge1xuICAgICAgcmVjb21wdXRhdGlvbnMrKztcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChtZW1vaXplT3B0aW9ucykpO1xuXG4gICAgLy8gSWYgYSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgZXhhY3Qgc2FtZSBhcmd1bWVudHMgd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSBvdXIgZGVwZW5kZW5jaWVzIGFnYWluLlxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBjcmVhdGVOZXh0U3RhdGUsIHsgaXNEcmFmdCwgY3VycmVudCwgaXNEcmFmdGFibGUsIGVuYWJsZUVTNSB9IGZyb20gJ2ltbWVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlTmV4dFN0YXRlLCBjdXJyZW50LCBmcmVlemUgfSBmcm9tICdpbW1lcic7XG5pbXBvcnQgeyBjb21wb3NlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5leHBvcnQgKiBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmV4cG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tICdyZWR1eC10aHVuayc7XG5cbi8qKlxyXG4gKiBcIkRyYWZ0LVNhZmVcIiB2ZXJzaW9uIG9mIGByZXNlbGVjdGAncyBgY3JlYXRlU2VsZWN0b3JgOlxyXG4gKiBJZiBhbiBgaW1tZXJgLWRyYWZ0ZWQgb2JqZWN0IGlzIHBhc3NlZCBpbnRvIHRoZSByZXN1bHRpbmcgc2VsZWN0b3IncyBmaXJzdCBhcmd1bWVudCxcclxuICogdGhlIHNlbGVjdG9yIHdpbGwgYWN0IG9uIHRoZSBjdXJyZW50IGRyYWZ0IHZhbHVlLCBpbnN0ZWFkIG9mIHJldHVybmluZyBhIGNhY2hlZCB2YWx1ZVxyXG4gKiB0aGF0IG1pZ2h0IGJlIHBvc3NpYmx5IG91dGRhdGVkIGlmIHRoZSBkcmFmdCBoYXMgYmVlbiBtb2RpZmllZCBzaW5jZS5cclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IoKSB7XG4gIHZhciBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gd3JhcHBlZFNlbGVjdG9yKHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgW2lzRHJhZnQodmFsdWUpID8gY3VycmVudCh2YWx1ZSkgOiB2YWx1ZV0uY29uY2F0KHJlc3QpKTtcbiAgfTtcblxuICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xufTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHJldHVybiBjb21wb3NlO1xuICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIFwicGxhaW5cIiBvYmplY3QsIGkuZS4gYW4gb2JqZWN0IHdob3NlXHJcbiAqIHByb3RveXBlIGlzIHRoZSByb290IGBPYmplY3QucHJvdG90eXBlYC4gVGhpcyBpbmNsdWRlcyBvYmplY3RzIGNyZWF0ZWRcclxuICogdXNpbmcgb2JqZWN0IGxpdGVyYWxzLCBidXQgbm90IGZvciBpbnN0YW5jZSBmb3IgY2xhc3MgaW5zdGFuY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSB2YWx1ZTtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBwcm90bztcbn1cblxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XG4gIHZhciBlbGFwc2VkID0gMDtcbiAgcmV0dXJuIHtcbiAgICBtZWFzdXJlVGltZTogZnVuY3Rpb24gbWVhc3VyZVRpbWUoZm4pIHtcbiAgICAgIHZhciBzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiB3YXJuSWZFeGNlZWRlZCgpIHtcbiAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIE1pZGRsZXdhcmVBcnJheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1pZGRsZXdhcmVBcnJheSwgX0FycmF5KTtcblxuICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XG4gICAgcmV0dXJuIF9BcnJheS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBfQXJyYXkkcHJvdG90eXBlJGNvbmM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJyW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RydWN0KE1pZGRsZXdhcmVBcnJheSwgKF9BcnJheSRwcm90b3R5cGUkY29uYyA9IF9BcnJheS5wcm90b3R5cGUuY29uY2F0KS5jYWxsLmFwcGx5KF9BcnJheSRwcm90b3R5cGUkY29uYywgW3RoaXNdLmNvbmNhdChhcnIpKSk7XG4gIH07XG5cbiAgX3Byb3RvLnByZXBlbmQgPSBmdW5jdGlvbiBwcmVwZW5kKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcnJbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KE1pZGRsZXdhcmVBcnJheSwgYXJyWzBdLmNvbmNhdCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCBhcnIuY29uY2F0KHRoaXMpKTtcbiAgfTtcblxuICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xufShcbi8qI19fUFVSRV9fKi9cbl93cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnOyAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGUgY29uZGl0aW9uIGZhaWxzXG4vLyBTdHJpcCBvdXQgZXJyb3IgbWVzc2FnZXMgZm9yIHByb2R1Y3Rpb25cbi8vID4gTm90IHByb3ZpZGluZyBhbiBpbmxpbmUgZGVmYXVsdCBhcmd1bWVudCBmb3IgbWVzc2FnZSBhcyB0aGUgcmVzdWx0IGlzIHNtYWxsZXJcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENvbmRpdGlvbiBub3QgcGFzc2VkXG4gIC8vIEluIHByb2R1Y3Rpb24gd2Ugc3RyaXAgdGhlIG1lc3NhZ2UgYnV0IHN0aWxsIHRocm93XG5cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gLy8gV2hlbiBub3QgaW4gcHJvZHVjdGlvbiB3ZSBhbGxvdyB0aGUgbWVzc2FnZSB0byBwYXNzIHRocm91Z2hcbiAgLy8gKlRoaXMgYmxvY2sgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24gYnVpbGRzKlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XG4gIHZhciBzdGFjayA9IFtdLFxuICAgICAga2V5cyA9IFtdO1xuICBpZiAoIWRlY3ljbGVyKSBkZWN5Y2xlciA9IGZ1bmN0aW9uIGRlY3ljbGVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSkgcmV0dXJuICdbQ2lyY3VsYXIgfl0nO1xuICAgIHJldHVybiAnW0NpcmN1bGFyIH4uJyArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oJy4nKSArICddJztcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcbiAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XG4gICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XG4gICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKSB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9O1xufVxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGBpc0ltbXV0YWJsZWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xuICB2YXIgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xuICByZXR1cm4ge1xuICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKCkge1xuICAgICAgcmV0dXJuIF9kZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCkge1xuICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZVBhdGhzID0gW107XG4gIH1cblxuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFtdO1xuICB9XG5cbiAgdmFyIHRyYWNrZWQgPSB7XG4gICAgdmFsdWU6IG9ialxuICB9O1xuXG4gIGlmICghaXNJbW11dGFibGUob2JqKSkge1xuICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLmNvbmNhdChrZXkpO1xuXG4gICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoLmpvaW4oJy4nKSkgIT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJhY2tlZDtcbn1cblxuZnVuY3Rpb24gX2RldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XG4gIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlUGF0aHMgPSBbXTtcbiAgfVxuXG4gIGlmIChzYW1lUGFyZW50UmVmID09PSB2b2lkIDApIHtcbiAgICBzYW1lUGFyZW50UmVmID0gZmFsc2U7XG4gIH1cblxuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFtdO1xuICB9XG5cbiAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB1bmRlZmluZWQ7XG4gIHZhciBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xuXG4gIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiB0cnVlLFxuICAgICAgcGF0aDogcGF0aFxuICAgIH07XG4gIH1cblxuICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gR2F0aGVyIGFsbCBrZXlzIGZyb20gcHJldiAodHJhY2tlZCkgYW5kIGFmdGVyIG9ianNcblxuXG4gIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcbiAgT2JqZWN0LmtleXModHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XG4gIH0pO1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoa2V5c1RvRGV0ZWN0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgY2hpbGRQYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcblxuICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGguam9pbignLicpKSAhPT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBfZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBjaGlsZFBhdGgpO1xuXG4gICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2FzTXV0YXRlZDogZmFsc2VcbiAgfTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWlkZGxld2FyZSB0aGF0IGNoZWNrcyB3aGV0aGVyIGFueSBzdGF0ZSB3YXMgbXV0YXRlZCBpbiBiZXR3ZWVuXHJcbiAqIGRpc3BhdGNoZXMgb3IgZHVyaW5nIGEgZGlzcGF0Y2guIElmIGFueSBtdXRhdGlvbnMgYXJlIGRldGVjdGVkLCBhbiBlcnJvciBpc1xyXG4gKiB0aHJvd24uXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE1pZGRsZXdhcmUgb3B0aW9ucy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpc0ltbXV0YWJsZSA9IF9vcHRpb25zLmlzSW1tdXRhYmxlLFxuICAgICAgaXNJbW11dGFibGUgPSBfb3B0aW9ucyRpc0ltbXV0YWJsZSA9PT0gdm9pZCAwID8gaXNJbW11dGFibGVEZWZhdWx0IDogX29wdGlvbnMkaXNJbW11dGFibGUsXG4gICAgICBpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucy5pZ25vcmVkUGF0aHMsXG4gICAgICBfb3B0aW9ucyR3YXJuQWZ0ZXIgPSBfb3B0aW9ucy53YXJuQWZ0ZXIsXG4gICAgICB3YXJuQWZ0ZXIgPSBfb3B0aW9ucyR3YXJuQWZ0ZXIgPT09IHZvaWQgMCA/IDMyIDogX29wdGlvbnMkd2FybkFmdGVyLFxuICAgICAgaWdub3JlID0gX29wdGlvbnMuaWdub3JlOyAvLyBBbGlhcyBpZ25vcmUtPmlnbm9yZWRQYXRocywgYnV0IHByZWZlciBpZ25vcmVkUGF0aHMgaWYgcHJlc2VudFxuXG4gIGlnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocyB8fCBpZ25vcmU7XG4gIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCAnSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJyk7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7IC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XG5cbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgICEhcmVzdWx0Lndhc011dGF0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnXCIgKyAocmVzdWx0LnBhdGggfHwgW10pLmpvaW4oJy4nKSArIFwiJy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3Ryb3VibGVzaG9vdGluZyNuZXZlci1tdXRhdGUtcmVkdWNlci1hcmd1bWVudHMpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpOyAvLyBUcmFjayBiZWZvcmUgcG90ZW50aWFsbHkgbm90IG1lZXRpbmcgdGhlIGludmFyaWFudFxuXG4gICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJiAoISFyZXN1bHQud2FzTXV0YXRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFtdKS5qb2luKCcuJykgKyBcIi4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiBcIiArIHN0cmluZ2lmeShhY3Rpb24pICsgXCIuIChodHRwczovL3JlZHV4LmpzLm9yZy90cm91Ymxlc2hvb3RpbmcjbmV2ZXItbXV0YXRlLXJlZHVjZXItYXJndW1lbnRzKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDApO1xuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgXCJwbGFpblwiLCBpLmUuIGEgdmFsdWUgdGhhdCBpcyBlaXRoZXJcclxuICogZGlyZWN0bHkgSlNPTi1zZXJpYWxpemFibGUgKGJvb2xlYW4sIG51bWJlciwgc3RyaW5nLCBhcnJheSwgcGxhaW4gb2JqZWN0KVxyXG4gKiBvciBgdW5kZWZpbmVkYC5cclxuICpcclxuICogQHBhcmFtIHZhbCBUaGUgdmFsdWUgdG8gY2hlY2suXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyB8fCB2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiB2YWwgPT09ICdudW1iZXInIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICBpZiAoaXNTZXJpYWxpemFibGUgPT09IHZvaWQgMCkge1xuICAgIGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjtcbiAgfVxuXG4gIGlmIChpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZWRQYXRocyA9IFtdO1xuICB9XG5cbiAgdmFyIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuXG4gIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleVBhdGg6IHBhdGguam9pbignLicpIHx8ICc8cm9vdD4nLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcbiAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IGVudHJpZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgICBwcm9wZXJ0eSA9IF9yZWYyWzBdLFxuICAgICAgICBuZXN0ZWRWYWx1ZSA9IF9yZWYyWzFdO1xuICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aC5jb25jYXQocHJvcGVydHkpO1xuXG4gICAgaWYgKGhhc0lnbm9yZWRQYXRocyAmJiBpZ25vcmVkUGF0aHMuaW5kZXhPZihuZXN0ZWRQYXRoLmpvaW4oJy4nKSkgPj0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleVBhdGg6IG5lc3RlZFBhdGguam9pbignLicpLFxuICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcblxuICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XG4gICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1pZGRsZXdhcmUgdGhhdCwgYWZ0ZXIgZXZlcnkgc3RhdGUgY2hhbmdlLCBjaGVja3MgaWYgdGhlIG5ld1xyXG4gKiBzdGF0ZSBpcyBzZXJpYWxpemFibGUuIElmIGEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSBpcyBmb3VuZCB3aXRoaW4gdGhlXHJcbiAqIHN0YXRlLCBhbiBlcnJvciBpcyBwcmludGVkIHRvIHRoZSBjb25zb2xlLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBNaWRkbGV3YXJlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGlzU2VyaWFsaXphYiA9IF9vcHRpb25zLmlzU2VyaWFsaXphYmxlLFxuICAgICAgaXNTZXJpYWxpemFibGUgPSBfb3B0aW9ucyRpc1NlcmlhbGl6YWIgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfb3B0aW9ucyRpc1NlcmlhbGl6YWIsXG4gICAgICBnZXRFbnRyaWVzID0gX29wdGlvbnMuZ2V0RW50cmllcyxcbiAgICAgIF9vcHRpb25zJGlnbm9yZWRBY3RpbyA9IF9vcHRpb25zLmlnbm9yZWRBY3Rpb25zLFxuICAgICAgaWdub3JlZEFjdGlvbnMgPSBfb3B0aW9ucyRpZ25vcmVkQWN0aW8gPT09IHZvaWQgMCA/IFtdIDogX29wdGlvbnMkaWdub3JlZEFjdGlvLFxuICAgICAgX29wdGlvbnMkaWdub3JlZEFjdGlvMiA9IF9vcHRpb25zLmlnbm9yZWRBY3Rpb25QYXRocyxcbiAgICAgIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9vcHRpb25zJGlnbm9yZWRBY3RpbzIgPT09IHZvaWQgMCA/IFsnbWV0YS5hcmcnXSA6IF9vcHRpb25zJGlnbm9yZWRBY3RpbzIsXG4gICAgICBfb3B0aW9ucyRpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucy5pZ25vcmVkUGF0aHMsXG4gICAgICBpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucyRpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCA/IFtdIDogX29wdGlvbnMkaWdub3JlZFBhdGhzLFxuICAgICAgX29wdGlvbnMkd2FybkFmdGVyID0gX29wdGlvbnMud2FybkFmdGVyLFxuICAgICAgd2FybkFmdGVyID0gX29wdGlvbnMkd2FybkFmdGVyID09PSB2b2lkIDAgPyAzMiA6IF9vcHRpb25zJHdhcm5BZnRlcjtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGlnbm9yZWRBY3Rpb25zLmxlbmd0aCAmJiBpZ25vcmVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCAnU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJyk7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBbXSwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocyk7XG5cbiAgICAgICAgICBpZiAoZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCAnXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogJywgYWN0aW9uLCAnXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvYWN0aW9ucyN3aHktc2hvdWxkLXR5cGUtYmUtYS1zdHJpbmctb3ItYXQtbGVhc3Qtc2VyaWFsaXphYmxlLXdoeS1zaG91bGQtbXktYWN0aW9uLXR5cGVzLWJlLWNvbnN0YW50cyknLCAnXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmVBUEkuZ2V0U3RhdGUoKTtcbiAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBbXSwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XG5cbiAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5mdW5jdGlvbiBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCkge1xuICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XG4gIH07XG59XG4vKipcclxuICogUmV0dXJucyBhbnkgYXJyYXkgY29udGFpbmluZyB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGluc3RhbGxlZCBieVxyXG4gKiBgY29uZmlndXJlU3RvcmUoKWAuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBjb25maWd1cmUgeW91ciBzdG9yZSB3aXRoIGEgY3VzdG9tXHJcbiAqIGBtaWRkbGV3YXJlYCBhcnJheSBidXQgc3RpbGwga2VlcCB0aGUgZGVmYXVsdCBzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGRlZmF1bHQgbWlkZGxld2FyZSB1c2VkIGJ5IGBjb25maWd1cmVTdG9yZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHRodW5rID0gX29wdGlvbnMudGh1bmssXG4gICAgICB0aHVuayA9IF9vcHRpb25zJHRodW5rID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGh1bmssXG4gICAgICBfb3B0aW9ucyRpbW11dGFibGVDaGUgPSBfb3B0aW9ucy5pbW11dGFibGVDaGVjayxcbiAgICAgIGltbXV0YWJsZUNoZWNrID0gX29wdGlvbnMkaW1tdXRhYmxlQ2hlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaW1tdXRhYmxlQ2hlLFxuICAgICAgX29wdGlvbnMkc2VyaWFsaXphYmxlID0gX29wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssXG4gICAgICBzZXJpYWxpemFibGVDaGVjayA9IF9vcHRpb25zJHNlcmlhbGl6YWJsZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNlcmlhbGl6YWJsZTtcbiAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcblxuICBpZiAodGh1bmspIHtcbiAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbW11dGFibGVDaGVjaykge1xuICAgICAgLyogUFJPRF9TVEFSVF9SRU1PVkVfVU1EICovXG4gICAgICB2YXIgaW1tdXRhYmxlT3B0aW9ucyA9IHt9O1xuXG4gICAgICBpZiAoIWlzQm9vbGVhbihpbW11dGFibGVDaGVjaykpIHtcbiAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xuICAgICAgfVxuXG4gICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoaW1tdXRhYmxlT3B0aW9ucykpO1xuICAgICAgLyogUFJPRF9TVE9QX1JFTU9WRV9VTUQgKi9cbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXphYmxlQ2hlY2spIHtcbiAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XG5cbiAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xuICAgICAgICBzZXJpYWxpemFibGVPcHRpb25zID0gc2VyaWFsaXphYmxlQ2hlY2s7XG4gICAgICB9XG5cbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcbn1cblxudmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuLyoqXHJcbiAqIEEgZnJpZW5kbHkgYWJzdHJhY3Rpb24gb3ZlciB0aGUgc3RhbmRhcmQgUmVkdXggYGNyZWF0ZVN0b3JlKClgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gY29uZmlnIFRoZSBzdG9yZSBjb25maWd1cmF0aW9uLlxyXG4gKiBAcmV0dXJucyBBIGNvbmZpZ3VyZWQgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcbiAgdmFyIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSA9IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcblxuICB2YXIgX3JlZiA9IG9wdGlvbnMgfHwge30sXG4gICAgICBfcmVmJHJlZHVjZXIgPSBfcmVmLnJlZHVjZXIsXG4gICAgICByZWR1Y2VyID0gX3JlZiRyZWR1Y2VyID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJHJlZHVjZXIsXG4gICAgICBfcmVmJG1pZGRsZXdhcmUgPSBfcmVmLm1pZGRsZXdhcmUsXG4gICAgICBtaWRkbGV3YXJlID0gX3JlZiRtaWRkbGV3YXJlID09PSB2b2lkIDAgPyBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSA6IF9yZWYkbWlkZGxld2FyZSxcbiAgICAgIF9yZWYkZGV2VG9vbHMgPSBfcmVmLmRldlRvb2xzLFxuICAgICAgZGV2VG9vbHMgPSBfcmVmJGRldlRvb2xzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRkZXZUb29scyxcbiAgICAgIF9yZWYkcHJlbG9hZGVkU3RhdGUgPSBfcmVmLnByZWxvYWRlZFN0YXRlLFxuICAgICAgcHJlbG9hZGVkU3RhdGUgPSBfcmVmJHByZWxvYWRlZFN0YXRlID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJHByZWxvYWRlZFN0YXRlLFxuICAgICAgX3JlZiRlbmhhbmNlcnMgPSBfcmVmLmVuaGFuY2VycyxcbiAgICAgIGVuaGFuY2VycyA9IF9yZWYkZW5oYW5jZXJzID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJGVuaGFuY2VycztcblxuICB2YXIgcm9vdFJlZHVjZXI7XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocmVkdWNlcikpIHtcbiAgICByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XG4gIH1cblxuICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlLmFwcGx5KHZvaWQgMCwgdHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicgPyBtaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSkgOiBtaWRkbGV3YXJlKTtcbiAgdmFyIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2U7XG5cbiAgaWYgKGRldlRvb2xzKSB7XG4gICAgZmluYWxDb21wb3NlID0gY29tcG9zZVdpdGhEZXZUb29scyhfZXh0ZW5kcyh7XG4gICAgICAvLyBFbmFibGUgY2FwdHVyZSBvZiBzdGFjayB0cmFjZXMgZm9yIGRpc3BhdGNoZWQgUmVkdXggYWN0aW9uc1xuICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXG4gICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSAnb2JqZWN0JyAmJiBkZXZUb29scykpO1xuICB9XG5cbiAgdmFyIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlcl07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xuICAgIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlcl0uY29uY2F0KGVuaGFuY2Vycyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuaGFuY2VycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKHN0b3JlRW5oYW5jZXJzKTtcbiAgfVxuXG4gIHZhciBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlLmFwcGx5KHZvaWQgMCwgc3RvcmVFbmhhbmNlcnMpO1xuICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcbiAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcbiAgICBpZiAocHJlcGFyZUFjdGlvbikge1xuICAgICAgdmFyIHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmICghcHJlcGFyZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXG4gICAgICB9LCAnbWV0YScgaW4gcHJlcGFyZWQgJiYge1xuICAgICAgICBtZXRhOiBwcmVwYXJlZC5tZXRhXG4gICAgICB9LCB7fSwgJ2Vycm9yJyBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgIGVycm9yOiBwcmVwYXJlZC5lcnJvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBwYXlsb2FkOiBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF1cbiAgICB9O1xuICB9XG5cbiAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJcIiArIHR5cGU7XG4gIH07XG5cbiAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcblxuICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24udHlwZSA9PT0gdHlwZTtcbiAgfTtcblxuICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcbn1cbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xuICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3N0cmluZycgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIFsndHlwZScsICdwYXlsb2FkJywgJ2Vycm9yJywgJ21ldGEnXS5pbmRleE9mKGtleSkgPiAtMTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gdHlwZSBvZiB0aGUgYWN0aW9ucyBjcmVhdGVkIGJ5IHRoZSBwYXNzZWRcclxuICogYGNyZWF0ZUFjdGlvbigpYC1nZW5lcmF0ZWQgYWN0aW9uIGNyZWF0b3IgKGFyYml0cmFyeSBhY3Rpb24gY3JlYXRvcnNcclxuICogYXJlIG5vdCBzdXBwb3J0ZWQpLlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gY3JlYXRvciB3aG9zZSBhY3Rpb24gdHlwZSB0byBnZXQuXHJcbiAqIEByZXR1cm5zIFRoZSBhY3Rpb24gdHlwZSB1c2VkIGJ5IHRoZSBhY3Rpb24gY3JlYXRvci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUeXBlKGFjdGlvbkNyZWF0b3IpIHtcbiAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcbiAgdmFyIGFjdGlvbnNNYXAgPSB7fTtcbiAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XG4gIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XG4gIHZhciBidWlsZGVyID0ge1xuICAgIGFkZENhc2U6IGZ1bmN0aW9uIGFkZENhc2UodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLypcclxuICAgICAgICAgdG8ga2VlcCB0aGUgZGVmaW5pdGlvbiBieSB0aGUgdXNlciBpbiBsaW5lIHdpdGggYWN0dWFsIGJlaGF2aW9yLFxyXG4gICAgICAgICB3ZSBlbmZvcmNlIGBhZGRDYXNlYCB0byBhbHdheXMgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBhZGRNYXRjaGVyYFxyXG4gICAgICAgICBhcyBtYXRjaGluZyBjYXNlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBtYXRjaGVyc1xyXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZE1hdGNoZXJgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gJ3N0cmluZycgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xuXG4gICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkQ2FzZSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZScpO1xuICAgICAgfVxuXG4gICAgICBhY3Rpb25zTWFwW3R5cGVdID0gcmVkdWNlcjtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH0sXG4gICAgYWRkTWF0Y2hlcjogZnVuY3Rpb24gYWRkTWF0Y2hlcihtYXRjaGVyLCByZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWN0aW9uTWF0Y2hlcnMucHVzaCh7XG4gICAgICAgIG1hdGNoZXI6IG1hdGNoZXIsXG4gICAgICAgIHJlZHVjZXI6IHJlZHVjZXJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGREZWZhdWx0Q2FzZTogZnVuY3Rpb24gYWRkRGVmYXVsdENhc2UocmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gcmVkdWNlcjtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH1cbiAgfTtcbiAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xuICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgaWYgKGFjdGlvbk1hdGNoZXJzID09PSB2b2lkIDApIHtcbiAgICBhY3Rpb25NYXRjaGVycyA9IFtdO1xuICB9XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhtYXBPckJ1aWxkZXJDYWxsYmFjaykgOiBbbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdLFxuICAgICAgYWN0aW9uc01hcCA9IF9yZWZbMF0sXG4gICAgICBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX3JlZlsxXSxcbiAgICAgIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX3JlZlsyXTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGNhc2VSZWR1Y2VycyA9IFthY3Rpb25zTWFwW2FjdGlvbi50eXBlXV0uY29uY2F0KGZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIG1hdGNoZXIgPSBfcmVmMi5tYXRjaGVyO1xuICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgcmVkdWNlciA9IF9yZWYzLnJlZHVjZXI7XG4gICAgICByZXR1cm4gcmVkdWNlcjtcbiAgICB9KSk7XG5cbiAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHtcbiAgICAgIHJldHVybiAhIWNyO1xuICAgIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FzZVJlZHVjZXJzID0gW2ZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcbiAgICAgIGlmIChjYXNlUmVkdWNlcikge1xuICAgICAgICBpZiAoaXNEcmFmdChwcmV2aW91c1N0YXRlKSkge1xuICAgICAgICAgIC8vIElmIGl0J3MgYWxyZWFkeSBhIGRyYWZ0LCB3ZSBtdXN0IGFscmVhZHkgYmUgaW5zaWRlIGEgYGNyZWF0ZU5leHRTdGF0ZWAgY2FsbCxcbiAgICAgICAgICAvLyBsaWtlbHkgYmVjYXVzZSB0aGlzIGlzIGJlaW5nIHdyYXBwZWQgaW4gYGNyZWF0ZVJlZHVjZXJgLCBgY3JlYXRlU2xpY2VgLCBvciBuZXN0ZWRcbiAgICAgICAgICAvLyBpbnNpZGUgYW4gZXhpc3RpbmcgZHJhZnQuIEl0J3Mgc2FmZSB0byBqdXN0IHBhc3MgdGhlIGRyYWZ0IHRvIHRoZSBtdXRhdG9yLlxuICAgICAgICAgIHZhciBkcmFmdCA9IHByZXZpb3VzU3RhdGU7IC8vIFdlIGNhbiBhc3N1bWUgdGhpcyBpcyBhbHJlYWR5IGEgZHJhZnRcblxuICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNEcmFmdGFibGUocHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgICAgICAvLyBJZiBzdGF0ZSBpcyBub3QgZHJhZnRhYmxlIChleDogYSBwcmltaXRpdmUsIHN1Y2ggYXMgMCksIHdlIHdhbnQgdG8gZGlyZWN0bHlcbiAgICAgICAgICAvLyByZXR1cm4gdGhlIGNhc2VSZWR1Y2VyIGZ1bmMgYW5kIG5vdCB3cmFwIGl0IHdpdGggcHJvZHVjZS5cbiAgICAgICAgICB2YXIgX3Jlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIF9yZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0EgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxuICAgICAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgICAgIC8vIHRoZXNlIHR3byB0eXBlcy5cbiAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgIH0sIHN0YXRlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZSQxKHNsaWNlLCBhY3Rpb25LZXkpIHtcbiAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XG59XG4vKipcclxuICogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYW4gaW5pdGlhbCBzdGF0ZSwgYW4gb2JqZWN0IGZ1bGwgb2YgcmVkdWNlclxyXG4gKiBmdW5jdGlvbnMsIGFuZCBhIFwic2xpY2UgbmFtZVwiLCBhbmQgYXV0b21hdGljYWxseSBnZW5lcmF0ZXNcclxuICogYWN0aW9uIGNyZWF0b3JzIGFuZCBhY3Rpb24gdHlwZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZVxyXG4gKiByZWR1Y2VycyBhbmQgc3RhdGUuXHJcbiAqXHJcbiAqIFRoZSBgcmVkdWNlcmAgYXJndW1lbnQgaXMgcGFzc2VkIHRvIGBjcmVhdGVSZWR1Y2VyKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcblxuICBpZiAoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2UnKTtcbiAgfVxuXG4gIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAndW5kZWZpbmVkJyA/IFtdIDogdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gJ2Z1bmN0aW9uJyA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXSxcbiAgICAgIF9yZWYkID0gX3JlZlswXSxcbiAgICAgIGV4dHJhUmVkdWNlcnMgPSBfcmVmJCA9PT0gdm9pZCAwID8ge30gOiBfcmVmJCxcbiAgICAgIF9yZWYkMiA9IF9yZWZbMV0sXG4gICAgICBhY3Rpb25NYXRjaGVycyA9IF9yZWYkMiA9PT0gdm9pZCAwID8gW10gOiBfcmVmJDIsXG4gICAgICBfcmVmJDMgPSBfcmVmWzJdLFxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gX3JlZiQzID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJDM7XG5cbiAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XG4gIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xuICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XG4gICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xuICAgIHZhciB0eXBlID0gZ2V0VHlwZSQxKG5hbWUsIHJlZHVjZXJOYW1lKTtcbiAgICB2YXIgY2FzZVJlZHVjZXI7XG4gICAgdmFyIHByZXBhcmVDYWxsYmFjaztcblxuICAgIGlmICgncmVkdWNlcicgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcbiAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XG4gICAgfVxuXG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcbiAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcbiAgfSk7XG5cbiAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX2V4dGVuZHMoe30sIGV4dHJhUmVkdWNlcnMsIHt9LCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XG5cbiAgdmFyIHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZmluYWxDYXNlUmVkdWNlcnMsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmVkdWNlcjogcmVkdWNlcixcbiAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyxcbiAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBpZHM6IFtdLFxuICAgIGVudGl0aWVzOiB7fVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xuICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgYWRkaXRpb25hbFN0YXRlID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCksIGFkZGl0aW9uYWxTdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSkge1xuICAgIHZhciBzZWxlY3RJZHMgPSBmdW5jdGlvbiBzZWxlY3RJZHMoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5pZHM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIHNlbGVjdEVudGl0aWVzKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUuZW50aXRpZXM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RBbGwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCBmdW5jdGlvbiAoaWRzLCBlbnRpdGllcykge1xuICAgICAgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBzZWxlY3RJZCA9IGZ1bmN0aW9uIHNlbGVjdElkKF8sIGlkKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gc2VsZWN0QnlJZChlbnRpdGllcywgaWQpIHtcbiAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykge1xuICAgICAgcmV0dXJuIGlkcy5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBpZiAoIXNlbGVjdFN0YXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RJZHM6IHNlbGVjdElkcyxcbiAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxuICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcbiAgICAgICAgc2VsZWN0VG90YWw6IHNlbGVjdFRvdGFsLFxuICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RJZHM6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RJZHMpLFxuICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcbiAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXG4gICAgICBzZWxlY3RUb3RhbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcbiAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0U2VsZWN0b3JzOiBnZXRTZWxlY3RvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHtcbiAgICByZXR1cm4gbXV0YXRvcihzdGF0ZSk7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB1bmRlZmluZWQpO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xuICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZykge1xuICAgICAgcmV0dXJuIGlzRlNBKGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bk11dGF0b3IgPSBmdW5jdGlvbiBydW5NdXRhdG9yKGRyYWZ0KSB7XG4gICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xuICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoaXNEcmFmdChzdGF0ZSkpIHtcbiAgICAgIC8vIHdlIG11c3QgYWxyZWFkeSBiZSBpbnNpZGUgYSBgY3JlYXRlTmV4dFN0YXRlYCBjYWxsLCBsaWtlbHkgYmVjYXVzZVxuICAgICAgLy8gdGhpcyBpcyBiZWluZyB3cmFwcGVkIGluIGBjcmVhdGVSZWR1Y2VyYCBvciBgY3JlYXRlU2xpY2VgLlxuICAgICAgLy8gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXG4gICAgICBydW5NdXRhdG9yKHN0YXRlKTsgLy8gc2luY2UgaXQncyBhIGRyYWZ0LCB3ZSdsbCBqdXN0IHJldHVybiBpdFxuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgY3JlYXRlTmV4dFN0YXRlKCkgcHJvZHVjZXMgYW4gSW1tdXRhYmxlPERyYWZ0PFM+PiByYXRoZXJcbiAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgLy8gdGhlc2UgdHdvIHR5cGVzLlxuICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZShzdGF0ZSwgcnVuTXV0YXRvcik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpIHtcbiAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1RoZSBlbnRpdHkgcGFzc2VkIHRvIHRoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uIHJldHVybmVkIHVuZGVmaW5lZC4nLCAnWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uJywgJ1RoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOicsIGVudGl0eSwgJ1RoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uOicsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpIHtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFsbE11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIGFkZE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XG4gICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xuICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGRpZE11dGF0ZSkge1xuICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsTXV0YWJseShzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHtcbiAgICAgIGlkczogW10sXG4gICAgICBlbnRpdGllczoge31cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIHZhciBvcmlnaW5hbCA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgdXBkYXRlLmNoYW5nZXMpO1xuICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICB2YXIgaGFzTmV3S2V5ID0gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG5cbiAgICBpZiAoaGFzTmV3S2V5KSB7XG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXk7XG4gICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllc1tuZXdLZXldID0gdXBkYXRlZDtcbiAgICByZXR1cm4gaGFzTmV3S2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIHZhciBuZXdLZXlzID0ge307XG4gICAgdmFyIHVwZGF0ZXNQZXJFbnRpdHkgPSB7fTtcbiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgLy8gT25seSBhcHBseSB1cGRhdGVzIHRvIGVudGl0aWVzIHRoYXQgY3VycmVudGx5IGV4aXN0XG4gICAgICBpZiAodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSB1cGRhdGVzIHRvIG9uZSBlbnRpdHksIG1lcmdlIHRoZW0gdG9nZXRoZXJcbiAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xuICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXG4gICAgICAgICAgLy8gU3ByZWFkcyBpZ25vcmUgZmFsc3kgdmFsdWVzLCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgdGhlcmUgaXNuJ3RcbiAgICAgICAgICAvLyBhbiBleGlzdGluZyB1cGRhdGUgYWxyZWFkeSBhdCB0aGlzIGtleVxuICAgICAgICAgIGNoYW5nZXM6IF9leHRlbmRzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwsIHt9LCB1cGRhdGUuY2hhbmdlcylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcbiAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcbiAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpO1xuICAgICAgfSkubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGRpZE11dGF0ZUlkcykge1xuICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gZW50aXRpZXMsIF9pc0FycmF5MiA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMiksIF9pMiA9IDAsIF9pdGVyYXRvcjIgPSBfaXNBcnJheTIgPyBfaXRlcmF0b3IyIDogX2l0ZXJhdG9yMltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoX2lzQXJyYXkyKSB7XG4gICAgICAgIGlmIChfaTIgPj0gX2l0ZXJhdG9yMi5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kyID0gX2l0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2kyLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjI7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXG4gICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xuICB2YXIgX2NyZWF0ZVVuc29ydGVkU3RhdGVBID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLFxuICAgICAgcmVtb3ZlT25lID0gX2NyZWF0ZVVuc29ydGVkU3RhdGVBLnJlbW92ZU9uZSxcbiAgICAgIHJlbW92ZU1hbnkgPSBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEucmVtb3ZlTWFueSxcbiAgICAgIHJlbW92ZUFsbCA9IF9jcmVhdGVVbnNvcnRlZFN0YXRlQS5yZW1vdmVBbGw7XG5cbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShuZXdNb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld01vZGVscykpIHtcbiAgICAgIG5ld01vZGVscyA9IE9iamVjdC52YWx1ZXMobmV3TW9kZWxzKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZWxzID0gbmV3TW9kZWxzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIHJldHVybiAhKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSBpbiBzdGF0ZS5lbnRpdGllcyk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShtb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGVscykpIHtcbiAgICAgIG1vZGVscyA9IE9iamVjdC52YWx1ZXMobW9kZWxzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIGFkZE1hbnlNdXRhYmx5KG1vZGVscywgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb3JpZ2luYWwgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwsIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XG4gICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgbW9kZWxzLnB1c2godXBkYXRlZCk7XG4gICAgcmV0dXJuIG5ld0tleSAhPT0gdXBkYXRlLmlkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICB2YXIgbW9kZWxzID0gW107XG4gICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgIHJldHVybiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlQXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoICYmIGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UobW9kZWxzLCBzdGF0ZSkge1xuICAgIG1vZGVscy5zb3J0KHNvcnQpOyAvLyBJbnNlcnQvb3ZlcndyaXRlIGFsbCBuZXcvdXBkYXRlZFxuXG4gICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1tzZWxlY3RJZChtb2RlbCldID0gbW9kZWw7XG4gICAgfSk7XG4gICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XG4gICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcbiAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcbiAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xuXG4gICAgaWYgKCFhcmVBcnJheXNFcXVhbChpZHMsIG5ld1NvcnRlZElkcykpIHtcbiAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxuICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXG4gICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXG4gICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXG4gIH07XG59XG5cbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbnRpdHlBZGFwdGVyKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfc29ydENvbXBhcmVyJHNlbGVjdEkgPSBfZXh0ZW5kcyh7XG4gICAgc29ydENvbXBhcmVyOiBmYWxzZSxcbiAgICBzZWxlY3RJZDogZnVuY3Rpb24gc2VsZWN0SWQoaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5pZDtcbiAgICB9XG4gIH0sIG9wdGlvbnMpLFxuICAgICAgc2VsZWN0SWQgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc2VsZWN0SWQsXG4gICAgICBzb3J0Q29tcGFyZXIgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc29ydENvbXBhcmVyO1xuXG4gIHZhciBzdGF0ZUZhY3RvcnkgPSBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCk7XG4gIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xuICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHNlbGVjdElkOiBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXI6IHNvcnRDb21wYXJlclxuICB9LCBzdGF0ZUZhY3RvcnksIHt9LCBzZWxlY3RvcnNGYWN0b3J5LCB7fSwgc3RhdGVBZGFwdGVyKTtcbn1cblxuLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG5cbmNvbnN0IF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkpIDogXCJAQGl0ZXJhdG9yXCI7XG5cbmNvbnN0IF9hc3luY0l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSkgOiBcIkBAYXN5bmNJdGVyYXRvclwiO1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvblxuZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWkvbmFub2lkL2Jsb2IvMy4wLjIvbm9uLXNlY3VyZS9pbmRleC5qc1xuLy8gVGhpcyBhbHBoYWJldCB1c2VzIGBBLVphLXowLTlfLWAgc3ltYm9scy4gQSBnZW5ldGljIGFsZ29yaXRobSBoZWxwZWRcbi8vIG9wdGltaXplIHRoZSBnemlwIGNvbXByZXNzaW9uIGZvciB0aGlzIGFscGhhYmV0LlxudmFyIHVybEFscGhhYmV0ID0gJ01vZHVsZVN5bWJoYXNPd25Qci0wMTIzNDU2Nzg5QUJDREVGR0hOUlZmZ2N0aVV2el9LcVlUSmtMeHBaWElqUVcnO1xuLyoqXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBuYW5vaWQgPSBmdW5jdGlvbiBuYW5vaWQoc2l6ZSkge1xuICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgc2l6ZSA9IDIxO1xuICB9XG5cbiAgdmFyIGlkID0gJyc7IC8vIEEgY29tcGFjdCBhbHRlcm5hdGl2ZSBmb3IgYGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKWAuXG5cbiAgdmFyIGkgPSBzaXplO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICAvLyBgfCAwYCBpcyBtb3JlIGNvbXBhY3QgYW5kIGZhc3RlciB0aGFuIGBNYXRoLmZsb29yKClgLlxuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG5cbiAgcmV0dXJuIGlkO1xufTtcblxudmFyIGNvbW1vblByb3BlcnRpZXMgPSBbJ25hbWUnLCAnbWVzc2FnZScsICdzdGFjaycsICdjb2RlJ107XG5cbnZhciBSZWplY3RXaXRoVmFsdWUgPSBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCkge1xuICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICB0aGlzLm5hbWUgPSAnUmVqZWN0V2l0aFZhbHVlJztcbiAgdGhpcy5tZXNzYWdlID0gJ1JlamVjdGVkJztcbn07IC8vIFJld29ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zZXJpYWxpemUtZXJyb3JcblxuXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gbWluaVNlcmlhbGl6ZUVycm9yKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgdmFyIHNpbXBsZUVycm9yID0ge307XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjb21tb25Qcm9wZXJ0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcGVydHkgPSBfcmVmO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW1wbGVFcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogU3RyaW5nKHZhbHVlKVxuICB9O1xufTtcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZVByZWZpeFxyXG4gKiBAcGFyYW0gcGF5bG9hZENyZWF0b3JcclxuICogQHBhcmFtIG9wdGlvbnNcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuayh0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xuICB2YXIgZnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL2Z1bGZpbGxlZCcsIGZ1bmN0aW9uIChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IHJlc3VsdCxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAnZnVsZmlsbGVkJ1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgcGVuZGluZyA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgJy9wZW5kaW5nJywgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IHVuZGVmaW5lZCxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAncGVuZGluZydcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL3JlamVjdGVkJywgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZykge1xuICAgIHZhciByZWplY3RlZFdpdGhWYWx1ZSA9IGVycm9yIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlO1xuICAgIHZhciBhYm9ydGVkID0gISFlcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcic7XG4gICAgdmFyIGNvbmRpdGlvbiA9ICEhZXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gJ0NvbmRpdGlvbkVycm9yJztcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogZXJyb3IgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUgPyBlcnJvci5wYXlsb2FkIDogdW5kZWZpbmVkLFxuICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCAnUmVqZWN0ZWQnKSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZWplY3RlZFdpdGhWYWx1ZTogcmVqZWN0ZWRXaXRoVmFsdWUsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdyZWplY3RlZCcsXG4gICAgICAgIGFib3J0ZWQ6IGFib3J0ZWQsXG4gICAgICAgIGNvbmRpdGlvbjogY29uZGl0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XG4gIHZhciBBQyA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09ICd1bmRlZmluZWQnID8gQWJvcnRDb250cm9sbGVyIDpcbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgICAgdGhpcy5zaWduYWwgPSB7XG4gICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiBvbmFib3J0KCkge30sXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XG4gICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XG4gICAgICB2YXIgcmVxdWVzdElkID0gbmFub2lkKCk7XG4gICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XG4gICAgICB2YXIgYWJvcnRSZWFzb247XG4gICAgICB2YXIgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICAgIHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiByZWplY3Qoe1xuICAgICAgICAgICAgbmFtZTogJ0Fib3J0RXJyb3InLFxuICAgICAgICAgICAgbWVzc2FnZTogYWJvcnRSZWFzb24gfHwgJ0Fib3J0ZWQnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgX3RlbXAzID0gZnVuY3Rpb24gX3RlbXAzKF9yZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChfZXhpdDIpIHJldHVybiBfcmVzdWx0O1xuICAgICAgICAgICAgLy8gV2UgZGlzcGF0Y2ggdGhlIHJlc3VsdCBhY3Rpb24gX2FmdGVyXyB0aGUgY2F0Y2gsIHRvIGF2b2lkIGhhdmluZyBhbnkgZXJyb3JzXG4gICAgICAgICAgICAvLyBoZXJlIGdldCBzd2FsbG93ZWQgYnkgdGhlIHRyeS9jYXRjaCBibG9jayxcbiAgICAgICAgICAgIC8vIHBlciBodHRwczovL3R3aXR0ZXIuY29tL2Rhbl9hYnJhbW92L3N0YXR1cy83NzA5MTQyMjE2Mzg5NDI3MjBcbiAgICAgICAgICAgIC8vIGFuZCBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3R1dG9yaWFscy9hZHZhbmNlZC10dXRvcmlhbCNhc3luYy1lcnJvci1oYW5kbGluZy1sb2dpYy1pbi10aHVua3NcbiAgICAgICAgICAgIHZhciBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcblxuICAgICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goZmluYWxBY3Rpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmluYWxBY3Rpb247XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBfZXhpdDIgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgZmluYWxBY3Rpb247XG5cbiAgICAgICAgICB2YXIgX3RlbXA0ID0gX2NhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29uZGl0aW9uICYmIG9wdGlvbnMuY29uZGl0aW9uKGFyZywge1xuICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhOiBleHRyYVxuICAgICAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gICAgICAgICAgICAgIHRocm93IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ29uZGl0aW9uRXJyb3InLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLidcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkaXNwYXRjaChwZW5kaW5nKHJlcXVlc3RJZCwgYXJnKSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFByb21pc2UucmFjZShbYWJvcnRlZFByb21pc2UsIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiByZWplY3RXaXRoVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgICB9KV0pKS50aGVuKGZ1bmN0aW9uIChfUHJvbWlzZSRyYWNlKSB7XG4gICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gX1Byb21pc2UkcmFjZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gcmVqZWN0ZWQoZXJyLCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90ZW1wNCAmJiBfdGVtcDQudGhlbiA/IF90ZW1wNC50aGVuKF90ZW1wMykgOiBfdGVtcDMoX3RlbXA0KSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0oKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSwge1xuICAgICAgICBhYm9ydDogYWJvcnQsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICBhcmc6IGFyZ1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGFjdGlvbkNyZWF0b3IsIHtcbiAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICB0eXBlUHJlZml4OiB0eXBlUHJlZml4XG4gIH0pO1xufVxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIHVud3JhcFJlc3VsdChhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XG4gICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XG4gIH1cblxuICBpZiAoYWN0aW9uLmVycm9yKSB7XG4gICAgdGhyb3cgYWN0aW9uLmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xufVxuXG52YXIgaGFzTWF0Y2hGdW5jdGlvbiA9IGZ1bmN0aW9uIGhhc01hdGNoRnVuY3Rpb24odikge1xuICByZXR1cm4gdiAmJiB0eXBlb2Ygdi5tYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pIHtcbiAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcbiAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XG4gIH1cbn07XG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBtYXRjaGVzIGFueSBvbmUgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBpc0FueU9mKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWF0Y2hlcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWF0Y2hlcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBtYXRjaGVycy5zb21lKGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pO1xuICAgIH0pO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gbWF0Y2hlcyBhbGwgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gaXNBbGxPZigpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBtYXRjaGVycyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIG1hdGNoZXJzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBtYXRjaGVycy5ldmVyeShmdW5jdGlvbiAobWF0Y2hlcikge1xuICAgICAgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTtcbiAgICB9KTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBAcGFyYW0gYWN0aW9uIEEgcmVkdXggYWN0aW9uXHJcbiAqIEBwYXJhbSB2YWxpZFN0YXR1cyBBbiBhcnJheSBvZiB2YWxpZCBtZXRhLnJlcXVlc3RTdGF0dXMgdmFsdWVzXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cblxuZnVuY3Rpb24gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCB2YWxpZFN0YXR1cykge1xuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpIHJldHVybiBmYWxzZTtcbiAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gJ3N0cmluZyc7XG4gIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XG4gIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XG59XG5cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSAnZnVuY3Rpb24nICYmICdwZW5kaW5nJyBpbiBhWzBdICYmICdmdWxmaWxsZWQnIGluIGFbMF0gJiYgJ3JlamVjdGVkJyBpbiBhWzBdO1xufVxuXG5mdW5jdGlvbiBpc1BlbmRpbmcoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3BlbmRpbmcnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUGVuZGluZygpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7XG4gICAgICByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3JlamVjdGVkJ10pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHtcbiAgICAgIHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiBoYXNGbGFnKGFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XG4gIH07XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbiAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ2Z1bGZpbGxlZCddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xuICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykge1xuICAgICAgcmV0dXJuIGFzeW5jVGh1bmsuZnVsZmlsbGVkO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncGVuZGluZycsICdmdWxmaWxsZWQnLCAncmVqZWN0ZWQnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhc3luY1RodW5rcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFzeW5jVGh1bmsgPSBfcmVmO1xuICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcbiAgICB9XG5cbiAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XG4gIH07XG59XG5cbi8vIHdlIGFzc3VtZSBSVEsgd2lsbCBiZSB1c2VkIHdpdGggUmVhY3QgTmF0aXZlIGFuZCBvdGhlciBQcm94eS1sZXNzXG4vLyBlbnZpcm9ubWVudHMuICBJbiBhZGRpdGlvbiwgdGhhdCdzIGhvdyBJbW1lciA0IGJlaGF2ZWQsIGFuZCBzaW5jZVxuLy8gd2Ugd2FudCB0byBzaGlwIHRoaXMgaW4gYW4gUlRLIG1pbm9yLCB3ZSBzaG91bGQga2VlcCB0aGUgc2FtZSBiZWhhdmlvci5cblxuZW5hYmxlRVM1KCk7XG5cbmV4cG9ydCB7IE1pZGRsZXdhcmVBcnJheSwgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlUmVkdWNlciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBnZXREZWZhdWx0TWlkZGxld2FyZSwgZ2V0VHlwZSwgaXNBbGxPZiwgaXNBbnlPZiwgaXNBc3luY1RodW5rQWN0aW9uLCBpc0Z1bGZpbGxlZCwgaXNJbW11dGFibGVEZWZhdWx0LCBpc1BlbmRpbmcsIGlzUGxhaW4sIGlzUGxhaW5PYmplY3QsIGlzUmVqZWN0ZWQsIGlzUmVqZWN0ZWRXaXRoVmFsdWUsIG5hbm9pZCwgdW53cmFwUmVzdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1eC10b29sa2l0LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7XHJcbiAgY3JlYXRlQWN0aW9uLFxyXG4gIGNyZWF0ZVJlZHVjZXIsXHJcbiAgY29uZmlndXJlU3RvcmUsXHJcbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XHJcbmltcG9ydCB7XHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIGVycm9yLFxyXG4gIGxvYWRpbmcsXHJcbiAgcmVnaXN0ZXJlZCxcclxuICByZW1vdmVkLFxyXG4gIHdvcmtlcnNMb2FkZWQsXHJcbiAgY2xlYXJFcnJvcixcclxufSBmcm9tICcuL3JlZHVjZXInO1xyXG5pbXBvcnQgKiBhcyB0aHVua01pZGRsZXdhcmUgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5pbXBvcnQge1dvcmtlcn0gZnJvbSAnLi9yZWR1Y2VyJ1xyXG5cclxuZW51bSBBY3Rpb25UeXBlIHtcclxuICBFUlJPUiA9ICdlcnJvcicsXHJcbiAgTE9BRElORyA9ICdsb2FkaW5nJyxcclxuICBSRUdJU1RFUkVEID0gJ3JlZ2lzdGVyZWQnLFxyXG4gIFJFTU9WRUQgPSAncmVtb3ZlZCcsXHJcbiAgV09SS0VSU19MT0FERUQgPSAnd29ya2Vyc0xvYWRlZCcsXHJcbiAgQ0xFQVJfRVJST1IgPSAnY2xlYXJFcnJvcicsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlcnJvckFjdGlvbiA9IGNyZWF0ZUFjdGlvbjxzdHJpbmc+KEFjdGlvblR5cGUuRVJST1IpO1xyXG5leHBvcnQgY29uc3QgbG9hZGluZ0FjdGlvbiA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlLkxPQURJTkcpO1xyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJlZEFjdGlvbiA9IGNyZWF0ZUFjdGlvbjxXb3JrZXI+KEFjdGlvblR5cGUuUkVHSVNURVJFRCk7XHJcbmV4cG9ydCBjb25zdCByZW1vdmVkQWN0aW9uID0gY3JlYXRlQWN0aW9uPG51bWJlcj4oQWN0aW9uVHlwZS5SRU1PVkVEKTtcclxuZXhwb3J0IGNvbnN0IHdvcmtlcnNMb2FkZWRBY3Rpb24gPSBjcmVhdGVBY3Rpb248V29ya2VyW10+KEFjdGlvblR5cGUuV09SS0VSU19MT0FERUQpO1xyXG5leHBvcnQgY29uc3QgY2xlYXJFcnJvckFjdGlvbiA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlLkNMRUFSX0VSUk9SKTtcclxuXHJcblxyXG5jb25zdCByZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIHtcclxuICBbQWN0aW9uVHlwZS5FUlJPUl06IGVycm9yLFxyXG4gIFtBY3Rpb25UeXBlLkNMRUFSX0VSUk9SXTogY2xlYXJFcnJvcixcclxuICBbQWN0aW9uVHlwZS5MT0FESU5HXTogbG9hZGluZyxcclxuICBbQWN0aW9uVHlwZS5SRUdJU1RFUkVEXTogcmVnaXN0ZXJlZCxcclxuICBbQWN0aW9uVHlwZS5SRU1PVkVEXTogcmVtb3ZlZCxcclxuICBbQWN0aW9uVHlwZS5XT1JLRVJTX0xPQURFRF06IHdvcmtlcnNMb2FkZWQsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3JlJCA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICByZWR1Y2VyLFxyXG4gIG1pZGRsZXdhcmU6IFt0aHVua01pZGRsZXdhcmUuZGVmYXVsdF0sXHJcbn0pOyIsImltcG9ydCB7IFdPUktFUl9TRVJWSUNFX0JBU0VVUkwgfSBmcm9tICcuLi9jb25maWcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXIge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBob3RvOiBzdHJpbmc7XHJcbiAgYmlvOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBpbml0aWFsX3N0YXRlICB7XHJcbiAgbG9hZGluZzogYm9vbGVhbjtcclxuICBlcnJvcjogbnVsbCB8IHN0cmluZztcclxuICB3b3JrZXJzOiBXb3JrZXJbXVxyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWN0IHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBBY3Rpb25PYmplY3RFcnJvciBleHRlbmRzIEFjdGlvbk9iamVjdCB7XHJcbiAgcGF5bG9hZDogc3RyaW5nXHJcbn1cclxuXHJcbnR5cGUgQWN0aW9uT2JqZWN0UmVnaXN0ZXIgPSB7XHJcbiAgcGF5bG9hZDogV29ya2VyXHJcbn1cclxuXHJcbnR5cGUgQWN0aW9uT2JqZWN0UmVtb3ZlID0ge1xyXG4gIHBheWxvYWQ6IG51bWJlclxyXG59XHJcblxyXG50eXBlIEFjdGlvbk9iamVjdExvYWRXb3JrZXIgPSB7XHJcbiAgcGF5bG9hZDogV29ya2VyW11cclxufVxyXG5cclxuLy8gc2V0dXAgc3RhdGVcclxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogaW5pdGlhbF9zdGF0ZSA9IHtcclxuICBsb2FkaW5nOiBmYWxzZSxcclxuICBlcnJvcjogbnVsbCxcclxuICB3b3JrZXJzOiBbXSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkaW5nID0gKHN0YXRlOiBpbml0aWFsX3N0YXRlKSA9PiB7XHJcbiAgc3RhdGUubG9hZGluZyA9IHRydWU7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZXJyb3IgPSAoc3RhdGU6IGluaXRpYWxfc3RhdGUsIGFjdGlvbjogQWN0aW9uT2JqZWN0RXJyb3IpID0+IHtcclxuICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgc3RhdGUuZXJyb3IgPSBhY3Rpb24/LnBheWxvYWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhckVycm9yID0gKHN0YXRlOiBpbml0aWFsX3N0YXRlKSA9PiB7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJlZCA9IChzdGF0ZTogaW5pdGlhbF9zdGF0ZSwgYWN0aW9uOiBBY3Rpb25PYmplY3RSZWdpc3RlcikgPT4ge1xyXG4gIGNvbnN0IHdvcmtlciA9IGFjdGlvbj8ucGF5bG9hZDtcclxuICBzdGF0ZS53b3JrZXJzLnB1c2goe1xyXG4gICAgaWQ6IHdvcmtlci5pZCxcclxuICAgIG5hbWU6IHdvcmtlci5uYW1lLFxyXG4gICAgcGhvdG86IGAke1dPUktFUl9TRVJWSUNFX0JBU0VVUkx9L3Bob3RvLyR7d29ya2VyLnBob3RvfWAsXHJcbiAgICBiaW86IHdvcmtlci5iaW8sXHJcbiAgfSk7XHJcbiAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xyXG4gIHN0YXRlLmVycm9yID0gbnVsbDtcclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVkID0gKHN0YXRlOiBpbml0aWFsX3N0YXRlLCBhY3Rpb246IEFjdGlvbk9iamVjdFJlbW92ZSkgPT4ge1xyXG4gIGNvbnN0IGlkeCA9IHN0YXRlLndvcmtlcnMuZmluZEluZGV4KCh0KSA9PiB0LmlkID09PSBhY3Rpb24/LnBheWxvYWQpO1xyXG4gIHN0YXRlLndvcmtlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xyXG4gIHN0YXRlLmVycm9yID0gbnVsbDtcclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB3b3JrZXJzTG9hZGVkID0gKHN0YXRlOiBpbml0aWFsX3N0YXRlLCBhY3Rpb246IEFjdGlvbk9iamVjdExvYWRXb3JrZXIpID0+IHtcclxuICBzdGF0ZS53b3JrZXJzID0gYWN0aW9uPy5wYXlsb2FkLm1hcCgod29ya2VyKSA9PiAoe1xyXG4gICAgaWQ6IHdvcmtlci5pZCxcclxuICAgIG5hbWU6IHdvcmtlci5uYW1lLFxyXG4gICAgcGhvdG86IGAke1dPUktFUl9TRVJWSUNFX0JBU0VVUkx9L3Bob3RvLyR7d29ya2VyLnBob3RvfWAsXHJcbiAgICBiaW86IHdvcmtlci5iaW8sXHJcbiAgfSkpO1xyXG4gIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICBzdGF0ZS5lcnJvciA9IG51bGw7XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59O1xyXG4iLCJleHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RPcHRpb24ge1xyXG4gIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnIHwnT1BUSU9OJztcclxuICBib2R5PzogYW55O1xyXG4gIGN1c3RvbUNvbmY/OiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGllbnQoZW5kcG9pbnQ6IHN0cmluZywganNvbiwgb3B0aW9uczogUmVxdWVzdE9wdGlvbikge1xyXG4gIGxldCBoZWFkZXJzO1xyXG4gIGlmIChqc29uKSB7XHJcbiAgICBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb25maWcgPSB7XHJcbiAgICBtZXRob2Q6IG9wdGlvbnM/Lm1ldGhvZCA/PyAnR0VUJyxcclxuICAgIC4uLm9wdGlvbnM/LmN1c3RvbUNvbmYsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIC4uLmhlYWRlcnMsXHJcbiAgICAgIC4uLm9wdGlvbnM/LmN1c3RvbUNvbmY/LmhlYWRlcnMsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGlmIChvcHRpb25zPy5ib2R5KSB7XHJcbiAgICBpZiAoanNvbikge1xyXG4gICAgICBjb25maWcuYm9keSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnM/LmJvZHkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZm9yIChjb25zdCBuYW1lIGluIG9wdGlvbnM/LmJvZHkpIHtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgb3B0aW9ucz8uYm9keVtuYW1lXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uZmlnLmJvZHkgPSBmb3JtRGF0YTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBkYXRhO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5mZXRjaChlbmRwb2ludCwgY29uZmlnKTtcclxuICAgIGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhPy5zdGF0dXNUZXh0ID8/ICdHYWdhbCByZXF1ZXN0IGtlIGFwaScpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycj8ubWVzc2FnZSB8fCBkYXRhKTtcclxuICB9XHJcbn1cclxuXHJcbmNsaWVudC5nZXQgPSAoZW5kcG9pbnQ6IHN0cmluZywgY3VzdG9tQ29uZiA9IHt9KSA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudChlbmRwb2ludCwgdHJ1ZSwgeyBtZXRob2Q6ICdHRVQnLCAuLi5jdXN0b21Db25mIH0pO1xyXG59O1xyXG5cclxuY2xpZW50LnBvc3QgPSAoZW5kcG9pbnQ6IHN0cmluZywgYm9keTogYW55LCBqc29uPywgY3VzdG9tQ29uZiA9IHt9KSA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudChlbmRwb2ludCwganNvbiwgeyBtZXRob2Q6ICdQT1NUJywgYm9keSwgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuXHJcbmNsaWVudC5wdXQgPSAoZW5kcG9pbnQ6IHN0cmluZywgYm9keT86IGFueSwganNvbj8sIGN1c3RvbUNvbmYgPSB7fSkgPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIGpzb24sIHsgbWV0aG9kOiAnUFVUJywgYm9keSwgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuXHJcbmNsaWVudC5kZWwgPSAoZW5kcG9pbnQ6IHN0cmluZywgYm9keT86IGFueSwganNvbj8sIGN1c3RvbUNvbmYgPSB7fSkgPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIGpzb24sIHsgbWV0aG9kOiAnREVMRVRFJywgYm9keSwgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuIiwiaW1wb3J0IHtcclxuICBsb2FkaW5nQWN0aW9uLFxyXG4gIGVycm9yQWN0aW9uLFxyXG4gIHJlZ2lzdGVyZWRBY3Rpb24sXHJcbiAgcmVtb3ZlZEFjdGlvbixcclxuICB3b3JrZXJzTG9hZGVkQWN0aW9uLFxyXG59IGZyb20gJy4vc3RvcmUnO1xyXG5pbXBvcnQgKiBhcyB3b3JrZXJTdmMgZnJvbSAnLi93b3JrZXIuY2xpZW50JztcclxuaW1wb3J0IHtXb3JrZXJ9IGZyb20gJy4vcmVkdWNlcidcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlciA9IChkYXRhOiBvYmplY3QpID0+IGFzeW5jIChkaXNwYXRjaDogYW55KSA9PiB7XHJcbiAgZGlzcGF0Y2gobG9hZGluZ0FjdGlvbigpKTtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgd29ya2VyID0gYXdhaXQgd29ya2VyU3ZjLnJlZ2lzdGVyKGRhdGEpIGFzIFdvcmtlcjtcclxuICAgIGRpc3BhdGNoKHJlZ2lzdGVyZWRBY3Rpb24od29ya2VyKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBkaXNwYXRjaChlcnJvckFjdGlvbihgZ2FnYWwgbWVuZGFmdGFya2FuICR7ZGF0YVsnbmFtZSddfWApKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlID0gKGlkOiBudW1iZXIpID0+IGFzeW5jIChkaXNwYXRjaDogYW55KSA9PiB7XHJcbiAgZGlzcGF0Y2gobG9hZGluZ0FjdGlvbigpKTtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgd29ya2VyU3ZjLnJlbW92ZShpZCk7XHJcbiAgICBkaXNwYXRjaChyZW1vdmVkQWN0aW9uKGlkKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBkaXNwYXRjaChlcnJvckFjdGlvbignZ2FnYWwgbWVuZ2hhcHVzIHBla2VyamEnKSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldExpc3QgPSBhc3luYyAoZGlzcGF0Y2g6IGFueSkgPT4ge1xyXG4gIGRpc3BhdGNoKGxvYWRpbmdBY3Rpb24oKSk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHdvcmtlcnMgPSBhd2FpdCB3b3JrZXJTdmMubGlzdCgpO1xyXG4gICAgZGlzcGF0Y2god29ya2Vyc0xvYWRlZEFjdGlvbih3b3JrZXJzKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBkaXNwYXRjaChlcnJvckFjdGlvbignZ2FnYWwgbWVtdWF0IGRhZnRhciBwZWtlcmphJykpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnLi4vbGliL2h0dHAtY2xpZW50JztcclxuXHJcbmltcG9ydCB7IFdPUktFUl9TRVJWSUNFX0JBU0VVUkwgfSBmcm9tICcuLi9jb25maWcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gKGRhdGE6IGFueSkgPT4ge1xyXG4gIHJldHVybiBjbGllbnQucG9zdChgJHtXT1JLRVJfU0VSVklDRV9CQVNFVVJMfS9yZWdpc3RlcmAsIGRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbGlzdCA9ICgpID0+IHtcclxuICByZXR1cm4gY2xpZW50LmdldChgJHtXT1JLRVJfU0VSVklDRV9CQVNFVVJMfS9saXN0YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmUgPSAoaWQ6IHN0cmluZyB8IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiBjbGllbnQuZGVsKGAke1dPUktFUl9TRVJWSUNFX0JBU0VVUkx9L3JlbW92ZT9pZD0ke2lkfWApO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaW5mbyA9IChpZDogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudC5nZXQoYCR7V09SS0VSX1NFUlZJQ0VfQkFTRVVSTH0vaW5mbz9pZD0ke2lkfWApO1xyXG59O1xyXG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMlxuICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEyJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiaW1wb3J0IFZ1ZSwgeyBDcmVhdGVFbGVtZW50LCBWTm9kZSB9IGZyb20gJ3Z1ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyID0gVnVlLmV4dGVuZCh7XHJcbiAgcmVuZGVyKGNyZWF0ZUVsZW1lbnQ6IENyZWF0ZUVsZW1lbnQpOiBWTm9kZSB7XHJcbiAgICBsZXQgaGVhZGVyID0gY3JlYXRlRWxlbWVudCgnZGl2JywgW1xyXG4gICAgICBjcmVhdGVFbGVtZW50KCd1bCcsIFtcclxuICAgICAgICBjcmVhdGVFbGVtZW50KCdsaScsIFtcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2EnLCB7IGF0dHJzOiB7IGhyZWY6ICd3b3JrZXIuaHRtbCcgfSB9LCAncGVrZXJqYScpLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xpJywgW1xyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnYScsIHsgYXR0cnM6IHsgaHJlZjogJ3Rhc2tzLmh0bWwnIH0gfSwgJ3Bla2VyamFhbicpLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xpJywgW1xyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudChcclxuICAgICAgICAgICAgJ2EnLFxyXG4gICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICdwZXJmb3JtYW5jZS5odG1sJyB9IH0sXHJcbiAgICAgICAgICAgICdraW5lcmphJ1xyXG4gICAgICAgICAgKSxcclxuICAgICAgICBdKSxcclxuICAgICAgXSksXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoJ2hyJyksXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoJ2g0JywgJ0RhZnRhcmthbiBQZWtlcmphIEJhcnUnKSxcclxuICAgIF0pO1xyXG4gICAgcmV0dXJuIGhlYWRlcjtcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IFZ1ZSwgeyBDcmVhdGVFbGVtZW50LCBWTm9kZSB9IGZyb20gJ3Z1ZSc7XHJcbmltcG9ydCB7IGNsZWFyRXJyb3JBY3Rpb24sIGVycm9yQWN0aW9uLCBzdG9yZSQgfSBmcm9tICcuLi9zdG9yZSc7XHJcbmltcG9ydCB7IHJlZ2lzdGVyIH0gZnJvbSAnLi4vYXN5bmMtYWN0aW9uJztcclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtID0gVnVlLmV4dGVuZCh7XHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFkZFdvcmtlcjoge1xyXG4gICAgICAgIG5hbWU6ICcnLFxyXG4gICAgICAgIGFnZTogMCxcclxuICAgICAgICBiaW86ICcnLFxyXG4gICAgICAgIGFkZHJlc3M6ICcnLFxyXG4gICAgICAgIHBob3RvOiAnJyxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICByZW5kZXIoY3JlYXRlRWxlbWVudDogQ3JlYXRlRWxlbWVudCk6IFZOb2RlIHtcclxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdkaXYnLCBbXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgJ2Zvcm0nLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGF0dHJzOiB7IG1ldGhvZDogJ3Bvc3QnLCBpZDogJ2Zvcm0nIH0sXHJcbiAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICBzdWJtaXQ6IHRoaXMuc3VibWl0V29ya2VyLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIFtcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywgeyBhdHRyczogeyBmb3I6ICduYW1lJyB9IH0sICdOYW1hOicpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnYnInKSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xyXG4gICAgICAgICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmFkZFdvcmtlci5uYW1lLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhdHRyczoge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgICBuYW1lOiAnbmFtZScsXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdtaXNhbCBidWRpbWFuJyxcclxuICAgICAgICAgICAgICBpZDogJ25hbWUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgIGlucHV0OiAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRXb3JrZXIubmFtZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2JyJyksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHsgYXR0cnM6IHsgZm9yOiAnYWdlJyB9IH0sICdVbXVyOicpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnYnInKSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xyXG4gICAgICAgICAgICBhdHRyczoge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICAgIG5hbWU6ICdhZ2UnLFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbWlzYWwgMjMnLFxyXG4gICAgICAgICAgICAgIGlkOiAnYWdlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5hZGRXb3JrZXIuYWdlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgIGlucHV0OiAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRXb3JrZXIuYWdlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnYnInKSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywgeyBhdHRyczogeyBmb3I6ICdwaG90bycgfSB9LCAnRm90bzonKSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2JyJyksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcclxuICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnZmlsZScsXHJcbiAgICAgICAgICAgICAgbmFtZTogJ3Bob3RvJyxcclxuICAgICAgICAgICAgICBpZDogJ3Bob3RvJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgLy8gICB2YWx1ZTogdGhpcy5hZGRXb3JrZXIucGhvdG8sXHJcbiAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgaW5wdXQ6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFdvcmtlci5waG90byA9IGUudGFyZ2V0LmZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2JyJyksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHsgYXR0cnM6IHsgZm9yOiAnYmlvJyB9IH0sICdCaW9kYXRhIFNpbmdrYXQ6JyksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdicicpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnLCB7XHJcbiAgICAgICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICAgICAgbmFtZTogJ2JpbycsXHJcbiAgICAgICAgICAgICAgaWQ6ICdiaW8nLFxyXG4gICAgICAgICAgICAgIGNvbHM6ICczMCcsXHJcbiAgICAgICAgICAgICAgcm93czogJzMnLFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnYmlvZGF0YSBzaW5na2F0IHBla2VyamEnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmFkZFdvcmtlci5iaW8sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgaW5wdXQ6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFdvcmtlci5iaW8gPSBlLnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdicicpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7IGF0dHJzOiB7IGZvcjogJ2FkZHJlc3MnIH0gfSwgJ0FsYW1hdDonKSxcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2JyJyksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScsIHtcclxuICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICBuYW1lOiAnYWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgaWQ6ICdhZGRyZXNzJyxcclxuICAgICAgICAgICAgICBjb2xzOiAnMzAnLFxyXG4gICAgICAgICAgICAgIHJvd3M6ICczJyxcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2FsYW1hdCBwZWtlcmphJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5hZGRXb3JrZXIuYWRkcmVzcyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICBpbnB1dDogKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkV29ya2VyLmFkZHJlc3MgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCdicicpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyBhdHRyczogeyB0eXBlOiAnc3VibWl0JyB9IH0sICdraXJpbScpLFxyXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCgnaHInKSxcclxuICAgICAgICBdXHJcbiAgICAgICksXHJcbiAgICBdKTtcclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIHN1Ym1pdFdvcmtlcihlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgc3RvcmUkLmRpc3BhdGNoPGFueT4oY2xlYXJFcnJvckFjdGlvbigpKTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICF0aGlzLmFkZFdvcmtlci5uYW1lIHx8XHJcbiAgICAgICAgIXRoaXMuYWRkV29ya2VyLmFnZSB8fFxyXG4gICAgICAgICF0aGlzLmFkZFdvcmtlci5iaW8gfHxcclxuICAgICAgICAhdGhpcy5hZGRXb3JrZXIucGhvdG8gfHxcclxuICAgICAgICAhdGhpcy5hZGRXb3JrZXIuYWRkcmVzc1xyXG4gICAgICApIHtcclxuICAgICAgICBzdG9yZSQuZGlzcGF0Y2goZXJyb3JBY3Rpb24oJ2Zvcm0gaXNpYW4gdGlkYWsgbGVuZ2thcCEnKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWRkV29ya2VyKTtcclxuXHJcbiAgICAgIC8vIHJlZ2lzdGVyIHVzZXJcclxuICAgICAgc3RvcmUkLmRpc3BhdGNoPGFueT4ocmVnaXN0ZXIodGhpcy5hZGRXb3JrZXIpKTtcclxuXHJcbiAgICAgIC8vIHJlc2V0IGZvcm1cclxuICAgICAgZS50YXJnZXQucmVzZXQoKTtcclxuICAgICAgdGhpcy5hZGRXb3JrZXIubmFtZSA9ICcnO1xyXG4gICAgICB0aGlzLmFkZFdvcmtlci5waG90byA9ICcnO1xyXG4gICAgICB0aGlzLmFkZFdvcmtlci5iaW8gPSAnJztcclxuICAgICAgdGhpcy5hZGRXb3JrZXIuYWRkcmVzcyA9ICcnO1xyXG4gICAgICB0aGlzLmFkZFdvcmtlci5hZ2UgPSAwO1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IFZ1ZSwgeyBDcmVhdGVFbGVtZW50LCBWTm9kZSB9IGZyb20gJ3Z1ZSc7XHJcbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gJy4uL2FzeW5jLWFjdGlvbic7XHJcbmltcG9ydCB7IHN0b3JlJCB9IGZyb20gJy4uL3N0b3JlJztcclxuXHJcbmV4cG9ydCBjb25zdCBXb3JrZXIgPSBWdWUuZXh0ZW5kKHtcclxuICBwcm9wczogWyd3b3JrZXInXSxcclxuICByZW5kZXIoY3JlYXRlRWxlbWVudDogQ3JlYXRlRWxlbWVudCk6IFZOb2RlIHtcclxuICAgIGxldCB3b3JrZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBbXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoJ2ltZycsIHtcclxuICAgICAgICBhdHRyczoge1xyXG4gICAgICAgICAgd2lkdGg6ICczMHB4JyxcclxuICAgICAgICAgIGhlaWdodDogJzMwcHgnLFxyXG4gICAgICAgICAgc3JjOiB0aGlzLiRwcm9wcy53b3JrZXIucGhvdG8sXHJcbiAgICAgICAgICBhbHQ6ICdwaG90by5qcGcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pLFxyXG4gICAgICBjcmVhdGVFbGVtZW50KCdzcGFuJywgdGhpcy4kcHJvcHMud29ya2VyLm5hbWUpLFxyXG4gICAgICBjcmVhdGVFbGVtZW50KFxyXG4gICAgICAgICdidXR0b24nLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgIGNsaWNrOiB0aGlzLnJlbW92ZVdvcmtlcixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnSEFQVVMnXHJcbiAgICAgICksXHJcbiAgICBdKTtcclxuICAgIHJldHVybiB3b3JrZXI7XHJcbiAgfSxcclxuICBtZXRob2RzOiB7XHJcbiAgICByZW1vdmVXb3JrZXIoZSkge1xyXG4gICAgICBjb25zdCB7IGlkIH0gPSB0aGlzLiRwcm9wcy53b3JrZXI7XHJcbiAgICAgIHN0b3JlJC5kaXNwYXRjaDxhbnk+KHJlbW92ZShpZCkpO1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IFZ1ZSwgeyBDcmVhdGVFbGVtZW50LCBWTm9kZSB9IGZyb20gJ3Z1ZSc7XHJcblxyXG5pbXBvcnQgeyBXb3JrZXIgfSBmcm9tICcuL1dvcmtlcic7XHJcblxyXG5leHBvcnQgY29uc3QgV29ya2VyTGlzdCA9IFZ1ZS5leHRlbmQoe1xyXG4gIHByb3BzOiBbJ3dvcmtlcnMnXSxcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICBXb3JrZXI6IFdvcmtlcixcclxuICB9LFxyXG4gIHJlbmRlcihjcmVhdGVFbGVtZW50OiBDcmVhdGVFbGVtZW50KTogVk5vZGUge1xyXG4gICAgbGV0IHdvcmtlcnM6IFZOb2RlW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB0aGlzLiRwcm9wcy53b3JrZXJzKSB7XHJcbiAgICAgIHdvcmtlcnMucHVzaChjcmVhdGVFbGVtZW50KCdXb3JrZXInLCB7IHByb3BzOiB7IHdvcmtlciB9IH0pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywgd29ya2Vycyk7XHJcbiAgfSxcclxufSk7XHJcbiIsImltcG9ydCB7IGdldExpc3QgfSBmcm9tICcuL2FzeW5jLWFjdGlvbic7XHJcbmltcG9ydCB7IHN0b3JlJCB9IGZyb20gJy4vc3RvcmUnO1xyXG5cclxuaW1wb3J0ICcuL21haW4uY3NzJztcclxuXHJcbmltcG9ydCBWdWUsIHsgQ3JlYXRlRWxlbWVudCwgVk5vZGUgfSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvSGVhZGVyJztcclxuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4vY29tcG9uZW50cy9Gb3JtJztcclxuaW1wb3J0IHsgV29ya2VyTGlzdCB9IGZyb20gJy4vY29tcG9uZW50cy93b3JrZXJMaXN0JztcclxuXHJcbm5ldyBWdWUoe1xyXG4gIGVsOiAnI2FwcCcsXHJcbiAgY29tcG9uZW50czoge1xyXG4gICAgSGVhZGVyOiBIZWFkZXIsXHJcbiAgICBBZGRXb3JrZXI6IEZvcm0sXHJcbiAgICBXb3JrZXJMaXN0LFxyXG4gIH0sXHJcbiAgcmVuZGVyKGNyZWF0ZUVsOiBDcmVhdGVFbGVtZW50KTogVk5vZGUge1xyXG4gICAgbGV0IGhlYWRlciA9IGNyZWF0ZUVsKCdIZWFkZXInKTtcclxuICAgIGxldCBmb3JtID0gY3JlYXRlRWwoJ0FkZFdvcmtlcicpO1xyXG4gICAgbGV0IHdvcmtlcnMgPSBjcmVhdGVFbCgnV29ya2VyTGlzdCcsIHsgcHJvcHM6IHsgd29ya2VyczogdGhpcy53b3JrZXJzIH0gfSk7XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZUVsKCdkaXYnLCBbXHJcbiAgICAgIGhlYWRlcixcclxuICAgICAgY3JlYXRlRWwoXHJcbiAgICAgICAgJ3AnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNsYXNzOiAnZXJyb3InLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGhpcy5lcnJvclxyXG4gICAgICApLFxyXG4gICAgICBjcmVhdGVFbChcclxuICAgICAgICAncCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY2xhc3M6ICdwcmltYXJ5JyxcclxuICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IHRoaXMuc2hvd0xvYWRpbmcsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ21lbXVhdC4uLidcclxuICAgICAgKSxcclxuICAgICAgZm9ybSxcclxuICAgICAgd29ya2VycyxcclxuICAgIF0pO1xyXG4gIH0sXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXRlOiB7fSxcclxuICAgICAgd29ya2VyczogW10sXHJcbiAgICAgIHNob3dsb2FkaW5nOiAnJyxcclxuICAgICAgZXJyb3I6ICcnLFxyXG4gICAgICBlcnJvclRleHQ6ICdnYWdhbCBtZW11YXQgZGFmdGFyIHBla2VyamFhbicsXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgbW91bnRlZCgpIHtcclxuICAgIHN0b3JlJC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlJC5nZXRTdGF0ZSgpO1xyXG4gICAgICB0aGlzLndvcmtlcnMgPSBzdGF0ZS53b3JrZXJzO1xyXG4gICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICAgIHRoaXMubG9hZGluZygpO1xyXG4gICAgICB0aGlzLnNob3dFcnJvcigpO1xyXG4gICAgfSk7XHJcbiAgICBzdG9yZSQuZGlzcGF0Y2g8YW55PihnZXRMaXN0KTtcclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGxvYWRpbmcoKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlPy5sb2FkaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZyA9ICcnO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcgPSAnbm9uZSc7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaG93RXJyb3IoKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlPy5lcnJvcikge1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yLnRvU3RyaW5nKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9ICcnO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9